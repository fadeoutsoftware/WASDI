#!/usr/bin/python3


'''
Import needed libraries
'''
import argparse
import cpuinfo
import datetime
import logging
import inspect
import json
import os
import psutil
import requests
import signal
import sys
import traceback
import time

from collections import OrderedDict
from keycloak import KeycloakOpenID




'''
This class is used to format
exceptions received.
'''
class EngineException(object):
    def __init__(self, **kwargs):
        self.oLogging = kwargs['oLogging']

        self.oLogging.error(
            'Script: %(errorScript)s'
            %{
                'errorScript': kwargs['aoError']['inspectError'][0][1]
            }
        )

        self.oLogging.error(
            'Line (approximately): %(errorInLine)s'
            %{
                'errorInLine': kwargs['aoError']['inspectError'][0][2]
            }
        )

        self.oLogging.error(
            'Method: %(errorFunctionName)s'
            %{
                'errorFunctionName': kwargs['aoError']['inspectError'][0][3]
            }
        )

        self.oLogging.error(
            'Type of error: %(errorType)s'
            %{
                'errorType': kwargs['aoError']['sysError'][0]
            }
        )

        self.oLogging.error(
            'Error message: %(errorMessage)s'
            %{
                'errorMessage': kwargs['aoError']['sysError'][1]
            }
        )

        tracebackIndex = 1
        for currentTracebackMessage in traceback.format_tb(kwargs['aoError']['sysError'][2]):
            self.oLogging.error(
                'Traceback - Line %(tracebackIndex)s: %(traceBackMessage)s'
                %{
                    'traceBackMessage': currentTracebackMessage.strip(),
                    'tracebackIndex': tracebackIndex
                }
            )

            tracebackIndex += 1

        if 'iExitCode' in kwargs and kwargs['iExitCode'] >= 0:
            sys.exit(kwargs['iExitCode'])




'''
This class is an abstraction for logging.
It is used to manage all log messages.
'''
class Logging(object):

    def __init__(self):
        self.oLogging = logging.getLogger('wasdi-system-resource')
        self.oLogging.setLevel(logging.INFO)

        ## ADD LOG ON SCREEN ##
        oLoggingFormatter = logging.Formatter('%(asctime)s | %(levelname)-8s | %(message)s')

        streamTty = logging.StreamHandler()
        streamTty.setFormatter(oLoggingFormatter)

        self.oLogging.addHandler(streamTty)


    def debug(self, message):
        self.oLogging.debug(message)


    def error(self, message):
        self.oLogging.error(message)


    def info(self, message):
        self.oLogging.info(message)


    def setLevel(self, level):
        self.oLogging.setLevel(level)




'''
This class is used to produce the
dictionnary with metrics taken.
'''
class SystemResourceMetric(object):
    def __init__(self, **kwargs):
        self.oLogging = kwargs['oLogging']
        self.aPartition = []
        self.aLicense = []

        if 'aLicense' in kwargs:
            for sValue in kwargs['aLicense']:
                aoToAppend = OrderedDict(
                    {
                        "name": sValue,
                        "fileToRead": kwargs['aLicense'][sValue]['fileToRead'],
                        "valuesToConsiderTrue": [(sValueToConsiderTrue.lower()) for sValueToConsiderTrue in kwargs['aLicense'][sValue]['valuesToConsiderTrue']]
                    }
                )

                self.aLicense.append(aoToAppend)

            # deduplicate the list
            self.aLicense = list(
                map(
                    json.loads, set(
                        map(json.dumps,
                            self.aLicense
                        )
                    )
                )
            )

        if 'aPartition' in kwargs:
            for sValue in kwargs['aPartition']:
                if sValue not in self.aPartition:
                    self.aPartition.append(sValue)

        # this dict must be created after all others
        self.aoMetric = OrderedDict(
            {
                "node": kwargs['aoData']['node'],
                "timestamp": OrderedDict(
                    {
                        "seconds": kwargs['aoData']['timestamp'],
                        "millis": kwargs['aoData']['timestamp'] * 1000
                    }
                ),
                "cpu": self.getCpu(),
                "disks": self.getDiskUsage(),
                "licenses": self.getLicense(),
                "memory": self.getMemory()
            }
        )

    def get(self):
        return self.aoMetric


    def getCpu(self):
        aoResult = OrderedDict()

        self.oLogging.info('Get CPU information')

        try:
            aoCpuInfo = cpuinfo.get_cpu_info()
            tupleCpuLoad = psutil.getloadavg()

            aoResult = OrderedDict(
                {
                    "count": OrderedDict(
                        {
                            "physical": psutil.cpu_count(logical = False),
                            "logical": psutil.cpu_count(logical = True) - psutil.cpu_count(logical = False),
                            "total": psutil.cpu_count(logical = True)
                        }
                    ),
                    "frequency": OrderedDict(
                        {
                            "hz": aoCpuInfo['hz_advertised_raw'][0],
                            "mhz": round(aoCpuInfo['hz_advertised_raw'][0] / 1000000),
                            "ghz": round(aoCpuInfo['hz_advertised_raw'][0] / 1000000000, 2)
                        }
                    ),
                    "load": OrderedDict(
                        {
                            "absolute": OrderedDict(
                                {
                                    "load1": tupleCpuLoad[0],
                                    "load5": tupleCpuLoad[1],
                                    "load15": tupleCpuLoad[2],
                                }
                            ),
                            "percentage": OrderedDict(
                                {
                                    "load1": round(tupleCpuLoad[0] / psutil.cpu_count(logical = True) * 100, 2),
                                    "load5": round(tupleCpuLoad[1] / psutil.cpu_count(logical = True) * 100, 2),
                                    "load15": round(tupleCpuLoad[2] / psutil.cpu_count(logical = True) * 100, 2)
                                }
                            )
                        }
                    )
                }
            )

            self.oLogging.info('OK')
        except:
            self.oLogging.error('Unable to get datas')

            EngineException(
                oLogging = self.oLogging,
                aoError = {
                    'inspectError': inspect.stack(),
                    'sysError': sys.exc_info()
                }
            )

        return aoResult


    def getDiskUsage(self):
        aResult = []

        for sCurrentPartition in self.aPartition:
            self.oLogging.info(
                'Get disk usage for \'%(sCurrentPartition)s\''
                %{
                    'sCurrentPartition': sCurrentPartition
                }
            )

            try:
                oDiskUsage = psutil.disk_usage(sCurrentPartition)

                aResult.append(OrderedDict(
                    {
                        "mountpoint": sCurrentPartition,
                        "absolute": OrderedDict(
                            {
                                "available": OrderedDict(
                                    {
                                        "unit": "bytes",
                                        "value": oDiskUsage.free
                                    }
                                ),
                                "total": OrderedDict(
                                    {
                                        "unit": "bytes",
                                        "value": oDiskUsage.total
                                    }
                                ),
                                "used": OrderedDict(
                                    {
                                        "unit": "bytes",
                                        "value": oDiskUsage.used
                                    }
                                )
                            }
                        ),
                        "percentage": OrderedDict(
                            {
                                "available": OrderedDict(
                                    {
                                        "value": round(100 - oDiskUsage.percent, 2)
                                    }
                                ),
                                "used": OrderedDict(
                                    {
                                        "value": round(oDiskUsage.percent, 2)
                                    }
                                )
                            }
                        )
                    }
                ))

                self.oLogging.info('OK')
            except:
                self.oLogging.error('Unable to get datas')

                EngineException(
                    oLogging = self.oLogging,
                    aoError = {
                        'inspectError': inspect.stack(),
                        'sysError': sys.exc_info()
                    }
                )

        return aResult

    def getLicense(self):
        aResult = []

        self.oLogging.info('Get license information')

        try:
            for aoCurrentLicense in self.aLicense:
                try:
                    with open(aoCurrentLicense['fileToRead'], 'r', encoding='utf-8') as oLicenseFile:
                        if oLicenseFile.read().strip().lower() in aoCurrentLicense['valuesToConsiderTrue']:
                            aResult.append(
                                OrderedDict(
                                    {
                                        "name": aoCurrentLicense['name'].lower(),
                                        "status": True
                                    }
                                )
                            )
                        else:
                            aResult.append(
                                OrderedDict(
                                    {
                                        "name": aoCurrentLicense['name'].lower(),
                                        "status": False
                                    }
                                )
                            )
                except FileNotFoundError:
                    aResult.append(
                        OrderedDict(
                            {
                                "name": aoCurrentLicense['name'].lower(),
                                "status": False
                            }
                        )
                    )
        except:
            self.oLogging.error('Unable to get datas')

            EngineException(
                oLogging = self.oLogging,
                aoError = {
                    'inspectError': inspect.stack(),
                    'sysError': sys.exc_info()
                }
            )

        return aResult

    def getMemory(self):
        aoResult = OrderedDict()

        self.oLogging.info('Get memory information')

        try:
            oMemory = psutil.virtual_memory()

            aoResult = OrderedDict(
                {
                    "absolute": OrderedDict(
                        {
                            "available": OrderedDict(
                                {
                                    "unit": "bytes",
                                    "value": oMemory.available
                                }
                            ),
                            "free": OrderedDict(
                                {
                                    "unit": "bytes",
                                    "value": oMemory.free
                                }
                            ),
                            "total": OrderedDict(
                                {
                                    "unit": "bytes",
                                    "value": oMemory.total
                                }
                            ),
                            "used": OrderedDict(
                                {
                                    "unit": "bytes",
                                    "value": oMemory.used
                                }
                            )
                        }
                    ),
                    "percentage": OrderedDict(
                        {
                            "available": OrderedDict(
                                {
                                    "value": round(100 - oMemory.percent, 2)
                                }
                            ),
                            "used": OrderedDict(
                                {
                                    "value": round(oMemory.percent, 2)
                                }
                            )
                        }
                    )
                }
            )

            self.oLogging.info('OK')
        except:
            self.oLogging.error('Unable to get datas')

            EngineException(
                oLogging = self.oLogging,
                aoError = {
                    'inspectError': inspect.stack(),
                    'sysError': sys.exc_info()
                }
            )

        return aoResult




'''
This class is the main class
It is used to:
    - get the configuration
    - manage signal
    - etc
'''
class WasdiSystemResourceMain(object):

    def __init__(self, **kwargs):
        self.bReleased = False
        self.aoConfiguration = None
        self.oKeycloakOpenId = None
        self.oLogging = kwargs['oLogging']
        self.sConfigurationFilePath = kwargs['sConfigurationFilePath']




    '''
    This method:
        - checks if the configuration file exists
        - if exists:
            - tries to read it
            - set self.aoConfiguration with datas
        - if not exists:
            - set self.aoConfiguration to None
    '''
    def getConfiguration(self):
        try:
            with open(self.sConfigurationFilePath, 'r') as oConfigurationFile:
                self.aoConfiguration = json.load(oConfigurationFile)

                if 'keycloack' in self.aoConfiguration and 'keycloak' not in self.aoConfiguration:
                    self.aoConfiguration['keycloak'] = self.aoConfiguration['keycloack']
        except FileNotFoundError:
            self.aoConfiguration = None
        except:
            EngineException(
                oLogging = self.oLogging,
                aoError = {
                    'inspectError': inspect.stack(),
                    'sysError': sys.exc_info()
                },
                iExitCode = 1
            )


    '''
    This method is executed when one of
    these signals is sent to the PID:
        - SIGINT (kill -2)
        - SIGQUIT (kill -3)
        - SIGKILL (kill -9)
        - SIGTERM (kill -15)

    The object property bReleased is setted
    to True: it will force the main loop
    to stop.
    '''
    def signalRelease(self, signalNumber, frame):
        self.oLogging.info('Releasing the process: it will stop in few seconds')
        self.bReleased = True


    '''
    This method is executed when one of these signals
    is sent to the PID:
        - SIGHUP (kill -1)
        - SIGUSR1 (kill -16)
        - SIGUSR2 (kill -17)

    The configuration is updated in the
    object property.
    '''
    def signalReload(self, signalNumber, frame):
        self.oLogging.info('Reloading the configuration file: new datas will be used in the next loop')
        self.getConfiguration()




    '''
    This method builds and returns a complete URL.
    Example:
        - prefix = https://www.example.com/
        - suffix = /rest/login
        --> return: https://www.example.com/rest/login
    '''
    def apiBuildUrl(self, prefix, suffix):
        if prefix[-1] == '/' and suffix[0] == '/':
            return prefix[:-1] + suffix
        else:
            return prefix + suffix




    '''
    This method is a generic method to call an API.

    Input:
        - kwargs['sAction']:
            - the endpoint to call
            - the prefix (the base URL) is taken from the WASDI configuration file
        - kwargs['aoData']:
            - dictionnary passed as 'json' when
            sMethod is post or patch
            - if defined, we pass what was setted
            - else we pass an empty directionnary
        - kwargs['aoHeaders'];
            - if defined, we pass what was setted
            - else, we generate a default headers
        - kwargs['aoParameters']:
            - if defined, we pass what was setted
            - else we pass an empty directionnary
        - kwargs['sMethod']:
            - get
            - post
            - patch

    Return:
        - the HTTP return code
        - the answer (format = JSON): could be None too
    '''
    def wasdiApiExecute(self, **kwargs):
        sUrl = self.apiBuildUrl(self.aoConfiguration['baseUrl'], kwargs['sAction'])

        self.oLogging.info(
            'Calling \'%(sUrl)s\''
            %{
                'sUrl': sUrl
            }
        )

        try:
            if 'aoData' not in kwargs:
                kwargs['aoData'] = {}

            if 'aoHeaders' not in kwargs:
                kwargs['aoHeaders'] = {
                    'Content-type': 'application/json'
                }

            if 'sSessionId' in kwargs:
                kwargs['aoHeaders']['x-session-token'] = kwargs['sSessionId']

            if 'aoParameters' not in kwargs:
                kwargs['aoParameters'] = {}


            if kwargs['sMethod'].lower() == 'get':
                oRequests = requests.request(
                    kwargs['sMethod'].upper(),
                    sUrl,
                    headers = kwargs['aoHeaders'],
                    params = kwargs['aoParameters'],
                    timeout = self.aoConfiguration['metrics']['api']['endpoint']['timeout']
                )
            elif kwargs['sMethod'].lower() in ['patch', 'post', 'put']:
                oRequests = requests.request(
                    kwargs['sMethod'].upper(),
                    sUrl,
                    headers = kwargs['aoHeaders'],
                    json = kwargs['aoData'],
                    params = kwargs['aoParameters'],
                    timeout = self.aoConfiguration['metrics']['api']['endpoint']['timeout']
                )
            else:
                # other methods not implemented in this example
                raise ValueError('Method should be \'get\', \'patch\', \'post\' or \'put\'.')

            self.oLogging.info(
                'OK (return code = %(returnCode)s)'
                %{
                    'returnCode': str(oRequests.status_code)
                }
            )

            if oRequests.status_code < 300:
                if kwargs['sMethod'].lower() == 'patch':
                    return oRequests.status_code, None
                else:
                    try:
                        return oRequests.status_code, oRequests.json()
                    except:
                        return oRequests.status_code, None
            else:
                return oRequests.status_code, None
        except:
            self.oLogging.error('Unable to call the URL')

            EngineException(
                oLogging = self.oLogging,
                aoError = {
                    'inspectError': inspect.stack(),
                    'sysError': sys.exc_info()
                }
            )

        return None




    '''
    This method connects to WASDI using one of these methods:
      - direct call to Keycloak
      - using a WASDI native API

    It depends of the parameter loadBalancer > api > method:
        - if present and value == 'keycloak': we request Keycloak directly
        - else: we request the WASDI's native API

    Return:
        - the session ID if the authentication worked successfully
        - None if the authentication failed
    '''
    def wasdiConnect(self):
        if 'authenticationSystem' in self.aoConfiguration['metrics']['api']['authentication'] and self.aoConfiguration['metrics']['api']['authentication']['authenticationSystem'].lower() == 'keycloak':
            return self.wasdiConnectWithKeycloak()

        return self.wasdiConnectWithApi()




    '''
    This method connects to WASDI using the appropriate
    API.

    Return:
        - the session ID if the authentication worked successfully
        - None if the authentication failed
    '''
    def wasdiConnectWithApi(self):
        self.oLogging.info('Connecting to WASDI using the WASDI API')

        try:
            aoData = {
                'userId': self.aoConfiguration['metrics']['api']['authentication']['username'],
                'userPassword': self.aoConfiguration['metrics']['api']['authentication']['password']
            }

            iReturnStatusCode, aoReturnValue = self.wasdiApiExecute(
                sAction = oWasdiSystemResourceMain.aoConfiguration['metrics']['api']['authentication']['path'],
                sMethod = oWasdiSystemResourceMain.aoConfiguration['metrics']['api']['authentication']['method'].lower(),
                aoData = aoData
            )

            if aoReturnValue == None or 'sessionId' not in aoReturnValue or aoReturnValue['sessionId'] == None:
                self.oLogging.error('Unable to connect')
                return None

            self.oLogging.info('OK: we are connected')
            return aoReturnValue['sessionId']
        except:
            self.oLogging.error('Unable to connect')

            EngineException(
                oLogging = self.oLogging,
                aoError = {
                    'inspectError': inspect.stack(),
                    'sysError': sys.exc_info()
                }
            )

        return None




    '''
    This method connects to WASDI using a direct request to Keycloak.

    Return:
        - the session ID if the authentication worked successfully
        - None if the authentication failed
    '''
    def wasdiConnectWithKeycloak(self):
        self.oLogging.info('Connecting to WASDI using Keycloak')

        try:
            self.oKeycloakOpenId = KeycloakOpenID(
                server_url = self.aoConfiguration['keycloak']['address'],
                client_id = self.aoConfiguration['keycloak']['client'],
                realm_name = self.aoConfiguration['keycloak']['realm'],
                client_secret_key = self.aoConfiguration['keycloak']['clientSecret']
            )

            self.sKeycloakToken = self.oKeycloakOpenId.token(
                self.aoConfiguration['metrics']['api']['authentication']['username'],
                self.aoConfiguration['metrics']['api']['authentication']['password']
            )

            self.oLogging.info('OK')
            return self.sKeycloakToken['access_token']
        except:
            self.oLogging.error('Unable to connect')

            EngineException(
                oLogging = self.oLogging,
                aoError = {
                    'inspectError': inspect.stack(),
                    'sysError': sys.exc_info()
                }
            )

        return None




    '''
    This method disconnects from WASDI using one of these methods:
      - direct call to Keycloak

    It depends of the parameter loadBalancer > api > method:
        - if present and value == 'keycloak': we request Keycloak directly
        - else: we return True because we have nothing to do

    Return:
        - True if disconnection worked
        - False else
    '''
    def wasdiDisconnect(self):
        if 'authenticationSystem' in self.aoConfiguration['metrics']['api']['authentication'] and self.aoConfiguration['metrics']['api']['authentication']['authenticationSystem'].lower() == 'keycloak':
            return self.wasdiDisconnectFromKeycloak()

        return True




    '''
    This method disconnects to WASDI calling directly
    Keycloak.

    Return:
        - True if disconnection worked
        - False else
    '''
    def wasdiDisconnectFromKeycloak(self):
        self.oLogging.info('Disconnecting the session from Keycloak')

        if self.oKeycloakOpenId is None:
            self.oLogging.info('Nothing to do')
            return True

        try:
            self.oKeycloakOpenId.logout(self.sKeycloakToken['refresh_token'])
            self.oLogging.info('OK')
            return True
        except:
            self.oLogging.error('Unable to connect')

            EngineException(
                oLogging = self.oLogging,
                aoError = {
                    'inspectError': inspect.stack(),
                    'sysError': sys.exc_info()
                }
            )

            return False




'''
ENTRYPOINT OF THE SCRIPT
'''
if __name__ == '__main__':
    '''
    INITIALIZE THE LOGGING OBJECT
    '''
    oLogging = Logging()
    '''
    /INITIALIZE THE LOGGING OBJECT
    '''


    '''
    INITIALIZE THE ARGUMENT PARSER AND PARSE ARGUMENTS
    '''
    oArgumentParser = argparse.ArgumentParser()

    oArgumentParser.add_argument(
        '-c',
        '--configuration-file',
        type = str,
        required = False,
        dest = 'sConfigurationFilePath',
        default = '{{ sWasdiConfigurationRootDirectoryPath }}/wasdiConfig.json',
        help = 'Full path to the WASDI\' configuration file'
    )

    oArgumentParsed = oArgumentParser.parse_args()
    '''
    /INITIALIZE THE ARGUMENT PARSER AND PARSE ARGUMENTS
    '''


    oWasdiSystemResourceMain = WasdiSystemResourceMain(
        oLogging = oLogging,
        sConfigurationFilePath = oArgumentParsed.sConfigurationFilePath
    )


    '''
    TRAP SIGNALS
    '''
    # Reload configuration
    signal.signal(signal.SIGHUP, oWasdiSystemResourceMain.signalReload)
    signal.signal(signal.SIGUSR1, oWasdiSystemResourceMain.signalReload)
    signal.signal(signal.SIGUSR2, oWasdiSystemResourceMain.signalReload)

    # Exit
    signal.signal(signal.SIGINT, oWasdiSystemResourceMain.signalRelease)
    signal.signal(signal.SIGQUIT, oWasdiSystemResourceMain.signalRelease)
    signal.signal(signal.SIGTERM, oWasdiSystemResourceMain.signalRelease)
    '''
    /TRAP SIGNALS
    '''


    '''
    PARSE THE WASDI CONFIGURATION FILE
    '''
    oLogging.info('Read the WASDI configuration file')
    oWasdiSystemResourceMain.getConfiguration()

    if type(oWasdiSystemResourceMain.aoConfiguration) == dict:
        oLogging.info('OK')
    else:
        oLogging.error('Unable to read the configuration file')
        sys.exit(1)
    '''
    /PARSE THE WASDI CONFIGURATION FILE
    '''


    '''
    INFINITE LOOP
    '''
    while oWasdiSystemResourceMain.bReleased == False:
        '''
        CHANGE LOGGING MODE
        '''
        if 'debug' in oWasdiSystemResourceMain.aoConfiguration['metrics'] and oWasdiSystemResourceMain.aoConfiguration['metrics']['debug'] == True:
            oLogging.setLevel(logging.DEBUG)
            oLogging.debug('The debug mode is enabled')
        else:
            oLogging.setLevel(logging.INFO)
            oLogging.debug('The debug mode is disabled')

        '''
        /CHANGE LOGGING MODE
        '''

        oSystemResourceMetric = SystemResourceMetric(
            oLogging = oLogging,
            aoData = {
                "node": oWasdiSystemResourceMain.aoConfiguration['nodeCode'],
                "timestamp": datetime.datetime.now(datetime.timezone.utc).timestamp()
            },
            aPartition = oWasdiSystemResourceMain.aoConfiguration['metrics']['metric']['partition'],
            aLicense = oWasdiSystemResourceMain.aoConfiguration['metrics']['metric']['license']
        )


        '''
        CREATE THE DATA TO SEND TO WASDI
        '''
        aoData = oSystemResourceMetric.get()
        '''
        /CREATE THE DATA TO SEND TO WASDI
        '''


        '''
        DELETE THE OBJECT TO SAVE MEMORY
        '''
        del(oSystemResourceMetric)
        '''
        /DELETE THE OBJECT TO SAVE MEMORY
        '''


        '''
        AUTHENTICATE TO WASDI
        '''
        sSessionId = oWasdiSystemResourceMain.wasdiConnect()

        if sSessionId is None:
            time.sleep(oWasdiSystemResourceMain.aoConfiguration['metrics']['waitingTime'])
            continue
        '''
        /AUTHENTICATE TO WASDI
        '''


        '''
        SEND DATA TO WASDI
        '''
        iReturnStatusCode, aoReturnValue = oWasdiSystemResourceMain.wasdiApiExecute(
            sAction = oWasdiSystemResourceMain.aoConfiguration['metrics']['api']['endpoint']['path'],
            sMethod = oWasdiSystemResourceMain.aoConfiguration['metrics']['api']['endpoint']['method'].lower(),
            sSessionId = sSessionId,
            aoData = aoData
        )

        oLogging.info('Response:')
        oLogging.info(
            '- return code: %(returnCode)s'
            %{
                'returnCode': str(iReturnStatusCode)
            }
        )

        if aoReturnValue != None:
            for sKey, sValue in aoReturnValue.items():
                oLogging.info(
                    '- key \'%(key)s\' = \'%(value)s\''
                    %{
                        'key': sKey,
                        'value': sValue
                    }
                )

        oLogging.debug('DATA:')
        oLogging.debug(json.dumps(aoData, indent=4, default=str))
        '''
        /SEND DATA TO WASDI
        '''


        '''
        DISCONNECT THE SESSON
        '''
        oWasdiSystemResourceMain.wasdiDisconnect()
        '''
        /DISCONNECT THE SESSON
        '''


        '''
        The 'if' condition is a little tip to avoid to enter
        in the 'sleep': the idea consists to exit directly
        the main loop if bReleased was changed to True
        + if we haven't entered in the 'sleep' function
        '''
        if oWasdiSystemResourceMain.bReleased == False:
            time.sleep(oWasdiSystemResourceMain.aoConfiguration['metrics']['waitingTime'])
    '''
    /INFINITE LOOP
    '''

    sys.exit(0)
