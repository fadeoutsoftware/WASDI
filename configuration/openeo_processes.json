{
	"processes": [
		{
			"id": "apply",
			"summary": "Apply a process to each pixel",
			"description": "Applies a *unary* process to each pixel value in the data cube (i.e. a local operation). A unary process takes a single value and returns a single value, for example ``abs()`` or ``linear_scale_range()``.",
			"categories": [
				"cubes"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "process",
					"description": "A unary process to be applied on each value, may consist of multiple sub-processes.",
					"schema": {
						"type": "object",
						"subtype": "process-graph",
						"parameters": [
							{
								"name": "x",
								"description": "The value to process.",
								"schema": {
									"description": "Any data type."
								}
							}
						]
					}
				}
			],
			"returns": {
				"description": "A data cube with the newly computed values. The resolution, cardinality and the number of dimensions are the same as for the original data cube.",
				"schema": {
					"type": "object",
					"subtype": "datacube"
				}
			},
			"links": [
				{
					"rel": "about",
					"href": "https://openeo.org/documentation/1.0/datacubes.html#apply",
					"title": "openEO documentation about the apply operation for manipulating datacubes"
				}
			]
		},
		{
			"id": "e",
			"summary": "Euler's number",
			"description": "Euler's number *e* is an irrational number (it cannot be written as a simple fraction) and it is the base of the Natural Logarithms. Its numerical value is approximately *2.71828*.",
			"categories": [
				"math"
			],
			"parameters": [],
			"returns": {
				"description": "The numerical value of Euler's number *e*",
				"schema": {
					"type": [
						"number"
					]
				}
			},
			"links": [
				{
					"rel": "about",
					"href": "https://mathworld.wolfram.com/e.html",
					"title": "Euler's number *e* explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "pi",
			"summary": "Pi",
			"description": "The number 'pi' is the ratio of a circle's circumference to its diameter. Its numerical value is approximately *3.14159*.",
			"categories": [
				"math"
			],
			"parameters": [],
			"returns": {
				"description": "The numerical value of 'pi'",
				"schema": {
					"type": [
						"number"
					]
				}
			},
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Pi.html",
					"title": "Pi explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "nan",
			"summary": "Not a Number",
			"description": "IEEE 754 floating point representation of Not a Number (NaN). In computer science, NaN (Not a Number) is a value of a numeric data type used to represent undefined numbers, such as the result of 0/0.",
			"categories": [
				"math"
			],
			"parameters": [],
			"returns": {
				"description": "The IEEE 754 floating point representation of Not a Number (NaN)",
				"schema": {
					"type": [
						"number"
					]
				}
			},
			"links": [
				{
					"rel": "about",
					"href": "https://mathworld.wolfram.com/NaN.html",
					"title": "NaN explained by Wolfram MathWorld"
				},
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/8766229",
					"title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "constant",
			"summary": "Constant value",
			"description": "Defines a constant value",
			"categories": [
				"math"
			],
			"parameters": [],
			"returns": {
				"description": "The value of the constant",
				"schema": {
					"type": "number"
				}
			},
			"links": [
				{
					"rel": "about",
					"href": "https://mathworld.wolfram.com/Constant.html",
					"title": "The definitoon of constant by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "divide",
			"summary": "Division of two numbers",
			"description": "Divides the number `x` by the number `y` (*`x / y`*) and returns the computed result.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The divident.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "The divisor.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed division of a number by another number.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 5,
						"y": 2.5
					},
					"returns": 2.5
				},
				{
					"arguments": {
						"x": -2,
						"y": -4
					},
					"returns": 0.5
				},
				{
					"arguments": {
						"x": 1,
						"y": null
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Division.html",
					"title": "Division explained by Wolfram MathWorld"
				},
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/8766229",
					"title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "subtract",
			"summary": "Subtraction of two numbers",
			"description": "Subtracts the number `y` from the number `y` (*`x - y`*) and returns the computed result.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The minuend.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "The subtrahend.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed result of the subtraction",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 5,
						"y": 2.5
					},
					"returns": 2.5
				},
				{
					"arguments": {
						"x": -2,
						"y": -4
					},
					"returns": 2
				},
				{
					"arguments": {
						"x": 1,
						"y": null
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Subtraction.html",
					"title": "Subtraction explained by Wolfram MathWorld"
				},
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/8766229",
					"title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "multiply",
			"summary": "Multiplication of two numbers",
			"description": "Multiplies the two numbers `x` and `y` (*x * y*) and returns the computed product.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The multiplier.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "The multiplicand.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed product of the two numbers.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 5,
						"y": 2.5
					},
					"returns": 12.5
				},
				{
					"arguments": {
						"x": -2,
						"y": -4
					},
					"returns": 8
				},
				{
					"arguments": {
						"x": 1,
						"y": null
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Product.html",
					"title": "Product explained by Wolfram MathWorld"
				},
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/8766229",
					"title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "add",
			"summary": "Sum of two numbers",
			"description": "Adds the number `x` to the number `y` (*`x + y`*) and returns the computed result.\n\nNo-data values are taken into account so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The first addend.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "The second addend.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed sum",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 5,
						"y": 2.5
					},
					"returns": 2.5
				},
				{
					"arguments": {
						"x": -2,
						"y": -4
					},
					"returns": 2
				},
				{
					"arguments": {
						"x": 1,
						"y": null
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Sum.html",
					"title": "Sum explained by Wolfram MathWorld"
				},
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/8766229",
					"title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "_sum",
			"summary": "Compute the sum by adding up numbers",
			"description": "Sums up all elements in a sequential array of numbers and returns the computed sum.\n\nBy default no-data values are ignored. Setting `ignore_nodata` to `false` considers no-data values so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
			"categories": [
				"math",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "An array of numbers.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"null"
							]
						}
					}
				},
				{
					"name": "ignore_nodata",
					"description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
					"schema": {
						"type": "boolean"
					},
					"default": true,
					"optional": true
				}
			],
			"returns": {
				"description": "The computed sum of the sequence of numbers.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							5,
							1
						]
					},
					"returns": 6
				},
				{
					"arguments": {
						"data": [
							-2,
							4,
							2.5
						]
					},
					"returns": 4.5
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Sum.html",
					"title": "Sum explained by Wolfram MathWorld"
				},
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/8766229",
					"title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "_min",
			"summary": "Minimum value",
			"description": "Computes the smallest value of an array of numbers, which is equal to the last element of a sorted (i.e., ordered) version of the array.\n\nAn array without non-`null` elements resolves always with `null`.",
			"categories": [
				"math",
				"math > statistics",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "An array of numbers.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"null"
							]
						}
					}
				},
				{
					"name": "ignore_nodata",
					"description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
					"schema": {
						"type": "boolean"
					},
					"default": true,
					"optional": true
				}
			],
			"returns": {
				"description": "The minimum value.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							1,
							0,
							3,
							2
						]
					},
					"returns": 0
				},
				{
					"arguments": {
						"data": []
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Minimum.html",
					"title": "Minimum explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "floor",
			"summary": "Rounding down of a number",
			"description": "Computes the largest integer less than or equal to a number `x`.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The number to round down.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The number rounded down",
				"schema": {
					"type": [
						"number"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				},
				{
					"arguments": {
						"x": 3.5
					},
					"returns": 3
				},
				{
					"arguments": {
						"x": -0.4
					},
					"returns": -1
				},
				{
					"arguments": {
						"x": -3.5
					},
					"returns": -4
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/FloorFunction.html",
					"title": "The floor function explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "ceil",
			"summary": "Rounding up of a number",
			"description": "Computes the largest integer greater than or equal to a number `x`.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The number to round up.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The number rounded up",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				},
				{
					"arguments": {
						"x": 3.5
					},
					"returns": 4
				},
				{
					"arguments": {
						"x": -0.4
					},
					"returns": 0
				},
				{
					"arguments": {
						"x": -3.5
					},
					"returns": -3
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/CeilingFunction.html",
					"title": "The ceil function explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "_int",
			"summary": "Integer part of a number",
			"description": "The integer part of the real number `x`.\n\nThis process is *not* an alias for the ``floor()`` process as defined by some mathematicians, see the examples for negative numbers in both processes for differences.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"description": "A number.",
					"name": "x",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "Integer part of the number.",
				"schema": {
					"type": [
						"integer",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				},
				{
					"arguments": {
						"x": 3.5
					},
					"returns": 3
				},
				{
					"arguments": {
						"x": -0.4
					},
					"returns": 0
				},
				{
					"arguments": {
						"x": -3.5
					},
					"returns": -3
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/IntegerPart.html",
					"title": "The integer part of a number explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "_round",
			"summary": "Rounding to a specified precision",
			"description": "Rounds a real number `x` to specified precision `p`.\n\nIf `x` is halfway between closest numbers of precision `p`, it is rounded to the closest even number of precision `p`.\nThis behavior follows [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) and is often called \"round to nearest (even)\" or \"banker's rounding\". It minimizes rounding errors that result from consistently rounding a midpoint value in a single direction.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"description": "The number to round.",
					"name": "x",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"name": "p",
					"description": "A positive number specifies the number of digits after the decimal point to round to. A negative number means rounding to a power of ten, so for example *-2* rounds to the nearest hundred. Defaults to *0*.",
					"default": 0,
					"optional": true,
					"schema": {
						"type": "integer"
					}
				}
			],
			"returns": {
				"description": "The rounded number.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				},
				{
					"arguments": {
						"p": 1,
						"x": 3.56
					},
					"returns": 3.6
				},
				{
					"arguments": {
						"p": 2,
						"x": -0.4444444
					},
					"returns": -0.44
				},
				{
					"arguments": {
						"x": -2.5
					},
					"returns": -2
				},
				{
					"arguments": {
						"x": -3.5
					},
					"returns": -4
				},
				{
					"arguments": {
						"p": 1,
						"x": 0.25
					},
					"returns": 0.2
				},
				{
					"arguments": {
						"p": 1,
						"x": 0.35
					},
					"returns": 0.4
				},
				{
					"arguments": {
						"p": -2,
						"x": 1234.5
					},
					"returns": 1200
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/AbsoluteValue.html",
					"title": "The absolute value explained by Wolfram MathWorld"
				},
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/8766229",
					"title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "exp",
			"summary": "Exponentiation to the base e",
			"description": "Exponential function to the base *e* raised to the power of `p`.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"description": "The numerical exponent.",
					"name": "p",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed value for *e* raised to the power of `p`.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"p": 0
					},
					"returns": 1
				},
				{
					"arguments": {
						"p": null
					},
					"returns": null
				}
			],
			"links": [
				{
					"href": "http://mathworld.wolfram.com/ExponentialFunction.html",
					"rel": "about",
					"title": "Exponential function explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "log",
			"summary": "Logarithm to a base",
			"description": "Logarithm to the base `base` of the number `x` is defined to be the inverse function of taking b to the power of x.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it. Therefore, `log(0, 2)` results in ±infinity if the processing environment supports it or otherwise an exception is thrown.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"description": "A number to compute the logarithm for.",
					"name": "x",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"description": "The numerical base.",
					"name": "base",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed logarithm.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"base": 10,
						"x": 10
					},
					"returns": 1
				},
				{
					"arguments": {
						"base": 2,
						"x": 2
					},
					"returns": 1
				},
				{
					"arguments": {
						"base": 2,
						"x": 4
					},
					"returns": 2
				},
				{
					"arguments": {
						"base": 16,
						"x": 1
					},
					"returns": 0
				}
			],
			"links": [
				{
					"href": "http://mathworld.wolfram.com/Logarithm.html",
					"rel": "about",
					"title": "Logarithm explained by Wolfram MathWorld"
				},
				{
					"href": "https://ieeexplore.ieee.org/document/8766229",
					"rel": "about",
					"title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "ln",
			"summary": "Natural logarithm",
			"description": "The natural logarithm is the logarithm to the base *e* of the number `x`, which equals to using the *log* process with the base set to *e*. The natural logarithm is the inverse function of taking *e* to the power x.\n\nThe no-data value `null` is passed through.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it. Therefore, *`ln(0)`* results in ±infinity if the processing environment supports it or otherwise an exception is thrown.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"description": "A number to compute the natural logarithm for.",
					"name": "x",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed natural logarithm.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1
					},
					"returns": 0
				}
			],
			"links": [
				{
					"href": "http://mathworld.wolfram.com/NaturalLogarithm.html",
					"rel": "about",
					"title": "Natural logarithm explained by Wolfram MathWorld"
				},
				{
					"href": "https://ieeexplore.ieee.org/document/8766229",
					"rel": "about",
					"title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "cos",
			"summary": "Cosine",
			"description": "Computes the cosine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"description": "An angle in radians.",
					"name": "x",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed cosine of `x`.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 1
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Cosine.html",
					"title": "Cosine explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "arccos",
			"summary": "Inverse cosine",
			"description": "Computes the arc cosine of `x`. The arc cosine is the inverse function of the cosine so that *`arccos(cos(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed angle in radians.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1
					},
					"returns": 0
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/InverseCosine.html",
					"title": "Inverse cosine explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "cosh",
			"summary": "Hyperbolic cosine",
			"description": "Computes the hyperbolic cosine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "An angle in radians.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed hyperbolic cosine of `x`.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 1
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/HyperbolicCosine.html",
					"title": "Hyperbolic cosine explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "arcosh",
			"summary": "Inverse hyperbolic cosine",
			"description": "Computes the inverse hyperbolic cosine of `x`. It is the inverse function of the hyperbolic cosine so that *`arcosh(cosh(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed angle in radians.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1
					},
					"returns": 0
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/InverseHyperbolicCosine.html",
					"title": "Inverse hyperbolic cosine explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "sin",
			"summary": "Sine",
			"description": "Computes the sine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "An angle in radians.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed sine of `x`.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Sine.html",
					"title": "Sine explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "arcsin",
			"summary": "Inverse sine",
			"description": "Computes the arc sine of `x`. The arc sine is the inverse function of the sine so that *`arcsin(sin(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed angle in radians.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/InverseSine.html",
					"title": "Inverse sine explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "sinh",
			"summary": "Hyperbolic sine",
			"description": "Computes the hyperbolic sine of `x`.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "An angle in radians.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed hyperbolic sine of `x`.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/HyperbolicSine.html",
					"title": "Hyperbolic sine explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "arsinh",
			"summary": "Inverse hyperbolic sine",
			"description": "Computes the inverse hyperbolic sine of `x`. It is the inverse function of the hyperbolic sine so that *`arsinh(sinh(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed angle in radians.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/InverseHyperbolicSine.html",
					"title": "Inverse hyperbolic sine explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "tan",
			"summary": "Tangent",
			"description": "Computes the tangent of `x`. The tangent is defined to be the sine of x divided by the cosine of x.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "An angle in radians.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed tangent of `x`.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Tangent.html",
					"title": "Tangent explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "arctan",
			"summary": "Inverse tangent",
			"description": "Computes the arc tangent of `x`. The arc tangent is the inverse function of the tangent so that *`arctan(tan(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed angle in radians.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/InverseTangent.html",
					"title": "Inverse tangent explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "tanh",
			"summary": "Hyperbolic tangent",
			"description": "Computes the hyperbolic tangent of `x`. The tangent is defined to be the hyperbolic sine of x divided by the hyperbolic cosine of x.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "An angle in radians.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed hyperbolic tangent of `x`.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/HyperbolicTangent.html",
					"title": "Hyperbolic tangent explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "artanh",
			"summary": "Inverse hyperbolic tangent",
			"description": "Computes the inverse hyperbolic tangent of `x`. It is the inverse function of the hyperbolic tangent so that *`artanh(tanh(x)) = x`*.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed angle in radians.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/InverseHyperbolicTangent.html",
					"title": "Inverse hyperbolic tangent explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "arctan2",
			"summary": "Inverse tangent of two numbers",
			"description": "Computes the arc tangent of two numbers `x` and `y`. It is similar to calculating the arc tangent of *`y / x`*, except that the signs of both arguments are used to determine the quadrant of the result.\n\nWorks on radians only.\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "y",
					"description": "A number to be used as the dividend.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"name": "x",
					"description": "A number to be used as the divisor.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed angle in radians.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0,
						"y": 0
					},
					"returns": 0
				},
				{
					"arguments": {
						"x": 1.5,
						"y": null
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "https://en.wikipedia.org/wiki/Atan2",
					"title": "Two-argument inverse tangent explained by Wikipedia"
				}
			]
		},
		{
			"id": "linear_scale_range",
			"summary": "Linear transformation between two ranges",
			"description": "Performs a linear transformation between the input and output range.\n\nThe given number in `x` is clipped to the bounds specified in `inputMin` and `inputMax` so that the underlying formula *`((x - inputMin) / (inputMax - inputMin)) * (outputMax - outputMin) + outputMin`* never returns any value lower than `outputMin` or greater than `outputMax`.\n\nPotential use case include\n\n* scaling values to the 8-bit range (0 - 255) often used for numeric representation of values in one of the channels of the [RGB colour model](https://en.wikipedia.org/wiki/RGB_color_model#Numeric_representations) or\n* calculating percentages (0 - 100).\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number to transform. The number gets clipped to the bounds specified in `inputMin` and `inputMax`.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"name": "inputMin",
					"description": "Minimum value the input can obtain.",
					"schema": {
						"type": "number"
					}
				},
				{
					"name": "inputMax",
					"description": "Maximum value the input can obtain.",
					"schema": {
						"type": "number"
					}
				},
				{
					"name": "outputMin",
					"description": "Minimum value of the desired output range.",
					"default": 0,
					"optional": true,
					"schema": {
						"type": "number"
					}
				},
				{
					"name": "outputMax",
					"description": "Maximum value of the desired output range.",
					"default": 1,
					"optional": true,
					"schema": {
						"type": "number"
					}
				}
			],
			"returns": {
				"description": "The transformed number.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"inputMax": 1,
						"inputMin": -1,
						"outputMax": 255,
						"outputMin": 0,
						"x": 0.3
					},
					"returns": 165.75
				},
				{
					"arguments": {
						"inputMax": 255,
						"inputMin": 0,
						"x": 25.5
					},
					"returns": 0.1
				},
				{
					"arguments": {
						"inputMax": 100,
						"inputMin": 0,
						"x": null
					},
					"returns": null
				},
				{
					"arguments": {
						"inputMax": 1,
						"inputMin": 0,
						"outputMax": 255,
						"outputMin": 0,
						"x": 1.12
					},
					"description": "Shows that the input data is clipped.",
					"returns": 255
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "https://mathworld.wolfram.com/LinearTransformation.html",
					"title": "Linear transformation explained by wolfram MathWorld"
				}
			]
		},
		{
			"id": "mod",
			"summary": "Modulo",
			"description": "Remainder after a division of `x` by `y` for both integers and floating-point numbers.\n\nThe result of a modulo operation has the sign of the divisor. The handling regarding the sign of the result [differs between programming languages](https://en.wikipedia.org/wiki/Modulo_operation#In_programming_languages) and needs careful consideration to avoid unexpected results.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`. A modulo by zero results in ±infinity if the processing environment supports it. Otherwise, a `DivisionByZero` exception must the thrown.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number to be used as the dividend.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "A number to be used as the divisor.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The remainder after division.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 27,
						"y": 5
					},
					"returns": 2
				},
				{
					"arguments": {
						"x": -27,
						"y": 5
					},
					"returns": 3
				},
				{
					"arguments": {
						"x": 3.14,
						"y": -2
					},
					"returns": -0.86
				},
				{
					"arguments": {
						"x": -27,
						"y": -5
					},
					"returns": -2
				},
				{
					"arguments": {
						"x": 27,
						"y": null
					},
					"returns": null
				},
				{
					"arguments": {
						"x": null,
						"y": 5
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "https://en.wikipedia.org/wiki/Modulo_operation",
					"title": "Modulo explained by Wikipedia"
				}
			]
		},
		{
			"id": "absolute",
			"summary": "Absolute value",
			"description": "Computes the absolute value of a real number `x`, which is the \"unsigned\" portion of x and often denoted as *|x|*.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed absolute value.",
				"schema": {
					"minimum": 0,
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				},
				{
					"arguments": {
						"x": 3.5
					},
					"returns": 3.5
				},
				{
					"arguments": {
						"x": -0.4
					},
					"returns": 0.4
				},
				{
					"arguments": {
						"x": -3.5
					},
					"returns": 3.5
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/AbsoluteValue.html",
					"title": "Absolute value explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "sgn",
			"summary": "Signum",
			"description": "The signum (also known as *sign*) of `x` is defined as:\n\n* *1* if *x > 0*\n* *0* if *x = 0*\n* *-1* if *x < 0*\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed signum value of `x`.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": -2
					},
					"returns": -1
				},
				{
					"arguments": {
						"x": 3.5
					},
					"returns": 1
				},
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				},
				{
					"arguments": {
						"x": null
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Sign.html",
					"title": "Sign explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "sqrt",
			"summary": "Square root",
			"description": "Computes the square root of a real number `x`, which is equal to calculating `x` to the power of *0.5*.\n\nA square root of x is a number a such that *`a² = x`*. Therefore, the square root is the inverse function of a to the power of 2, but only for *a >= 0*.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed square root.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 0
					},
					"returns": 0
				},
				{
					"arguments": {
						"x": 1
					},
					"returns": 1
				},
				{
					"arguments": {
						"x": 9
					},
					"returns": 3
				},
				{
					"arguments": {
						"x": null
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/SquareRoot.html",
					"title": "Square root explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "power",
			"summary": "Exponentiation",
			"description": "Computes the exponentiation for the base `base` raised to the power of `p`.\n\nThe no-data value `null` is passed through and therefore gets propagated if any of the arguments is `null`.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "base",
					"description": "The numerical base.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"name": "p",
					"description": "The numerical exponent.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "The computed value for `base` raised to the power of `p`.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"base": 0,
						"p": 2
					},
					"returns": 0
				},
				{
					"arguments": {
						"base": 2.5,
						"p": 0
					},
					"returns": 1
				},
				{
					"arguments": {
						"base": 3,
						"p": 3
					},
					"returns": 27
				},
				{
					"arguments": {
						"base": 5,
						"p": -1
					},
					"returns": 0.2
				},
				{
					"arguments": {
						"base": 1,
						"p": 0.5
					},
					"returns": 1
				},
				{
					"arguments": {
						"base": 1,
						"p": null
					},
					"returns": null
				},
				{
					"arguments": {
						"base": null,
						"p": 2
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Power.html",
					"title": "Power explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "clip",
			"summary": "Clip a value between a minimum and a maximum",
			"description": "Clips a number between specified minimum and maximum values. A value larger than the maximum value is set to the maximum value, a value lower than the minimum value is set to the minimum value.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A number.",
					"schema": {
						"type": [
							"number",
							"null"
						]
					}
				},
				{
					"name": "min",
					"description": "Minimum value. If the value is lower than this value, the process will return the value of this parameter.",
					"schema": {
						"type": "number"
					}
				},
				{
					"name": "max",
					"description": "Maximum value. If the value is greater than this value, the process will return the value of this parameter.",
					"schema": {
						"type": "number"
					}
				}
			],
			"returns": {
				"description": "The value clipped to the specified range.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"max": 1,
						"min": -1,
						"x": -5
					},
					"returns": -1
				},
				{
					"arguments": {
						"max": 10,
						"min": 1,
						"x": 10.001
					},
					"returns": 10
				},
				{
					"arguments": {
						"max": 0.02,
						"min": 0,
						"x": 0.000001
					},
					"returns": 0.000001
				},
				{
					"arguments": {
						"max": 1,
						"min": 0,
						"x": null
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "https://en.wikipedia.org/wiki/Clamping_(graphics)",
					"title": "Clamping explained by Wikipedia"
				}
			]
		},
		{
			"id": "quantiles",
			"summary": "Quantiles",
			"description": "Calculates quantiles, which are cut points dividing the range of a sample distribution into either\n\n1. intervals corresponding to the given probabilities *or*\n2. equal-sized intervals (q-quantiles).\n\nEither the parameter `probabilities` or `q` must be specified, otherwise the `QuantilesParameterMissing` exception is thrown. If both parameters are set the `QuantilesParameterConflict` exception is thrown.\n\nSample quantiles can be computed with several different algorithms. Hyndman and Fan (1996) have concluded on nine different types, which are commonly implemented in statistical software packages. This process is implementing type 7, which is implemented widely and often also the default type (e.g. in Excel, Julia, Python, R and S).",
			"categories": [
				"math > statistics"
			],
			"parameters": [
				{
					"name": "data",
					"description": "An array of numbers.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"null"
							]
						}
					}
				},
				{
					"name": "probabilities",
					"description": "Quantiles to calculate. Either a list of probabilities or the number of intervals:\n\n* Provide an array with a sorted list of probabilities in ascending order to calculate quantiles for. The probabilities must be between 0 and 1 (inclusive). If not sorted in ascending order, an `AscendingProbabilitiesRequired` exception is thrown.\n* Provide an integer to specify the number of intervals to calculate quantiles for. Calculates q-quantiles with equal-sized intervals.",
					"schema": [
						{
							"title": "List of probabilities",
							"type": "array",
							"uniqueItems": true,
							"items": {
								"type": "number",
								"minimum": 0,
								"maximum": 1
							}
						},
						{
							"title": "Number of intervals (q-quantiles)",
							"type": "integer",
							"minimum": 2
						}
					],
					"optional": true
				},
				{
					"name": "q",
					"description": "Number of intervals to calculate quantiles for. Calculates q-quantiles with equal-sized intervals.\n\nThis parameter has been **deprecated**. Please use the parameter `probabilities` instead.",
					"deprecated": true,
					"schema": {
						"type": "integer",
						"minimum": 2
					},
					"optional": true
				},
				{
					"name": "ignore_nodata",
					"description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that an array with `null` values is returned if any element is such a value.",
					"schema": {
						"type": "boolean"
					},
					"default": true,
					"optional": true
				}
			],
			"returns": {
				"description": "An array with the computed quantiles. The list has either\n\n* as many elements as the given list of `probabilities` had or\n* *`q`-1* elements.\n\nIf the input array is empty the resulting array is filled with as many `null` values as required according to the list above. See the 'Empty array' example for an example.",
				"schema": {
					"type": "array",
					"items": {
						"type": [
							"number",
							"null"
						]
					}
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							2,
							4,
							4,
							4,
							5,
							5,
							7,
							9
						],
						"probabilities": [
							0.005,
							0.01,
							0.02,
							0.05,
							0.1,
							0.5
						]
					},
					"returns": [
						2.07,
						2.14,
						2.28,
						2.7,
						3.4,
						4.5
					]
				},
				{
					"arguments": {
						"data": [
							2,
							4,
							4,
							4,
							5,
							5,
							7,
							9
						],
						"probabilities": 4
					},
					"returns": [
						4,
						4.5,
						5.5
					]
				},
				{
					"arguments": {
						"data": [
							-1,
							-0.5,
							null,
							1
						],
						"probabilities": 2
					},
					"returns": [
						-0.5
					]
				},
				{
					"arguments": {
						"data": [
							-1,
							-0.5,
							null,
							1
						],
						"probabilities": 4,
						"ignore_nodata": false
					},
					"returns": [
						null,
						null,
						null
					]
				},
				{
					"title": "Empty array",
					"arguments": {
						"data": [],
						"probabilities": [
							0.1,
							0.5
						]
					},
					"returns": [
						null,
						null
					]
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "https://en.wikipedia.org/wiki/Quantile",
					"title": "Quantiles explained by Wikipedia"
				},
				{
					"rel": "about",
					"href": "https://www.amherst.edu/media/view/129116/original/Sample+Quantiles.pdf",
					"type": "application/pdf",
					"title": "Hyndman and Fan (1996): Sample Quantiles in Statistical Packages"
				}
			]
		},
		{
			"id": "product",
			"summary": "Compute the product by multiplying numbers",
			"description": "Multiplies all elements in a sequential array of numbers and returns the computed product.\n\nBy default no-data values are ignored. Setting `ignore_nodata` to `false` considers no-data values so that `null` is returned if any element is such a value.\n\nThe computations follow [IEEE Standard 754](https://ieeexplore.ieee.org/document/8766229) whenever the processing environment supports it.",
			"categories": [
				"math",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "An array of numbers.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"null"
							]
						}
					}
				},
				{
					"name": "ignore_nodata",
					"description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
					"schema": {
						"type": "boolean"
					},
					"default": true,
					"optional": true
				}
			],
			"returns": {
				"description": "The computed product of the sequence of numbers.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							5,
							0
						]
					},
					"returns": 0
				},
				{
					"arguments": {
						"data": [
							-2,
							4,
							2.5
						]
					},
					"returns": -20
				},
				{
					"arguments": {
						"data": [
							1,
							null
						],
						"ignore_nodata": false
					},
					"returns": null
				},
				{
					"arguments": {
						"data": [
							-1
						]
					},
					"returns": -1
				},
				{
					"arguments": {
						"data": [
							null
						],
						"ignore_nodata": false
					},
					"returns": null
				},
				{
					"arguments": {
						"data": []
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Product.html",
					"title": "Product explained by Wolfram MathWorld"
				},
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/8766229",
					"title": "IEEE Standard 754-2019 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"summary": "Normalized difference",
			"description": "Computes the normalized difference for two bands. The normalized difference is computed as *`(x - y) / (x + y)`*.\n\nThis process could be used for a number of remote sensing indices such as:\n\n* [NDVI](https://eos.com/ndvi/): `x` = NIR band, `y` = red band\n* [NDWI](https://eos.com/ndwi/): `x` = NIR band, `y` = SWIR band\n* [NDSI](https://eos.com/ndsi/): `x` = green band, `y` = SWIR band\n\nSome back-ends may have native processes such as ``ndvi()`` available for convenience.",
			"id": "normalized_difference",
			"categories": [
				"math"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The value for the first band.",
					"schema": {
						"type": "number"
					}
				},
				{
					"name": "y",
					"description": "The value for the second band.",
					"schema": {
						"type": "number"
					}
				}
			],
			"returns": {
				"description": "The computed normalized difference.",
				"schema": {
					"maximum": 1,
					"minimum": -1,
					"type": "number"
				}
			},
			"links": [
				{
					"rel": "related",
					"href": "https://eos.com/ndvi/",
					"title": "NDVI explained by EOS"
				},
				{
					"rel": "related",
					"href": "https://eos.com/ndwi/",
					"title": "NDWI explained by EOS"
				},
				{
					"rel": "related",
					"href": "https://eos.com/ndsi/",
					"title": "NDSI explained by EOS"
				}
			]
		},
		{
			"id": "ndvi",
			"summary": "Normalized Difference Vegetation Index",
			"description": "Computes the Normalized Difference Vegetation Index (NDVI). The NDVI is computed as *`(nir - red) / (nir + red)`*.\n\nThe `data` parameter expects a raster data cube with a dimension of type `bands` or a `DimensionAmbiguous` exception is thrown otherwise. By default, the dimension must have at least two bands with the common names `red` and `nir` assigned. Otherwise, the user has to specify the parameters `nir` and `red`. If neither is the case, either the exception `NirBandAmbiguous` or `RedBandAmbiguous` is thrown. The common names for each band are specified in the collection's band metadata and are *not* equal to the band names.\n\nBy default, the dimension of type `bands` is dropped by this process. To keep the dimension specify a new band name in the parameter `target_band`. This adds a new dimension label with the specified name to the dimension, which can be used to access the computed values. If a band with the specified name exists, a `BandExists` is thrown.\n\nThis process is very similar to the process ``normalized_difference()``, but determines the bands automatically based on the common names (`red`/`nir`) specified in the metadata.",
			"categories": [
				"cubes",
				"math",
				"vegetation indices"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A raster data cube with two bands that have the common names `red` and `nir` assigned.",
					"schema": {
						"dimensions": [
							{
								"axis": [
									"x",
									"y"
								],
								"type": "spatial"
							},
							{
								"type": "bands"
							}
						],
						"subtype": "datacube",
						"type": "object"
					}
				},
				{
					"name": "nir",
					"default": "nir",
					"description": "The name of the NIR band. Defaults to the band that has the common name `nir` assigned.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.",
					"optional": true,
					"schema": {
						"subtype": "band-name",
						"type": "string"
					}
				},
				{
					"name": "red",
					"default": "red",
					"description": "The name of the red band. Defaults to the band that has the common name `red` assigned.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.",
					"optional": true,
					"schema": {
						"subtype": "band-name",
						"type": "string"
					}
				},
				{
					"name": "target_band",
					"default": null,
					"description": "By default, the dimension of type `bands` is dropped. To keep the dimension specify a new band name in this parameter so that a new dimension label with the specified name will be added for the computed values.",
					"optional": true,
					"schema": [
						{
							"pattern": "^\\w+$",
							"type": "string"
						},
						{
							"type": "null"
						}
					]
				}
			],
			"returns": {
				"description": "A raster data cube containing the computed NDVI values. The structure of the data cube differs depending on the value passed to `target_band`:\n\n* `target_band` is `null`: The data cube does not contain the dimension of type `bands`, the number of dimensions decreases by one. The dimension properties (name, type, labels, reference system and resolution) for all other dimensions remain unchanged.\n* `target_band` is a string: The data cube keeps the same dimensions. The dimension properties remain unchanged, but the number of dimension labels for the dimension of type `bands` increases by one. The additional label is named as specified in `target_band`.",
				"schema": {
					"dimensions": [
						{
							"axis": [
								"x",
								"y"
							],
							"type": "spatial"
						}
					],
					"subtype": "datacube",
					"type": "object"
				}
			},
			"links": [
				{
					"rel": "about",
					"href": "https://en.wikipedia.org/wiki/Normalized_difference_vegetation_index",
					"title": "NDVI explained by Wikipedia"
				},
				{
					"rel": "about",
					"href": "https://earthobservatory.nasa.gov/features/MeasuringVegetation/measuring_vegetation_2.php",
					"title": "NDVI explained by NASA"
				},
				{
					"rel": "about",
					"href": "https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names",
					"title": "List of common band names as specified by the STAC specification"
				}
			]
		},
		{
			"id": "_and",
			"summary": "Logical AND",
			"description": "Checks if **both** values are true.\n\nEvaluates parameter `x` before `y` and stops once the outcome is unambiguous. If any argument is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null  | false | true\n----- || ----- | ----- | -----\nnull  || null  | false | null\nfalse || false | false | false\ntrue  || null  | false | true\n```",
			"categories": [
				"logic"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A boolean value.",
					"schema": {
						"type": [
							"boolean",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "A boolean value.",
					"schema": {
						"type": [
							"boolean",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "Boolean result of the logical AND.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": true,
						"y": true
					},
					"returns": true
				},
				{
					"arguments": {
						"x": true,
						"y": false
					},
					"returns": false
				},
				{
					"arguments": {
						"x": false,
						"y": false
					},
					"returns": false
				},
				{
					"arguments": {
						"x": false,
						"y": null
					},
					"returns": false
				},
				{
					"arguments": {
						"x": true,
						"y": null
					},
					"returns": null
				}
			]
		},
		{
			"id": "_all",
			"summary": "Are all of the values true?",
			"description": "Checks if **all** of the values in `data` are true. If no value is given (i.e. the array is empty) the process returns `True`.\n\nBy default all no-data values are ignored so that the process returns `null` if all values are no-data, `true` if all values are true and `false` otherwise. Setting the `ignore_nodata` flag to `false` takes no-data values into account and the array values are reduced pairwise according to the following truth table:\n\n```\n      || null  | false | true\n----- || ----- | ----- | -----\nnull  || null  | false | null\nfalse || false | false | false\ntrue  || null  | false | true\n```\n\n**Remark:** The process evaluates all values from the first to the last element and stops once the outcome is unambiguous. A result is ambiguous unless a value is `false` or all values have been taken into account.",
			"categories": [
				"logic",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A set of boolean values.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"boolean",
								"null"
							]
						}
					}
				}
			],
			"returns": {
				"description": "Boolean result of the logical operation.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							false,
							null
						]
					},
					"returns": false
				},
				{
					"arguments": {
						"data": [
							true,
							null
						]
					},
					"returns": true
				},
				{
					"arguments": {
						"data": [
							true,
							null
						],
						"ignore_nodata": false
					},
					"returns": null
				},
				{
					"arguments": {
						"data": [
							true,
							false,
							true,
							false
						]
					},
					"returns": false
				},
				{
					"arguments": {
						"data": [
							true,
							false
						]
					},
					"returns": false
				},
				{
					"arguments": {
						"data": [
							true,
							true
						]
					},
					"returns": true
				},
				{
					"arguments": {
						"data": [
							true
						]
					},
					"returns": true
				},
				{
					"arguments": {
						"data": [
							null
						],
						"ignore_nodata": false
					},
					"returns": null
				},
				{
					"arguments": {
						"data": []
					},
					"returns": null
				}
			]
		},
		{
			"id": "_any",
			"summary": "Is at least one value true?",
			"description": "Checks if **any** (i.e. at least one) value in `data` is `true`. If no value is given (i.e. the array is empty) the process returns `False`.\n\nBy default all no-data values are ignored so that the process returns `null` if all values are no-data, `true` if at least one value is true and `false` otherwise. Setting the `ignore_nodata` flag to `false` takes no-data values into account and the array values are reduced pairwise according to the following truth table:\n\n```\n      || null | false | true\n----- || ---- | ----- | ----\nnull  || null | null  | true\nfalse || null | false | true\ntrue  || true | true  | true\n```\n\n**Remark:** The process evaluates all values from the first to the last element and stops once the outcome is unambiguous. A result is ambiguous unless a value is `true`.",
			"categories": [
				"logic",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A set of boolean values.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"boolean",
								"null"
							]
						}
					}
				}
			],
			"returns": {
				"description": "Boolean result of the logical operation.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							false,
							null
						]
					},
					"returns": false
				},
				{
					"arguments": {
						"data": [
							true,
							null
						]
					},
					"returns": true
				},
				{
					"arguments": {
						"data": [
							true,
							false,
							true,
							false
						]
					},
					"returns": true
				},
				{
					"arguments": {
						"data": [
							true,
							false
						]
					},
					"returns": true
				},
				{
					"arguments": {
						"data": [
							false,
							false
						]
					},
					"returns": false
				},
				{
					"arguments": {
						"data": [
							true
						]
					},
					"returns": true
				},
				{
					"arguments": {
						"data": []
					},
					"returns": null
				}
			]
		},
		{
			"id": "between",
			"summary": "Between comparison",
			"description": "By default, this process checks whether `x` is greater than or equal to `min` and lower than or equal to `max`, which is the same as computing `and(gte(x, min), lte(x, max))`. Therefore, all definitions from ``and()``, ``gte()`` and ``lte()`` apply here as well.\n\nIf `exclude_max` is set to `true` the upper bound is excluded so that the process checks whether `x` is greater than or equal to `min` and lower than `max`. In this case, the process works the same as computing `and(gte(x, min), lt(x, max))`.\n\nLower and upper bounds are not allowed to be swapped. So `min` MUST be lower than or equal to `max` or otherwise the process always returns `false`.",
			"categories": [
				"comparison"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The value to check.",
					"schema": {
						"description": "Any data type is allowed."
					}
				},
				{
					"name": "min",
					"description": "Lower boundary (inclusive) to check against.",
					"schema": {
						"type": "number"
					}
				},
				{
					"name": "max",
					"description": "Upper boundary (inclusive) to check against.",
					"schema": {
						"type": "number"
					}
				},
				{
					"name": "exclude_max",
					"description": "Exclude the upper boundary `max` if set to `true`. Defaults to `false`.",
					"schema": {
						"type": "boolean"
					},
					"default": false,
					"optional": true
				}
			],
			"returns": {
				"description": "`true` if `x` is between the specified bounds, otherwise `false`.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": null,
						"min": 0,
						"max": 1
					},
					"returns": null
				},
				{
					"arguments": {
						"x": 1,
						"min": 0,
						"max": 1
					},
					"returns": true
				},
				{
					"arguments": {
						"x": 1,
						"min": 0,
						"max": 1,
						"exclude_max": true
					},
					"returns": false
				},
				{
					"description": "Swapped bounds (min is greater than max) MUST always return `false`.",
					"arguments": {
						"x": 0.5,
						"min": 1,
						"max": 0
					},
					"returns": false
				},
				{
					"arguments": {
						"x": -0.5,
						"min": -1,
						"max": 0
					},
					"returns": true
				}
			]
		},
		{
			"id": "_max",
			"summary": "Maximum value",
			"description": "Computes the largest value of an array of numbers, which is equal to the first element of a sorted (i.e., ordered) version of the array.\n\nAn array without non-`null` elements resolves always with `null`.",
			"categories": [
				"math",
				"math > statistics",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "An array of numbers.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"null"
							]
						}
					}
				},
				{
					"name": "ignore_nodata",
					"description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
					"schema": {
						"type": "boolean"
					},
					"default": true,
					"optional": true
				}
			],
			"returns": {
				"description": "The maximum value.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							1,
							0,
							3,
							2
						]
					},
					"returns": 3
				},
				{
					"arguments": {
						"data": [
							5,
							2.5,
							null,
							-0.7
						]
					},
					"returns": 5
				},
				{
					"description": "The input array is empty: return `null`.",
					"arguments": {
						"data": []
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Maximum.html",
					"title": "Maximum explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "median",
			"summary": "Statistical median",
			"description": "The statistical median of an array of numbers is the value separating the higher half from the lower half of the data.\n\nAn array without non-`null` elements resolves always with `null`.\n\n**Remarks:**\n\n* For symmetric arrays, the result is equal to the ``mean()``.\n* The median can also be calculated by computing the ``quantiles()`` with a probability of *0.5*.",
			"categories": [
				"math > statistics",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "An array of numbers.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"null"
							]
						}
					}
				},
				{
					"name": "ignore_nodata",
					"description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
					"schema": {
						"type": "boolean"
					},
					"default": true,
					"optional": true
				}
			],
			"returns": {
				"description": "The computed statistical median.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							1,
							3,
							3,
							6,
							7,
							8,
							9
						]
					},
					"returns": 6
				},
				{
					"arguments": {
						"data": [
							1,
							2,
							3,
							4,
							5,
							6,
							8,
							9
						]
					},
					"returns": 5
				},
				{
					"arguments": {
						"data": [
							-1,
							-0.5,
							null,
							1
						]
					},
					"returns": -0.5
				},
				{
					"arguments": {
						"data": [
							-1,
							0,
							null,
							1
						],
						"ignore_nodata": false
					},
					"returns": null
				},
				{
					"description": "The input array is empty: return `null`.",
					"arguments": {
						"data": []
					},
					"returns": null
				},
				{
					"description": "The input array has only `null` elements: return `null`.",
					"arguments": {
						"data": [
							null,
							null
						]
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/StatisticalMedian.html",
					"title": "Statistical Median explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "mean",
			"summary": "Arithmetic mean (average)",
			"description": "The arithmetic mean of an array of numbers is the quantity commonly called the average. It is defined as the sum of all elements divided by the number of elements.\n\nAn array without non-`null` elements resolves always with `null`.",
			"categories": [
				"math > statistics",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "An array of numbers.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"null"
							]
						}
					}
				},
				{
					"name": "ignore_nodata",
					"description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
					"schema": {
						"type": "boolean"
					},
					"default": true,
					"optional": true
				}
			],
			"returns": {
				"description": "The computed arithmetic mean.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							1,
							0,
							3,
							2
						]
					},
					"returns": 1.5
				},
				{
					"arguments": {
						"data": [
							9,
							2.5,
							null,
							-2.5
						]
					},
					"returns": 3
				},
				{
					"arguments": {
						"data": [
							1,
							null
						],
						"ignore_nodata": false
					},
					"returns": null
				},
				{
					"description": "The input array is empty: return `null`.",
					"arguments": {
						"data": []
					},
					"returns": null
				},
				{
					"description": "The input array has only `null` elements: return `null`.",
					"arguments": {
						"data": [
							null,
							null
						]
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/ArithmeticMean.html",
					"title": "Arithmetic mean explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "sd",
			"summary": "Standard deviation",
			"description": "Computes the sample standard deviation, which quantifies the amount of variation of an array of numbers. It is defined to be the square root of the corresponding variance (see ``variance()``).\n\nA low standard deviation indicates that the values tend to be close to the expected value, while a high standard deviation indicates that the values are spread out over a wider range.\n\nAn array without non-`null` elements resolves always with `null`.",
			"categories": [
				"math > statistics",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "An array of numbers.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"null"
							]
						}
					}
				},
				{
					"name": "ignore_nodata",
					"description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
					"schema": {
						"type": "boolean"
					},
					"default": true,
					"optional": true
				}
			],
			"returns": {
				"description": "The computed sample standard deviation.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							-1,
							1,
							3,
							null
						]
					},
					"returns": 2
				},
				{
					"arguments": {
						"data": [
							-1,
							1,
							3,
							null
						],
						"ignore_nodata": false
					},
					"returns": null
				},
				{
					"description": "The input array is empty: return `null`.",
					"arguments": {
						"data": []
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/StandardDeviation.html",
					"title": "Standard deviation explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "variance",
			"summary": "Variance",
			"description": "Computes the sample variance of an array of numbers by calculating the square of the standard deviation (see ``sd()``). It is defined to be the expectation of the squared deviation of a random variable from its expected value. Basically, it measures how far the numbers in the array are spread out from their average value.\n\nAn array without non-`null` elements resolves always with `null`.",
			"categories": [
				"math > statistics",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "An array of numbers.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"null"
							]
						}
					}
				},
				{
					"name": "ignore_nodata",
					"description": "Indicates whether no-data values are ignored or not. Ignores them by default. Setting this flag to `false` considers no-data values so that `null` is returned if any value is such a value.",
					"schema": {
						"type": "boolean"
					},
					"default": true,
					"optional": true
				}
			],
			"returns": {
				"description": "The computed sample variance.",
				"schema": {
					"type": [
						"number",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": [
							-1,
							1,
							3
						]
					},
					"returns": 4
				},
				{
					"arguments": {
						"data": [
							2,
							3,
							3,
							null,
							4,
							4,
							5
						]
					},
					"returns": 1.1
				},
				{
					"arguments": {
						"data": [
							-1,
							1,
							null,
							3
						],
						"ignore_nodata": false
					},
					"returns": null
				},
				{
					"description": "The input array is empty: return `null`.",
					"arguments": {
						"data": []
					},
					"returns": null
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/Variance.html",
					"title": "Variance explained by Wolfram MathWorld"
				}
			],
			"process_graph": {
				"mean": {
					"process_id": "mean",
					"arguments": {
						"data": {
							"from_parameter": "data"
						}
					}
				},
				"apply": {
					"process_id": "apply",
					"arguments": {
						"data": {
							"from_parameter": "data"
						},
						"process": {
							"process-graph": {
								"subtract": {
									"process_id": "subtract",
									"arguments": {
										"x": {
											"from_parameter": "x"
										},
										"y": {
											"from_parameter": "context"
										}
									}
								},
								"power": {
									"process_id": "power",
									"arguments": {
										"base": {
											"from_node": "subtract"
										},
										"p": 2
									},
									"result": true
								}
							}
						},
						"context": {
							"from_node": "mean"
						}
					}
				},
				"mean2": {
					"process_id": "mean",
					"arguments": {
						"data": {
							"from_node": "apply"
						},
						"ignore_nodata": {
							"from_parameter": "ignore_nodata"
						}
					},
					"result": true
				}
			}
		},
		{
			"id": "eq",
			"summary": "Equal to comparison",
			"description": "Compares whether `x` is strictly equal to `y`.\n\n**Remarks:**\n\n* Data types MUST be checked strictly. For example, a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating-point number *1.0* as `integer` is a sub-type of `number`.\n* If any operand is `null`, the return value is `null`.\n* Temporal strings are normal strings. To compare temporal strings as dates/times, use ``date_difference()``.",
			"categories": [
				"texts",
				"comparison"
			],
			"parameters": [
				{
					"name": "x",
					"description": "First operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "Second operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "`true` if `x` is equal to `y`, `null` if any operand is `null`, otherwise `false`.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1,
						"y": null
					},
					"returns": null
				},
				{
					"arguments": {
						"x": null,
						"y": null
					},
					"returns": null
				},
				{
					"arguments": {
						"x": 1,
						"y": 1
					},
					"returns": true
				},
				{
					"arguments": {
						"x": 1,
						"y": "1"
					},
					"returns": false
				},
				{
					"arguments": {
						"x": 0,
						"y": false
					},
					"returns": false
				},
				{
					"arguments": {
						"x": "Test",
						"y": "test"
					},
					"returns": false
				},
				{
					"arguments": {
						"x": "2018-01-01T00:00:00Z",
						"y": "2018-01-01T00:00:00+00:00"
					},
					"returns": false
				}
			]
		},
		{
			"id": "gt",
			"summary": "Greater than comparison",
			"description": "Compares whether `x` is strictly greater than `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`.\n* If any operand is not a `number`, the process returns `false`.\n* Temporal strings are normal strings. To compare temporal strings as dates/times, use ``date_difference()``.",
			"categories": [
				"comparison"
			],
			"parameters": [
				{
					"name": "x",
					"description": "First operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "Second operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "`true` if `x` is strictly greater than `y` or `null` if any operand is `null`, otherwise `false`.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1,
						"y": null
					},
					"returns": null
				},
				{
					"arguments": {
						"x": 0,
						"y": 0
					},
					"returns": false
				},
				{
					"arguments": {
						"x": 2,
						"y": 1
					},
					"returns": true
				},
				{
					"arguments": {
						"x": -0.5,
						"y": -0.6
					},
					"returns": true
				},
				{
					"arguments": {
						"x": "2018-01-02T00:00:00Z",
						"y": "2018-01-01T00:00:00Z"
					},
					"returns": false
				},
				{
					"arguments": {
						"x": true,
						"y": 0
					},
					"returns": false
				},
				{
					"arguments": {
						"x": true,
						"y": false
					},
					"returns": false
				},
				{
					"arguments": {
						"x": null,
						"y": null
					},
					"returns": null
				}
			]
		},
		{
			"id": "gte",
			"summary": "Greater than or equal to comparison",
			"description": "Compares whether `x` is greater than or equal to `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`.\n* If the operands are not equal (see process ``eq()``) and any of them is not a `number`, the process returns `false`.\n* Temporal strings are normal strings. To compare temporal strings as dates/times, use ``date_difference()``.",
			"categories": [
				"comparison"
			],
			"parameters": [
				{
					"name": "x",
					"description": "First operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "Second operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "`true` if `x` is greater than or equal to `y`, `null` if any operand is `null`, otherwise `false`.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1,
						"y": null
					},
					"returns": null
				},
				{
					"arguments": {
						"x": 0,
						"y": 0
					},
					"returns": true
				},
				{
					"arguments": {
						"x": 1,
						"y": 2
					},
					"returns": false
				},
				{
					"arguments": {
						"x": -0.5,
						"y": -0.6
					},
					"returns": true
				},
				{
					"arguments": {
						"x": "2018-01-01T00:00:00Z",
						"y": "2018-01-01T00:00:00+00:00"
					},
					"returns": false
				},
				{
					"arguments": {
						"x": true,
						"y": false
					},
					"returns": false
				},
				{
					"arguments": {
						"x": null,
						"y": null
					},
					"returns": null
				}
			]
		},
		{
			"id": "_if",
			"summary": "If-Then-Else conditional",
			"description": "If the value passed is `true`, returns the value of the `accept` parameter, otherwise returns the value of the `reject` parameter.\n\nThis is basically an if-then-else construct as in other programming languages.",
			"categories": [
				"logic",
				"comparison",
				"masks"
			],
			"parameters": [
				{
					"name": "value",
					"description": "A boolean value.",
					"schema": {
						"type": [
							"boolean",
							"null"
						]
					}
				},
				{
					"name": "accept",
					"description": "A value that is returned if the boolean value is `true`.",
					"schema": {
						"description": "Any data type is allowed."
					}
				},
				{
					"name": "reject",
					"description": "A value that is returned if the boolean value is **not** `true`. Defaults to `null`.",
					"schema": {
						"description": "Any data type is allowed."
					},
					"default": null,
					"optional": true
				}
			],
			"returns": {
				"description": "Either the `accept` or `reject` argument depending on the given boolean value.",
				"schema": {
					"description": "Any data type is allowed."
				}
			},
			"examples": [
				{
					"arguments": {
						"value": true,
						"accept": "A",
						"reject": "B"
					},
					"returns": "A"
				},
				{
					"arguments": {
						"value": null,
						"accept": "A",
						"reject": "B"
					},
					"returns": "B"
				},
				{
					"arguments": {
						"value": false,
						"accept": [
							1,
							2,
							3
						],
						"reject": [
							4,
							5,
							6
						]
					},
					"returns": [
						4,
						5,
						6
					]
				},
				{
					"arguments": {
						"value": true,
						"accept": 123
					},
					"returns": 123
				},
				{
					"arguments": {
						"value": false,
						"accept": 1
					},
					"returns": null
				}
			]
		},
		{
			"id": "is_infinite",
			"summary": "Value is an infinite number",
			"description": "Checks whether the specified value `x` is an infinite number. The definition of infinite numbers follows the [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935). The special numerical value `NaN` (not a number) as defined by the [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935) is not an infinite number and must return `false`.",
			"categories": [
				"comparison"
			],
			"experimental": true,
			"parameters": [
				{
					"name": "x",
					"description": "The data to check.",
					"schema": {
						"description": "Any data type is allowed."
					}
				}
			],
			"returns": {
				"description": "`true` if the data is an infinite number, otherwise `false`.",
				"schema": {
					"type": "boolean"
				}
			},
			"links": [
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/4610935",
					"title": "IEEE Standard 754-2008 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "is_nan",
			"summary": "Value is not a number",
			"description": "Checks whether the specified value `x` is *not* a number. Numbers are all integers and floating-point numbers, except for the special value `NaN` as defined by the [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935).",
			"categories": [
				"comparison",
				"math > constants"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The data to check.",
					"schema": {
						"description": "Any data type is allowed."
					}
				}
			],
			"returns": {
				"description": "Returns `true` for `NaN` and all non-numeric data types, otherwise returns `false`.",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1
					},
					"returns": false
				},
				{
					"arguments": {
						"x": "Test"
					},
					"returns": true
				},
				{
					"arguments": {
						"x": null
					},
					"returns": true
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/4610935",
					"title": "IEEE Standard 754-2008 for Floating-Point Arithmetic"
				},
				{
					"rel": "about",
					"href": "http://mathworld.wolfram.com/NaN.html",
					"title": "NaN explained by Wolfram MathWorld"
				}
			]
		},
		{
			"id": "is_nodata",
			"summary": "Value is a no-data value",
			"description": "Checks whether the specified data is missing data, i.e. equals to `null` or any of the no-data values specified in the metadata.\n\nThe special numerical value `NaN` (not a number) as defined by the [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935) is only considered as no-data value if specified as no-data value in the metadata.",
			"categories": [
				"comparison"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The data to check.",
					"schema": {
						"description": "Any data type is allowed."
					}
				}
			],
			"returns": {
				"description": "`true` if the data is a no-data value, otherwise `false`.",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1
					},
					"returns": false
				},
				{
					"arguments": {
						"x": "Test"
					},
					"returns": false
				},
				{
					"arguments": {
						"x": null
					},
					"returns": true
				},
				{
					"arguments": {
						"x": [
							null,
							null
						]
					},
					"returns": false
				}
			]
		},
		{
			"id": "is_valid",
			"summary": "Value is valid data",
			"description": "Checks whether the specified value `x` is valid. The following values are considered valid:\n\n* Any finite numerical value (integers and floating-point numbers). The definition of finite numbers follows the [IEEE Standard 754](https://ieeexplore.ieee.org/document/4610935) and excludes the special value `NaN` (not a number).\n* Any other value that is not a no-data value according to ``is_nodata()``. Thus all arrays, objects and strings are valid, regardless of their content.",
			"categories": [
				"comparison"
			],
			"parameters": [
				{
					"name": "x",
					"description": "The data to check.",
					"schema": {
						"description": "Any data type is allowed."
					}
				}
			],
			"returns": {
				"description": "`true` if the data is valid, otherwise `false`.",
				"schema": {
					"type": "boolean"
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1
					},
					"returns": true
				},
				{
					"arguments": {
						"x": "Test"
					},
					"returns": true
				},
				{
					"arguments": {
						"x": null
					},
					"returns": false
				},
				{
					"arguments": {
						"x": [
							null,
							null
						]
					},
					"returns": true
				}
			],
			"links": [
				{
					"rel": "about",
					"href": "https://ieeexplore.ieee.org/document/4610935",
					"title": "IEEE Standard 754-2008 for Floating-Point Arithmetic"
				}
			]
		},
		{
			"id": "lt",
			"summary": "Less than comparison",
			"description": "Compares whether `x` is strictly less than `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`.\n* If any operand is not a `number`, the process returns `false`.\n* Temporal strings are normal strings. To compare temporal strings as dates/times, use ``date_difference()``.",
			"categories": [
				"comparison"
			],
			"parameters": [
				{
					"name": "x",
					"description": "First operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "Second operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "`true` if `x` is strictly less than `y`, `null` if any operand is `null`, otherwise `false`.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1,
						"y": null
					},
					"returns": null
				},
				{
					"arguments": {
						"x": 0,
						"y": 0
					},
					"returns": false
				},
				{
					"arguments": {
						"x": 1,
						"y": 2
					},
					"returns": true
				},
				{
					"arguments": {
						"x": -0.5,
						"y": -0.6
					},
					"returns": false
				},
				{
					"arguments": {
						"x": "2018-01-01T00:00:00Z",
						"y": "2018-01-02T00:00:00Z"
					},
					"returns": false
				},
				{
					"arguments": {
						"x": 0,
						"y": true
					},
					"returns": false
				},
				{
					"arguments": {
						"x": false,
						"y": true
					},
					"returns": false
				},
				{
					"arguments": {
						"x": null,
						"y": null
					},
					"returns": null
				}
			]
		},
		{
			"id": "lte",
			"summary": "Less than or equal to comparison",
			"description": "Compares whether `x` is less than or equal to `y`.\n\n**Remarks:**\n\n* If any operand is `null`, the return value is `null`.\n* If the operands are not equal (see process ``eq()``) and any of them is not a `number`, the process returns `false`.\n* Temporal strings are normal strings. To compare temporal strings as dates/times, use ``date_difference()``.",
			"categories": [
				"comparison"
			],
			"parameters": [
				{
					"name": "x",
					"description": "First operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "Second operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "`true` if `x` is less than or equal to `y`, `null` if any operand is `null`, otherwise `false`.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1,
						"y": null
					},
					"returns": null
				},
				{
					"arguments": {
						"x": 0,
						"y": 0
					},
					"returns": true
				},
				{
					"arguments": {
						"x": 1,
						"y": 2
					},
					"returns": true
				},
				{
					"arguments": {
						"x": -0.5,
						"y": -0.6
					},
					"returns": false
				},
				{
					"arguments": {
						"x": "2018-01-01T00:00:00Z",
						"y": "2018-01-01T00:00:00+00:00"
					},
					"returns": false
				},
				{
					"arguments": {
						"x": false,
						"y": true
					},
					"returns": false
				},
				{
					"arguments": {
						"x": null,
						"y": null
					},
					"returns": null
				}
			]
		},
		{
			"id": "neq",
			"summary": "Not equal to comparison",
			"description": "Compares whether `x` is **not** strictly equal to `y`.\n\n**Remarks:**\n\n* Data types MUST be checked strictly. For example, a string with the content *1* is not equal to the number *1*. Nevertheless, an integer *1* is equal to a floating-point number *1.0* as `integer` is a sub-type of `number`.\n* If any operand is `null`, the return value is `null`.\n* Strings are expected to be encoded in UTF-8 by default.\n* Temporal strings are normal strings. To compare temporal strings as dates/times, use ``date_difference()``.",
			"categories": [
				"texts",
				"comparison"
			],
			"parameters": [
				{
					"name": "x",
					"description": "First operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "Second operand.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					}
				},
				{
					"name": "delta",
					"description": "Only applicable for comparing two numbers. If this optional parameter is set to a positive non-zero number the non-equality of two numbers is checked against a delta value. This is especially useful to circumvent problems with floating-point inaccuracy in machine-based computation.\n\nThis option is basically an alias for the following computation: `gt(abs(minus([x, y]), delta)`",
					"schema": {
						"type": [
							"number",
							"null"
						]
					},
					"default": null,
					"optional": true
				},
				{
					"name": "case_sensitive",
					"description": "Only applicable for comparing two strings. Case sensitive comparison can be disabled by setting this parameter to `false`.",
					"schema": {
						"type": "boolean"
					},
					"default": true,
					"optional": true
				}
			],
			"returns": {
				"description": "`true` if `x` is *not* equal to `y`, `null` if any operand is `null`, otherwise `false`.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": 1,
						"y": null
					},
					"returns": null
				},
				{
					"arguments": {
						"x": 1,
						"y": 1
					},
					"returns": false
				},
				{
					"arguments": {
						"x": 1,
						"y": "1"
					},
					"returns": true
				},
				{
					"arguments": {
						"x": 0,
						"y": false
					},
					"returns": true
				},
				{
					"arguments": {
						"x": 1.02,
						"y": 1,
						"delta": 0.01
					},
					"returns": true
				},
				{
					"arguments": {
						"x": -1,
						"y": -1.001,
						"delta": 0.01
					},
					"returns": false
				},
				{
					"arguments": {
						"x": 115,
						"y": 110,
						"delta": 10
					},
					"returns": false
				},
				{
					"arguments": {
						"x": "Test",
						"y": "test"
					},
					"returns": true
				},
				{
					"arguments": {
						"x": "Test",
						"y": "test",
						"case_sensitive": false
					},
					"returns": false
				},
				{
					"arguments": {
						"x": "Ä",
						"y": "ä",
						"case_sensitive": false
					},
					"returns": false
				},
				{
					"arguments": {
						"x": "2018-01-01T00:00:00Z",
						"y": "2018-01-01T00:00:00+00:00"
					},
					"returns": true
				},
				{
					"arguments": {
						"x": null,
						"y": null
					},
					"returns": null
				}
			]
		},
		{
			"id": "_not",
			"summary": "Inverting a boolean",
			"description": "Inverts a single boolean so that `true` gets `false` and `false` gets `true`.\n\nThe no-data value `null` is passed through and therefore gets propagated.",
			"categories": [
				"logic"
			],
			"parameters": [
				{
					"name": "x",
					"description": "Boolean value to invert.",
					"schema": {
						"type": [
							"boolean",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "Inverted boolean value.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": null
					},
					"returns": null
				},
				{
					"arguments": {
						"x": false
					},
					"returns": true
				},
				{
					"arguments": {
						"x": true
					},
					"returns": false
				}
			]
		},
		{
			"id": "_or",
			"summary": "Logical OR",
			"description": "Checks if **at least one** of the values is true. Evaluates parameter `x` before `y` and stops once the outcome is unambiguous. If a component is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null | false | true\n----- || ---- | ----- | ----\nnull  || null | null  | true\nfalse || null | false | true\ntrue  || true | true  | true\n```",
			"categories": [
				"logic"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A boolean value.",
					"schema": {
						"type": [
							"boolean",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "A boolean value.",
					"schema": {
						"type": [
							"boolean",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "Boolean result of the logical OR.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": true,
						"y": true
					},
					"returns": true
				},
				{
					"arguments": {
						"x": false,
						"y": false
					},
					"returns": false
				},
				{
					"arguments": {
						"x": true,
						"y": null
					},
					"returns": true
				},
				{
					"arguments": {
						"x": null,
						"y": true
					},
					"returns": true
				},
				{
					"arguments": {
						"x": false,
						"y": null
					},
					"returns": null
				}
			]
		},
		{
			"id": "xor",
			"summary": "Logical XOR (exclusive or)",
			"description": "Checks if **exactly one** of the values is true. If a component is `null`, the result will be `null` if the outcome is ambiguous.\n\n**Truth table:**\n\n```\na \\ b || null | false | true\n----- || ---- | ----- | -----\nnull  || null | null  | null\nfalse || null | false | true\ntrue  || null | true  | false\n```",
			"categories": [
				"logic"
			],
			"parameters": [
				{
					"name": "x",
					"description": "A boolean value.",
					"schema": {
						"type": [
							"boolean",
							"null"
						]
					}
				},
				{
					"name": "y",
					"description": "A boolean value.",
					"schema": {
						"type": [
							"boolean",
							"null"
						]
					}
				}
			],
			"returns": {
				"description": "Boolean result of the logical XOR.",
				"schema": {
					"type": [
						"boolean",
						"null"
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"x": true,
						"y": true
					},
					"returns": false
				},
				{
					"arguments": {
						"x": false,
						"y": false
					},
					"returns": false
				},
				{
					"arguments": {
						"x": true,
						"y": false
					},
					"returns": true
				},
				{
					"arguments": {
						"x": true,
						"y": null
					},
					"returns": null
				},
				{
					"arguments": {
						"x": false,
						"y": null
					},
					"returns": null
				}
			]
		},
		{
			"id": "filter_labels",
			"summary": "Filter dimension labels based on a condition",
			"description": "Filters the dimension labels in the data cube for the given dimension. Only the dimension labels that match the specified condition are preserved, all other labels with their corresponding data get removed.",
			"categories": [
				"cubes",
				"filter"
			],
			"experimental": true,
			"parameters": [
				{
					"name": "data",
					"description": "A data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "condition",
					"description": "A condition that is evaluated against each dimension label in the specified dimension. A dimension label and the corresponding data is preserved for the given dimension, if the condition returns `true`.",
					"schema": {
						"type": "object",
						"subtype": "process-graph",
						"parameters": [
							{
								"name": "value",
								"description": "A single dimension label to compare against. The data type of the parameter depends on the dimension labels set for the dimension. Please note that for some dimension types a representation is used, e.g.\n\n* dates and/or times are usually strings compliant to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601),\n* geometries can be a WKT string or an identifier.",
								"schema": [
									{
										"type": "number"
									},
									{
										"type": "string"
									}
								]
							},
							{
								"name": "context",
								"description": "Additional data passed by the user.",
								"schema": {
									"description": "Any data type."
								},
								"optional": true,
								"default": null
							}
						],
						"returns": {
							"description": "`true` if the dimension label should be kept in the data cube, otherwise `false`.",
							"schema": {
								"type": "boolean"
							}
						}
					}
				},
				{
					"name": "dimension",
					"description": "The name of the dimension to filter on. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.",
					"schema": {
						"type": "string"
					}
				}
			],
			"returns": {
				"description": "A data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the given dimension has less (or the same) dimension labels.",
				"schema": {
					"type": "object",
					"subtype": "datacube"
				}
			},
			"examples": [
				{
					"description": "Filters the data cube to only contain data from platform Sentinel-2A. This example assumes that the data cube has a dimension `platform` so that computations can distinguish between Sentinel-2A and Sentinel-2B data.",
					"arguments": {
						"data": {
							"from_parameter": "sentinel2_data"
						},
						"condition": {
							"process_graph": {
								"eq": {
									"process_id": "eq",
									"arguments": {
										"x": {
											"from_parameter": "value"
										},
										"y": "Sentinel-2A",
										"case_sensitive": false
									},
									"result": true
								}
							}
						},
						"dimension": "platform"
					}
				}
			],
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#filter",
					"rel": "about",
					"title": "Filters explained in the openEO documentation"
				}
			]
		},
		{
			"id": "filter_temporal",
			"summary": "Temporal filter based on temporal intervals",
			"description": "Limits the data cube to the specified interval of dates and/or times.\n\nMore precisely, the filter checks whether each of the temporal dimension labels is greater than or equal to the lower boundary (start date/time) and less than the value of the upper boundary (end date/time). This corresponds to a left-closed interval, which contains the lower boundary but not the upper boundary.",
			"categories": [
				"cubes",
				"filter"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "temporal"
							}
						]
					}
				},
				{
					"name": "extent",
					"description": "Left-closed temporal interval, i.e. an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified time instant is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified time instant is **excluded** from the interval.\n\nThe second element must always be greater/later than the first element. Otherwise, a `TemporalExtentEmpty` exception is thrown.\n\nAlso supports unbounded intervals by setting one of the boundaries to `null`, but never both.",
					"schema": {
						"type": "array",
						"subtype": "temporal-interval",
						"minItems": 2,
						"maxItems": 2,
						"items": {
							"anyOf": [
								{
									"type": "string",
									"format": "date-time",
									"subtype": "date-time",
									"description": "Date and time with a time zone."
								},
								{
									"type": "string",
									"format": "date",
									"subtype": "date",
									"description": "Date only, formatted as `YYYY-MM-DD`. The time zone is UTC. Missing time components are all 0."
								},
								{
									"type": "null"
								}
							]
						},
						"examples": [
							[
								"2015-01-01T00:00:00Z",
								"2016-01-01T00:00:00Z"
							],
							[
								"2015-01-01",
								"2016-01-01"
							]
						]
					}
				},
				{
					"name": "dimension",
					"description": "The name of the temporal dimension to filter on. If no specific dimension is specified, the filter applies to all temporal dimensions. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.",
					"schema": {
						"type": [
							"string",
							"null"
						]
					},
					"default": null,
					"optional": true
				}
			],
			"returns": {
				"description": "A data cube restricted to the specified temporal extent. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the temporal dimensions (determined by `dimensions` parameter) may have less dimension labels.",
				"schema": {
					"type": "object",
					"subtype": "datacube",
					"dimensions": [
						{
							"type": "temporal"
						}
					]
				}
			},
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#filter",
					"rel": "about",
					"title": "Filters explained in the openEO documentation"
				},
				{
					"href": "https://www.rfc-editor.org/rfc/rfc3339.html",
					"rel": "about",
					"title": "RFC3339: Details about formatting temporal strings"
				}
			]
		},
		{
			"id": "filter_bands",
			"summary": "Filter the bands by names",
			"description": "Filters the bands in the data cube so that bands that don't match any of the criteria are dropped from the data cube. The data cube is expected to have only one dimension of type `bands`. Fails with a `DimensionMissing` exception if no such dimension exists.\n\nThe following criteria can be used to select bands:\n\n* `bands`: band name or common band name (e.g. `B01`, `B8A`, `red` or `nir`)\n* `wavelengths`: ranges of wavelengths in micrometers (μm) (e.g. 0.5 - 0.6)\n\nAll these information are exposed in the band metadata of the collection. To keep algorithms interoperable it is recommended to prefer the common band names or the wavelengths over band names that are specific to the collection and/or back-end.\n\nIf multiple criteria are specified, any of them must match and not all of them, i.e. they are combined with an OR-operation. If no criteria are specified, the `BandFilterParameterMissing` exception must be thrown.\n\n**Important:** The order of the specified array defines the order of the bands in the data cube, which can be important for subsequent processes. If multiple bands are matched by a single criterion (e.g. a range of wavelengths), they stay in the original order.",
			"categories": [
				"cubes",
				"filter"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A data cube with bands.",
					"schema": {
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "bands"
							}
						]
					}
				},
				{
					"name": "bands",
					"description": "A list of band names. Either the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands). If the unique band name and the common name conflict, the unique band name has a higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match a common name, all matched bands are included in the original order.",
					"schema": {
						"type": [
							"array",
							"null"
						],
						"items": {
							"type": "string",
							"subtype": "band-name"
						}
					},
					"default": null,
					"optional": true
				},
				{
					"name": "wavelengths",
					"description": "A list of sub-lists with each sub-list consisting of two elements. The first element is the minimum wavelength and the second element is the maximum wavelength. Wavelengths are specified in micrometers (μm).\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match the wavelengths, all matched bands are included in the original order.",
					"schema": {
						"type": [
							"array",
							"null"
						],
						"items": {
							"type": "array",
							"minItems": 2,
							"maxItems": 2,
							"items": {
								"type": "number"
							},
							"examples": [
								[
									[
										0.45,
										0.5
									],
									[
										0.6,
										0.7
									]
								]
							]
						}
					},
					"default": null,
					"optional": true
				}
			],
			"returns": {
				"description": "A data cube limited to a subset of its original bands. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the dimension of type `bands` has less (or the same) dimension labels.",
				"schema": {
					"type": "object",
					"subtype": "datacube",
					"dimensions": [
						{
							"type": "bands"
						}
					]
				}
			},
			"exceptions": {
				"BandFilterParameterMissing": {
					"message": "The process `filter_bands` requires any of the parameters `bands`, `common_names` or `wavelengths` to be set."
				},
				"DimensionMissing": {
					"message": "A band dimension is missing."
				}
			},
			"links": [
				{
					"rel": "about",
					"href": "https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names",
					"title": "List of common band names as specified by the STAC specification"
				},
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#filter",
					"rel": "about",
					"title": "Filters explained in the openEO documentation"
				}
			]
		},
		{
			"id": "filter_bbox",
			"summary": "Spatial filter using a bounding box",
			"description": "Limits the data cube to the specified bounding box.\n\n* For raster data cubes, the filter retains a pixel in the data cube if the point at the pixel center intersects with the bounding box (as defined in the Simple Features standard by the OGC). Alternatively, ``filter_spatial()`` can be used to filter by geometry.\n* For vector data cubes, the filter retains the geometry in the data cube if the geometry is fully within the bounding box (as defined in the Simple Features standard by the OGC). All geometries that were empty or not contained fully within the bounding box will be removed from the data cube.\n\nAlternatively, ``filter_vector()`` can be used to filter by geometry.",
			"categories": [
				"cubes",
				"filter"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A data cube.",
					"schema": [
						{
							"title": "Raster data cube",
							"type": "object",
							"subtype": "datacube",
							"dimensions": [
								{
									"type": "spatial",
									"axis": [
										"x",
										"y"
									]
								}
							]
						},
						{
							"title": "Vector data cube",
							"type": "object",
							"subtype": "datacube",
							"dimensions": [
								{
									"type": "geometry"
								}
							]
						}
					]
				},
				{
					"name": "extent",
					"description": "A bounding box, which may include a vertical axis (see `base` and `height`).",
					"schema": {
						"type": "object",
						"subtype": "bounding-box",
						"required": [
							"west",
							"south",
							"east",
							"north"
						],
						"properties": {
							"west": {
								"description": "West (lower left corner, coordinate axis 1).",
								"type": "number"
							},
							"south": {
								"description": "South (lower left corner, coordinate axis 2).",
								"type": "number"
							},
							"east": {
								"description": "East (upper right corner, coordinate axis 1).",
								"type": "number"
							},
							"north": {
								"description": "North (upper right corner, coordinate axis 2).",
								"type": "number"
							},
							"base": {
								"description": "Base (optional, lower left corner, coordinate axis 3).",
								"type": [
									"number",
									"null"
								],
								"default": null
							},
							"height": {
								"description": "Height (optional, upper right corner, coordinate axis 3).",
								"type": [
									"number",
									"null"
								],
								"default": null
							},
							"crs": {
								"description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/) or [WKT2 CRS string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
								"anyOf": [
									{
										"title": "EPSG Code",
										"type": "integer",
										"subtype": "epsg-code",
										"minimum": 1000,
										"examples": [
											3857
										]
									},
									{
										"title": "WKT2",
										"type": "string",
										"subtype": "wkt2-definition"
									}
								],
								"default": 4326
							}
						}
					}
				}
			],
			"returns": {
				"description": "A data cube restricted to the bounding box. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the spatial dimensions have less (or the same) dimension labels.",
				"schema": [
					{
						"title": "Raster data cube",
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "spatial",
								"axis": [
									"x",
									"y"
								]
							}
						]
					},
					{
						"title": "Vector data cube",
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "geometry"
							}
						]
					}
				]
			},
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#filter",
					"rel": "about",
					"title": "Filters explained in the openEO documentation"
				},
				{
					"rel": "about",
					"href": "https://proj.org/usage/projections.html",
					"title": "PROJ parameters for cartographic projections"
				},
				{
					"rel": "about",
					"href": "http://www.epsg-registry.org",
					"title": "Official EPSG code registry"
				},
				{
					"rel": "about",
					"href": "http://www.epsg.io",
					"title": "Unofficial EPSG code database"
				},
				{
					"href": "http://www.opengeospatial.org/standards/sfa",
					"rel": "about",
					"title": "Simple Features standard by the OGC"
				}
			]
		},
		{
			"id": "filter_spatial",
			"summary": "Spatial filter raster data cubes using geometries",
			"description": "Limits the raster data cube over the spatial dimensions to the specified geometries.\n\n- For **polygons**, the filter retains a pixel in the data cube if the point at the pixel center intersects with at least one of the polygons (as defined in the Simple Features standard by the OGC).\n- For **points**, the process considers the closest pixel center.\n- For **lines** (line strings), the process considers all the pixels whose centers are closest to at least one point on the line.\n\nMore specifically, pixels outside of the bounding box of the given geometry will not be available after filtering. All pixels inside the bounding box that are not retained will be set to `null` (no data).\n\n Alternatively, use ``filter_bbox()`` to filter by bounding box.",
			"categories": [
				"cubes",
				"filter"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A raster data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "spatial",
								"axis": [
									"x",
									"y"
								]
							}
						]
					}
				},
				{
					"name": "geometries",
					"description": "One or more geometries used for filtering, given as GeoJSON or vector data cube. If multiple geometries are provided, the union of them is used. Empty geometries are ignored.\n\nLimits the data cube to the bounding box of the given geometries. No implicit masking gets applied. To mask the pixels of the data cube use ``mask_polygon()``.",
					"schema": [
						{
							"title": "Vector Data Cube",
							"type": "object",
							"subtype": "datacube",
							"dimensions": [
								{
									"type": "geometry"
								}
							]
						},
						{
							"title": "GeoJSON",
							"type": "object",
							"subtype": "geojson",
							"description": "Deprecated in favor of ``load_geojson()``. The GeoJSON type `GeometryCollection` is not supported.",
							"deprecated": true
						}
					]
				}
			],
			"returns": {
				"description": "A raster data cube restricted to the specified geometries. The dimensions and dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that the spatial dimensions have less (or the same) dimension labels.",
				"schema": {
					"type": "object",
					"subtype": "datacube",
					"dimensions": [
						{
							"type": "spatial",
							"axis": [
								"x",
								"y"
							]
						}
					]
				}
			},
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#filter",
					"rel": "about",
					"title": "Filters explained in the openEO documentation"
				},
				{
					"href": "http://www.opengeospatial.org/standards/sfa",
					"rel": "about",
					"title": "Simple Features standard by the OGC"
				}
			]
		},
		{
			"id": "mask",
			"summary": "Apply a raster mask",
			"description": "Applies a mask to a raster data cube. To apply a polygon as a mask, use ``mask_polygon()``.\n\nA mask is a raster data cube for which corresponding pixels among `data` and `mask` are compared and those pixels in `data` are replaced whose pixels in `mask` are non-zero (for numbers) or `true` (for boolean values). The pixel values are replaced with the value specified for `replacement`, which defaults to `null` (no data).\n\nThe data cubes have to be compatible except that the horizontal spatial dimensions (axes `x` and `y`) will be aligned implicitly by ``resample_cube_spatial()``. `data` is the target data cube for resampling and the default parameters of ``resample_cube_spatial()`` apply. All other dimensions in the mask must also be available in the raster data cube with the same name, type, reference system, resolution and labels. Dimensions can be missing in the mask with the result that the mask is applied to each label of the dimension in `data` that is missing in the data cube of the mask. The process fails if there's an incompatibility found between the raster data cube and the mask.",
			"categories": [
				"cubes",
				"masks"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A raster data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "spatial",
								"axis": [
									"x",
									"y"
								]
							}
						]
					}
				},
				{
					"name": "mask",
					"description": "A mask as a raster data cube. Every pixel in `data` must have a corresponding element in `mask`.",
					"schema": {
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "spatial",
								"axis": [
									"x",
									"y"
								]
							}
						]
					}
				},
				{
					"name": "replacement",
					"description": "The value used to replace masked values with.",
					"schema": {
						"type": [
							"number",
							"boolean",
							"string",
							"null"
						]
					},
					"default": null,
					"optional": true
				}
			],
			"returns": {
				"description": "A masked raster data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.",
				"schema": {
					"type": "object",
					"subtype": "datacube",
					"dimensions": [
						{
							"type": "spatial",
							"axis": [
								"x",
								"y"
							]
						}
					]
				}
			}
		},
		{
			"id": "resample_spatial",
			"summary": "Resample and warp the spatial dimensions",
			"description": "Resamples the spatial dimensions (x,y) of the data cube to a specified resolution and/or warps the data cube to the target projection. At least `resolution` or `projection` must be specified.\n\nRelated processes:\n\n* Use ``filter_bbox()`` to set the target spatial extent.\n* To spatially align two data cubes with each other (e.g. for merging), better use the process ``resample_cube_spatial()``.",
			"categories": [
				"cubes",
				"reproject"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A raster data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "spatial",
								"axis": [
									"x",
									"y"
								]
							}
						]
					}
				},
				{
					"name": "resolution",
					"description": "Resamples the data cube to the target resolution, which can be specified either as separate values for x and y or as a single value for both axes. Specified in the units of the target projection. Doesn't change the resolution by default (`0`).",
					"schema": [
						{
							"description": "A single number used as the resolution for both x and y.",
							"type": "number",
							"minimum": 0
						},
						{
							"description": "A two-element array to specify separate resolutions for x (first element) and y (second element).",
							"type": "array",
							"minItems": 2,
							"maxItems": 2,
							"items": {
								"type": "number",
								"minimum": 0
							}
						}
					],
					"default": 0,
					"optional": true
				},
				{
					"name": "projection",
					"description": "Warps the data cube to the target projection, specified as as [EPSG code](http://www.epsg-registry.org/) or [WKT2 CRS string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html). By default (`null`), the projection is not changed.",
					"schema": [
						{
							"title": "EPSG Code",
							"type": "integer",
							"subtype": "epsg-code",
							"minimum": 1000,
							"examples": [
								3857
							]
						},
						{
							"title": "WKT2",
							"type": "string",
							"subtype": "wkt2-definition"
						},
						{
							"title": "Don't change projection",
							"type": "null"
						}
					],
					"default": null,
					"optional": true
				},
				{
					"name": "method",
					"description": "Resampling method to use. The following options are available and are meant to align with [`gdalwarp`](https://gdal.org/programs/gdalwarp.html#cmdoption-gdalwarp-r):\n\n* `average`: average (mean) resampling, computes the weighted average of all valid pixels\n* `bilinear`: bilinear resampling\n* `cubic`: cubic resampling\n* `cubicspline`: cubic spline resampling\n* `lanczos`: Lanczos windowed sinc resampling\n* `max`: maximum resampling, selects the maximum value from all valid pixels\n* `med`: median resampling, selects the median value of all valid pixels\n* `min`: minimum resampling, selects the minimum value from all valid pixels\n* `mode`: mode resampling, selects the value which appears most often of all the sampled points\n* `near`: nearest neighbour resampling (default)\n* `q1`: first quartile resampling, selects the first quartile value of all valid pixels\n* `q3`: third quartile resampling, selects the third quartile value of all valid pixels\n* `rms` root mean square (quadratic mean) of all valid pixels\n* `sum`: compute the weighted sum of all valid pixels\n\nValid pixels are determined based on the function ``is_valid()``.",
					"schema": {
						"type": "string",
						"enum": [
							"average",
							"bilinear",
							"cubic",
							"cubicspline",
							"lanczos",
							"max",
							"med",
							"min",
							"mode",
							"near",
							"q1",
							"q3",
							"rms",
							"sum"
						]
					},
					"default": "near",
					"optional": true
				},
				{
					"name": "align",
					"description": "Specifies to which corner of the spatial extent the new resampled data is aligned to.",
					"schema": {
						"type": "string",
						"enum": [
							"lower-left",
							"upper-left",
							"lower-right",
							"upper-right"
						]
					},
					"default": "upper-left",
					"optional": true
				}
			],
			"returns": {
				"description": "A raster data cube with values warped onto the new projection. It has the same dimensions and the same dimension properties (name, type, labels, reference system and resolution) for all non-spatial or vertical spatial dimensions. For the horizontal spatial dimensions the name and type remain unchanged, but reference system, labels and resolution may change depending on the given parameters.",
				"schema": {
					"type": "object",
					"subtype": "datacube",
					"dimensions": [
						{
							"type": "spatial",
							"axis": [
								"x",
								"y"
							]
						}
					]
				}
			},
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#resample",
					"rel": "about",
					"title": "Resampling explained in the openEO documentation"
				},
				{
					"rel": "about",
					"href": "https://proj.org/usage/projections.html",
					"title": "PROJ parameters for cartographic projections"
				},
				{
					"rel": "about",
					"href": "http://www.epsg-registry.org",
					"title": "Official EPSG code registry"
				},
				{
					"rel": "about",
					"href": "http://www.epsg.io",
					"title": "Unofficial EPSG code database"
				},
				{
					"href": "https://gdal.org/programs/gdalwarp.html#cmdoption-gdalwarp-r",
					"rel": "about",
					"title": "gdalwarp resampling methods"
				}
			]
		},
		{
			"id": "resample_cube_spatial",
			"summary": "Resample the spatial dimensions to match a target data cube",
			"description": "Resamples the spatial dimensions (x,y) from a source data cube to align with the corresponding dimensions of the given target data cube. Returns a new data cube with the resampled dimensions.\n\nTo resample a data cube to a specific resolution or projection regardless of an existing target data cube, refer to ``resample_spatial()``.",
			"categories": [
				"cubes",
				"reproject"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A raster data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "spatial",
								"axis": [
									"x",
									"y"
								]
							}
						]
					}
				},
				{
					"name": "target",
					"description": "A raster data cube that describes the spatial target resolution.",
					"schema": {
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "spatial",
								"axis": [
									"x",
									"y"
								]
							}
						]
					}
				},
				{
					"name": "method",
					"description": "Resampling method to use. The following options are available and are meant to align with [`gdalwarp`](https://gdal.org/programs/gdalwarp.html#cmdoption-gdalwarp-r):\n\n* `average`: average (mean) resampling, computes the weighted average of all valid pixels\n* `bilinear`: bilinear resampling\n* `cubic`: cubic resampling\n* `cubicspline`: cubic spline resampling\n* `lanczos`: Lanczos windowed sinc resampling\n* `max`: maximum resampling, selects the maximum value from all valid pixels\n* `med`: median resampling, selects the median value of all valid pixels\n* `min`: minimum resampling, selects the minimum value from all valid pixels\n* `mode`: mode resampling, selects the value which appears most often of all the sampled points\n* `near`: nearest neighbour resampling (default)\n* `q1`: first quartile resampling, selects the first quartile value of all valid pixels\n* `q3`: third quartile resampling, selects the third quartile value of all valid pixels\n* `rms` root mean square (quadratic mean) of all valid pixels\n* `sum`: compute the weighted sum of all valid pixels\n\nValid pixels are determined based on the function ``is_valid()``.",
					"schema": {
						"type": "string",
						"enum": [
							"average",
							"bilinear",
							"cubic",
							"cubicspline",
							"lanczos",
							"max",
							"med",
							"min",
							"mode",
							"near",
							"q1",
							"q3",
							"rms",
							"sum"
						]
					},
					"default": "near",
					"optional": true
				}
			],
			"returns": {
				"description": "A raster data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except for the resolution and dimension labels of the spatial dimensions.",
				"schema": {
					"type": "object",
					"subtype": "datacube",
					"dimensions": [
						{
							"type": "spatial",
							"axis": [
								"x",
								"y"
							]
						}
					]
				}
			},
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#resample",
					"rel": "about",
					"title": "Resampling explained in the openEO documentation"
				}
			]
		},
		{
			"id": "apply",
			"summary": "Apply a process to each value",
			"description": "Applies a process to each value in the data cube (i.e. a local operation). In contrast, the process ``apply_dimension()`` applies a process to all values along a particular dimension.",
			"categories": [
				"cubes"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "process",
					"description": "A process that accepts and returns a single value and is applied on each individual value in the data cube. The process may consist of multiple sub-processes and could, for example, consist of processes such as ``absolute()`` or ``linear_scale_range()``.",
					"schema": {
						"type": "object",
						"subtype": "process-graph",
						"parameters": [
							{
								"name": "x",
								"description": "The value to process.",
								"schema": {
									"description": "Any data type."
								}
							},
							{
								"name": "context",
								"description": "Additional data passed by the user.",
								"schema": {
									"description": "Any data type."
								},
								"optional": true,
								"default": null
							}
						],
						"returns": {
							"description": "The value to be set in the new data cube.",
							"schema": {
								"description": "Any data type."
							}
						}
					}
				},
				{
					"name": "context",
					"description": "Additional data to be passed to the process.",
					"schema": {
						"description": "Any data type."
					},
					"optional": true,
					"default": null
				}
			],
			"returns": {
				"description": "A data cube with the newly computed values and the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged.",
				"schema": {
					"type": "object",
					"subtype": "datacube"
				}
			},
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#apply",
					"rel": "about",
					"title": "Apply explained in the openEO documentation"
				}
			]
		},
		{
			"id": "apply_dimension",
			"summary": "Apply a process to all values along a dimension",
			"description": "Applies a process to all values along a dimension of a data cube. For example, if the temporal dimension is specified the process will work on the values of a time series.\n\nThe process ``reduce_dimension()`` also applies a process to values along a dimension, but drops the dimension afterwards. The process ``apply()`` applies a process to each value in the data cube.\n\nThe target dimension is the source dimension if not specified otherwise in the `target_dimension` parameter. The values in the target dimension get replaced by the computed values. The name, type and reference system are preserved.\n\nThe dimension labels are preserved when the target dimension is the source dimension and the number of values in the source dimension is equal to the number of values computed by the process. Otherwise, the dimension labels will be incrementing integers starting from zero, which can be changed using ``rename_labels()`` afterwards. The number of labels will be equal to the number of values computed by the process.",
			"categories": [
				"cubes"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "process",
					"description": "Process to be applied on all values along the given dimension. The specified process needs to accept an array and must return an array with at least one element. A process may consist of multiple sub-processes.",
					"schema": {
						"type": "object",
						"subtype": "process-graph",
						"parameters": [
							{
								"name": "data",
								"description": "A labeled array with elements of any type.",
								"schema": {
									"type": "array",
									"subtype": "labeled-array",
									"items": {
										"description": "Any data type."
									}
								}
							},
							{
								"name": "context",
								"description": "Additional data passed by the user.",
								"schema": {
									"description": "Any data type."
								},
								"optional": true,
								"default": null
							}
						],
						"returns": {
							"description": "The value to be set in the new data cube.",
							"schema": {
								"type": "array",
								"items": {
									"description": "Any data type."
								}
							}
						}
					}
				},
				{
					"name": "dimension",
					"description": "The name of the source dimension to apply the process on. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "target_dimension",
					"description": "The name of the target dimension or `null` (the default) to use the source dimension specified in the parameter `dimension`.\n\nBy specifying a target dimension, the source dimension is removed. The target dimension with the specified name and the type `other` (see ``add_dimension()``) is created, if it doesn't exist yet.",
					"schema": {
						"type": [
							"string",
							"null"
						]
					},
					"default": null,
					"optional": true
				},
				{
					"name": "context",
					"description": "Additional data to be passed to the process.",
					"schema": {
						"description": "Any data type."
					},
					"optional": true,
					"default": null
				}
			],
			"returns": {
				"description": "A data cube with the newly computed values.\n\nAll dimensions stay the same, except for the dimensions specified in corresponding parameters. There are three cases how the dimensions can change:\n\n1. The source dimension is the target dimension:\n   - The (number of) dimensions remain unchanged as the source dimension is the target dimension.\n   - The source dimension properties name and type remain unchanged.\n   - The dimension labels, the reference system and the resolution are preserved only if the number of values in the source dimension is equal to the number of values computed by the process. Otherwise, all other dimension properties change as defined in the list below.\n2. The source dimension is not the target dimension. The target dimension exists with a single label only:\n   - The number of dimensions decreases by one as the source dimension is 'dropped' and the target dimension is filled with the processed data that originates from the source dimension.\n   - The target dimension properties name and type remain unchanged. All other dimension properties change as defined in the list below.\n3. The source dimension is not the target dimension and the latter does not exist:\n   - The number of dimensions remain unchanged, but the source dimension is replaced with the target dimension.\n   - The target dimension has the specified name and the type other. All other dimension properties are set as defined in the list below.\n\nUnless otherwise stated above, for the given (target) dimension the following applies:\n\n- the number of dimension labels is equal to the number of values computed by the process,\n- the dimension labels are incrementing integers starting from zero,\n- the resolution changes, and\n- the reference system is undefined.",
				"schema": {
					"type": "object",
					"subtype": "datacube"
				}
			},
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#apply",
					"rel": "about",
					"title": "Apply explained in the openEO documentation"
				}
			]
		},
		{
			"id": "drop_dimension",
			"summary": "Remove a dimension",
			"description": "Drops a dimension from the data cube.\n\nDropping a dimension only works on dimensions with a single dimension label left, otherwise the process fails with a `DimensionLabelCountMismatch` exception. Dimension values can be reduced to a single value with a filter such as ``filter_bands()`` or the ``reduce_dimension()`` process. If a dimension with the specified name does not exist, the process fails with a `DimensionNotAvailable` exception.",
			"categories": [
				"cubes"
			],
			"parameters": [
				{
					"name": "data",
					"description": "The data cube to drop a dimension from.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "name",
					"description": "Name of the dimension to drop.",
					"schema": {
						"type": "string"
					}
				}
			],
			"returns": {
				"description": "A data cube without the specified dimension. The number of dimensions decreases by one, but the dimension properties (name, type, labels, reference system and resolution) for all other dimensions remain unchanged.",
				"schema": {
					"type": "object",
					"subtype": "datacube"
				}
			}
		},
		{
			"id": "dimension_labels",
			"summary": "Get the dimension labels",
			"description": "Gives all labels for a dimension in the data cube. The labels have the same order as in the data cube.\n\nIf a dimension with the specified name does not exist, the process fails with a `DimensionNotAvailable` exception.",
			"categories": [
				"cubes"
			],
			"parameters": [
				{
					"name": "data",
					"description": "The data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "dimension",
					"description": "The name of the dimension to get the labels for.",
					"schema": {
						"type": "string"
					}
				}
			],
			"returns": {
				"description": "The labels as an array.",
				"schema": {
					"type": "array",
					"items": {
						"type": [
							"number",
							"string"
						]
					}
				}
			},
			"exceptions": {
				"DimensionNotAvailable": {
					"message": "A dimension with the specified name does not exist."
				}
			}
		},
		{
			"id": "merge_cubes",
			"summary": "Merge two data cubes",
			"description": "The process merges two 'compatible' data cubes.\n\nThe data cubes have to be compatible, which means that they must share a common subset of equal dimensions. To conveniently get to such a subset of equal dimensions, the process tries to align the horizontal spatial dimensions (axes `x` and `y`) implicitly with ``resample_cube_spatial()`` if required. `cube1` is the target data cube for resampling and the default parameters of ``resample_cube_spatial()`` apply. The equality for geometries follows the definition in the Simple Features standard by the OGC.\n\nAll dimensions share the same properties, such as name, type, reference system, and resolution. Dimensions can have disjoint or overlapping labels. If there is any overlap between the dimension labels, the parameter `overlap_resolver` must be specified to combine the two values for these overlapping labels. A merge operation without overlap should be reversible with (a set of) filter operations for each of the two cubes, if no implicit resampling was applied.\n\nIt is not possible to merge a vector and a raster data cube. Merging vector data cubes with different base geometry types (points, lines/line strings, polygons) is not possible and throws the `IncompatibleGeometryTypes` exception. The base geometry types can be merged with their corresponding multi geometry types.\n\nAfter the merge, the dimensions with a natural/inherent label order (with a reference system this is each spatial and temporal dimensions) still have all dimension labels sorted. For other dimensions without inherent order, including bands, the dimension labels keep the order in which they are present in the original data cubes, and the dimension labels of `cube2` get appended to the dimension labels of `cube1`.\n\n**Examples for merging two data cubes:**\n\n1. Data cubes with the dimensions (`x`, `y`, `t`, `bands`) have the same dimension labels in `x`, `y` and `t`, but the labels for the dimension `bands` are `B1` and `B2` for the base data cube and `B3` and `B4` for the other. An overlap resolver is *not needed*. The merged data cube has the dimensions `x`, `y`, `t`, `bands`, and the dimension `bands` has four dimension labels: `B1`, `B2`, `B3`, `B4`.\n2. Data cubes with the dimensions (`x`, `y`, `t`, `bands`) have the same dimension labels in `x`, `y` and `t`, but the labels for the dimension `bands` are `B1` and `B2` for the base data cube and `B2` and `B3` for the other. An overlap resolver is *required* to resolve overlap in band `B2`. The merged data cube has the dimensions `x`, `y`, `t` and `bands` and the dimension `bands` has three dimension labels: `B1`, `B2`, `B3`.\n3. Data cubes with the dimensions (`x`, `y`, `t`) have the same dimension labels in `x`, `y` and `t`. There are two options:\n   1. Keep the overlapping values separately in the merged data cube: An overlap resolver is *not needed*, but for each data cube you need to add a new dimension using ``add_dimension()``. The new dimensions must be equal, except that the labels for the new dimensions must differ. The merged data cube has the same dimensions and labels as the original data cubes, plus the dimension added with ``add_dimension()``, which has the two dimension labels after the merge.\n   2. Combine the overlapping values into a single value: An overlap resolver is *required* to resolve the overlap for all values. The merged data cube has the same dimensions and labels as the original data cubes, but all values have been processed by the overlap resolver.\n4. A data cube with dimensions (`x`, `y`, `t` / `bands`) or (`x`, `y`, `t`, `bands`) and another data cube with dimensions (`x`, `y`) have the same dimension labels in `x` and `y`. Merging them will join dimensions `x` and `y`, so the lower dimension cube is merged with each time step and band available in the higher dimensional cube. A use case for this is applying a digital elevation model to a spatio-temporal data cube. An overlap resolver is *required* to resolve the overlap for all pixels.",
			"categories": [
				"cubes"
			],
			"parameters": [
				{
					"name": "cube1",
					"description": "The base data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "cube2",
					"description": "The other data cube to be merged with the base data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "overlap_resolver",
					"description": "A reduction operator that resolves the conflict if the data overlaps. The reducer must return a value of the same data type as the input values are. The reduction operator may be a single process such as ``multiply()`` or consist of multiple sub-processes. `null` (the default) can be specified if no overlap resolver is required.",
					"schema": {
						"type": "object",
						"subtype": "process-graph",
						"parameters": [
							{
								"name": "x",
								"description": "The overlapping value from the base data cube `cube1`.",
								"schema": {
									"description": "Any data type."
								}
							},
							{
								"name": "y",
								"description": "The overlapping value from the other data cube `cube2`.",
								"schema": {
									"description": "Any data type."
								}
							},
							{
								"name": "context",
								"description": "Additional data passed by the user.",
								"schema": {
									"description": "Any data type."
								},
								"optional": true,
								"default": null
							}
						],
						"returns": {
							"description": "The value to be set in the merged data cube.",
							"schema": {
								"description": "Any data type."
							}
						}
					},
					"default": null,
					"optional": true
				},
				{
					"name": "context",
					"description": "Additional data to be passed to the overlap resolver.",
					"schema": {
						"description": "Any data type."
					},
					"optional": true,
					"default": null
				}
			],
			"returns": {
				"description": "The merged data cube. See the process description for details regarding the dimensions and dimension properties (name, type, labels, reference system and resolution).",
				"schema": {
					"type": "object",
					"subtype": "datacube"
				}
			},
			"links": [
				{
					"rel": "about",
					"href": "https://en.wikipedia.org/wiki/Reduction_Operator",
					"title": "Background information on reduction operators (binary reducers) by Wikipedia"
				},
				{
					"href": "http://www.opengeospatial.org/standards/sfa",
					"rel": "about",
					"title": "Simple Features standard by the OGC"
				}
			]
		},
		{
			"id": "aggregate_temporal",
			"summary": "Temporal aggregations",
			"description": "Computes a temporal aggregation based on an array of temporal intervals.\n\nFor common regular calendar hierarchies such as year, month, week or seasons ``aggregate_temporal_period()`` can be used. Other calendar hierarchies must be transformed into specific intervals by the clients.\n\nFor each interval, all data along the dimension will be passed through the reducer.\n\nThe computed values will be projected to the labels. If no labels are specified, the start of the temporal interval will be used as label for the corresponding values. In case of a conflict (i.e. the user-specified values for the start times of the temporal intervals are not distinct), the user-defined labels must be specified in the parameter `labels` as otherwise a `DistinctDimensionLabelsRequired` exception would be thrown. The number of user-defined labels and the number of intervals need to be equal.\n\nIf the dimension is not set or is set to `null`, the data cube is expected to only have one temporal dimension.",
			"categories": [
				"cubes",
				"aggregate"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "temporal"
							}
						]
					}
				},
				{
					"name": "intervals",
					"description": "Left-closed temporal intervals, which are allowed to overlap. Each temporal interval in the array has exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified time instant is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified time instant is **excluded** from the interval.\n\nThe second element must always be greater/later than the first element, except when using time without date. Otherwise, a `TemporalExtentEmpty` exception is thrown.",
					"schema": {
						"type": "array",
						"subtype": "temporal-intervals",
						"minItems": 1,
						"items": {
							"type": "array",
							"subtype": "temporal-interval",
							"uniqueItems": true,
							"minItems": 2,
							"maxItems": 2,
							"items": {
								"anyOf": [
									{
										"type": "string",
										"format": "date-time",
										"subtype": "date-time",
										"description": "Date and time with a time zone."
									},
									{
										"type": "string",
										"format": "date",
										"subtype": "date",
										"description": "Date only, formatted as `YYYY-MM-DD`. The time zone is UTC. Missing time components are all 0."
									},
									{
										"type": "string",
										"subtype": "time",
										"pattern": "^\\d{2}:\\d{2}:\\d{2}$",
										"description": "Time only, formatted as `HH:MM:SS`. The time zone is UTC."
									},
									{
										"type": "null"
									}
								]
							}
						},
						"examples": [
							[
								[
									"2015-01-01",
									"2016-01-01"
								],
								[
									"2016-01-01",
									"2017-01-01"
								],
								[
									"2017-01-01",
									"2018-01-01"
								]
							],
							[
								[
									"06:00:00",
									"18:00:00"
								],
								[
									"18:00:00",
									"06:00:00"
								]
							]
						]
					}
				},
				{
					"name": "reducer",
					"description": "A reducer to be applied for the values contained in each interval. A reducer is a single process such as ``mean()`` or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes. Intervals may not contain any values, which for most reducers leads to no-data (`null`) values by default.",
					"schema": {
						"type": "object",
						"subtype": "process-graph",
						"parameters": [
							{
								"name": "data",
								"description": "A labeled array with elements of any type. If there's no data for the interval, the array is empty.",
								"schema": {
									"type": "array",
									"subtype": "labeled-array",
									"items": {
										"description": "Any data type."
									}
								}
							},
							{
								"name": "context",
								"description": "Additional data passed by the user.",
								"schema": {
									"description": "Any data type."
								},
								"optional": true,
								"default": null
							}
						],
						"returns": {
							"description": "The value to be set in the new data cube.",
							"schema": {
								"description": "Any data type."
							}
						}
					}
				},
				{
					"name": "labels",
					"description": "Distinct labels for the intervals, which can contain dates and/or times. Is only required to be specified if the values for the start of the temporal intervals are not distinct and thus the default labels would not be unique. The number of labels and the number of groups need to be equal.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"string"
							]
						}
					},
					"default": [],
					"optional": true
				},
				{
					"name": "dimension",
					"description": "The name of the temporal dimension for aggregation. All data along the dimension is passed through the specified reducer. If the dimension is not set or set to `null`, the data cube is expected to only have one temporal dimension. Fails with a `TooManyDimensions` exception if it has more dimensions. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.",
					"schema": {
						"type": [
							"string",
							"null"
						]
					},
					"default": null,
					"optional": true
				},
				{
					"name": "context",
					"description": "Additional data to be passed to the reducer.",
					"schema": {
						"description": "Any data type."
					},
					"optional": true,
					"default": null
				}
			],
			"returns": {
				"description": "A new data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except for the resolution and dimension labels of the given temporal dimension.",
				"schema": {
					"type": "object",
					"subtype": "datacube",
					"dimensions": [
						{
							"type": "temporal"
						}
					]
				}
			},
			"examples": [
				{
					"arguments": {
						"data": {
							"from_parameter": "data"
						},
						"intervals": [
							[
								"2015-01-01",
								"2016-01-01"
							],
							[
								"2016-01-01",
								"2017-01-01"
							],
							[
								"2017-01-01",
								"2018-01-01"
							],
							[
								"2018-01-01",
								"2019-01-01"
							],
							[
								"2019-01-01",
								"2020-01-01"
							]
						],
						"labels": [
							"2015",
							"2016",
							"2017",
							"2018",
							"2019"
						],
						"reducer": {
							"process_graph": {
								"mean1": {
									"process_id": "mean",
									"arguments": {
										"data": {
											"from_parameter": "data"
										}
									},
									"result": true
								}
							}
						}
					}
				}
			],
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#aggregate",
					"rel": "about",
					"title": "Aggregation explained in the openEO documentation"
				},
				{
					"href": "https://www.rfc-editor.org/rfc/rfc3339.html",
					"rel": "about",
					"title": "RFC3339: Details about formatting temporal strings"
				}
			]
		},
		{
			"id": "aggregate_temporal_period",
			"summary": "Temporal aggregations based on calendar hierarchies",
			"description": "Computes a temporal aggregation based on calendar hierarchies such as years, months or seasons. For other calendar hierarchies ``aggregate_temporal()`` can be used.\n\nFor each interval, all data along the dimension will be passed through the reducer.\n\nIf the dimension is not set or is set to `null`, the data cube is expected to only have one temporal dimension.",
			"categories": [
				"aggregate",
				"climatology",
				"cubes"
			],
			"parameters": [
				{
					"name": "data",
					"description": "The source data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube",
						"dimensions": [
							{
								"type": "temporal"
							}
						]
					}
				},
				{
					"name": "period",
					"description": "The time intervals to aggregate. The following pre-defined values are available:\n\n* `hour`: Hour of the day\n* `day`: Day of the year\n* `week`: Week of the year\n* `dekad`: Ten day periods, counted per year with three periods per month (day 1 - 10, 11 - 20 and 21 - end of month). The third dekad of the month can range from 8 to 11 days. For example, the third dekad of a year spans from January 21 till January 31 (11 days), the fourth dekad spans from February 1 till February 10 (10 days) and the sixth dekad spans from February 21 till February 28 or February 29 in a leap year (8 or 9 days respectively).\n* `month`: Month of the year\n* `season`: Three month periods of the calendar seasons (December - February, March - May, June - August, September - November).\n* `tropical-season`: Six month periods of the tropical seasons (November - April, May - October).\n* `year`: Proleptic years\n* `decade`: Ten year periods ([0-to-9 decade](https://en.wikipedia.org/wiki/Decade#0-to-9_decade)), from a year ending in a 0 to the next year ending in a 9.\n* `decade-ad`: Ten year periods ([1-to-0 decade](https://en.wikipedia.org/wiki/Decade#1-to-0_decade)) better aligned with the anno Domini (AD) calendar era, from a year ending in a 1 to the next year ending in a 0.",
					"schema": {
						"type": "string",
						"enum": [
							"hour",
							"day",
							"week",
							"month",
							"season",
							"year"
						]
					}
				},
				{
					"name": "reducer",
					"description": "A reducer to be applied for the values contained in each period. A reducer is a single process such as ``mean()`` or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes. Periods may not contain any values, which for most reducers leads to no-data (`null`) values by default.",
					"schema": {
						"type": "object",
						"subtype": "process-graph",
						"parameters": [
							{
								"name": "data",
								"description": "A labeled array with elements of any type. If there's no data for the period, the array is empty.",
								"schema": {
									"type": "array",
									"subtype": "labeled-array",
									"items": {
										"description": "Any data type."
									}
								}
							},
							{
								"name": "context",
								"description": "Additional data passed by the user.",
								"schema": {
									"description": "Any data type."
								},
								"optional": true,
								"default": null
							}
						],
						"returns": {
							"description": "The value to be set in the new data cube.",
							"schema": {
								"description": "Any data type."
							}
						}
					}
				},
				{
					"name": "dimension",
					"description": "The name of the temporal dimension for aggregation. All data along the dimension is passed through the specified reducer. If the dimension is not set or set to `null`, the source data cube is expected to only have one temporal dimension. Fails with a `TooManyDimensions` exception if it has more dimensions. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.",
					"schema": {
						"type": [
							"string",
							"null"
						]
					},
					"optional": true,
					"default": null
				},
				{
					"name": "context",
					"description": "Additional data to be passed to the reducer.",
					"schema": {
						"description": "Any data type."
					},
					"optional": true,
					"default": null
				}
			],
			"returns": {
				"description": "A new data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except for the resolution and dimension labels of the given temporal dimension. The specified temporal dimension has the following dimension labels (`YYYY` = four-digit year, `MM` = two-digit month, `DD` two-digit day of month):\n\n* `hour`: `YYYY-MM-DD-00` - `YYYY-MM-DD-23`\n* `day`: `YYYY-001` - `YYYY-365`\n* `week`: `YYYY-01` - `YYYY-52`\n* `dekad`: `YYYY-00` - `YYYY-36`\n* `month`: `YYYY-01` - `YYYY-12`\n* `season`: `YYYY-djf` (December - February), `YYYY-mam` (March - May), `YYYY-jja` (June - August), `YYYY-son` (September - November).\n* `tropical-season`: `YYYY-ndjfma` (November - April), `YYYY-mjjaso` (May - October).\n* `year`: `YYYY`\n* `decade`: `YYY0`\n* `decade-ad`: `YYY1`\n\nThe dimension labels in the new data cube are complete for the whole extent of the source data cube. For example, if `period` is set to `day` and the source data cube has two dimension labels at the beginning of the year (`2020-01-01`) and the end of a year (`2020-12-31`), the process returns a data cube with 365 dimension labels (`2020-001`, `2020-002`, ..., `2020-365`). In contrast, if `period` is set to `day` and the source data cube has just one dimension label `2020-01-05`, the process returns a data cube with just a single dimension label (`2020-005`).",
				"schema": {
					"type": "object",
					"subtype": "datacube",
					"dimensions": [
						{
							"type": "temporal"
						}
					]
				}
			},
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#aggregate",
					"rel": "about",
					"title": "Aggregation explained in the openEO documentation"
				}
			]
		},
		{
			"id": "rename_labels",
			"summary": "Rename dimension labels",
			"description": "Renames the labels of the specified dimension in the data cube from `source` to `target`.\n\nIf the array for the source labels is empty (the default), the dimension labels are expected to be enumerated with zero-based numbering (0,1,2,3,...) so that the dimension labels directly map to the indices of the array specified for the parameter `target`. Otherwise, the number of the source and target labels must be equal. If none of these requirements is fulfilled, the `LabelMismatch` exception is thrown.\n\nThis process doesn't change the order of the labels and their corresponding data.",
			"categories": [
				"cubes"
			],
			"parameters": [
				{
					"name": "data",
					"description": "The data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "dimension",
					"description": "The name of the dimension to rename the labels for.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "target",
					"description": "The new names for the labels.\n\nIf a target dimension label already exists in the data cube, a `LabelExists` exception is thrown.",
					"schema": {
						"type": "array",
						"items": {
							"type": [
								"number",
								"string"
							]
						}
					}
				}
			],
			"returns": {
				"description": "The data cube with the same dimensions. The dimension properties (name, type, labels, reference system and resolution) remain unchanged, except that for the given dimension the labels change. The old labels can not be referred to any longer. The number of labels remains the same.",
				"schema": {
					"type": "object",
					"subtype": "datacube"
				}
			}
		},
		{
			"id": "reduce_dimension",
			"summary": "Reduce dimensions",
			"description": "Applies a reducer to a data cube dimension by collapsing all the values along the specified dimension into an output value computed by the reducer.\n\nThe dimension is dropped. To avoid this, use ``apply_dimension()`` instead.",
			"categories": [
				"cubes",
				"reducer"
			],
			"parameters": [
				{
					"name": "data",
					"description": "A data cube.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "reducer",
					"description": "A reducer to apply on the specified dimension. A reducer is a single process such as ``mean()`` or a set of processes, which computes a single value for a list of values, see the category 'reducer' for such processes.",
					"schema": {
						"type": "object",
						"subtype": "process-graph",
						"parameters": [
							{
								"name": "data",
								"description": "A labeled array with elements of any type.",
								"schema": {
									"type": "array",
									"subtype": "labeled-array",
									"items": {
										"description": "Any data type."
									}
								}
							},
							{
								"name": "context",
								"description": "Additional data passed by the user.",
								"schema": {
									"description": "Any data type."
								},
								"optional": true,
								"default": null
							}
						],
						"returns": {
							"description": "The value to be set in the new data cube.",
							"schema": {
								"description": "Any data type."
							}
						}
					}
				},
				{
					"name": "dimension",
					"description": "The name of the dimension over which to reduce. Fails with a `DimensionNotAvailable` exception if the specified dimension does not exist.",
					"schema": {
						"type": "string"
					}
				},
				{
					"name": "context",
					"description": "Additional data to be passed to the reducer.",
					"schema": {
						"description": "Any data type."
					},
					"optional": true,
					"default": null
				}
			],
			"returns": {
				"description": "A data cube with the newly computed values. It is missing the given dimension, the number of dimensions decreases by one. The dimension properties (name, type, labels, reference system and resolution) for all other dimensions remain unchanged.",
				"schema": {
					"type": "object",
					"subtype": "datacube"
				}
			},
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html#reduce",
					"rel": "about",
					"title": "Reducers explained in the openEO documentation"
				}
			]
		},
		{
			"id": "load_collection",
			"summary": "Load a collection",
			"description": "Loads a collection from the current back-end by its id and returns it as a processable data cube. The data that is added to the data cube can be restricted with the parameters `spatial_extent`, `temporal_extent`, `bands` and `properties`. If no data is available for the given extents, a `NoDataAvailable` exception is thrown.\n\n**Remarks:**\n\n* The bands (and all dimensions that specify nominal dimension labels) are expected to be ordered as specified in the metadata if the `bands` parameter is set to `null`.\n* If no additional parameter is specified this would imply that the whole data set is expected to be loaded. Due to the large size of many data sets, this is not recommended and may be optimized by back-ends to only load the data that is actually required after evaluating subsequent processes such as filters. This means that the values in the data cube should be processed only after the data has been limited to the required extent and as a consequence also to a manageable size.",
			"categories": [
				"cubes",
				"import"
			],
			"parameters": [
				{
					"name": "id",
					"description": "The collection id.",
					"schema": {
						"type": "string",
						"subtype": "collection-id",
						"pattern": "^[\\w\\-\\.~/]+$"
					}
				},
				{
					"name": "bands",
					"description": "Only adds the specified bands into the data cube so that bands that don't match the list of band names are not available. Applies to all dimensions of type `bands`.\n\nEither the unique band name (metadata field `name` in bands) or one of the common band names (metadata field `common_name` in bands) can be specified. If the unique band name and the common name conflict, the unique band name has a higher priority.\n\nThe order of the specified array defines the order of the bands in the data cube. If multiple bands match a common name, all matched bands are included in the original order.\n\nIt is recommended to use this parameter instead of using ``filter_bands()`` directly after loading unbounded data.",
					"schema": [
						{
							"type": "array",
							"minItems": 1,
							"items": {
								"type": "string",
								"subtype": "band-name"
							}
						},
						{
							"title": "No filter",
							"description": "Don't filter bands. All bands are included in the data cube.",
							"type": "null"
						}
					],
					"default": null,
					"optional": true
				},
				{
					"name": "spatial_extent",
					"description": "Limits the data to load from the collection to the specified bounding box or polygons.\n\n* For raster data, the process loads the pixel into the data cube if the point at the pixel center intersects with the bounding box or any of the polygons (as defined in the Simple Features standard by the OGC).\n* For vector data, the process loads the geometry into the data cube if the geometry is fully *within* the bounding box or any of the polygons (as defined in the Simple Features standard by the OGC). Empty geometries may only be in the data cube if no spatial extent has been provided.\n\nThe GeoJSON can be one of the following feature types:\n\n* A `Polygon` or `MultiPolygon` geometry,\n* a `Feature` with a `Polygon` or `MultiPolygon` geometry, or\n* a `FeatureCollection` containing at least one `Feature` with `Polygon` or `MultiPolygon` geometries.\n* Empty geometries are ignored.\n\nSet this parameter to `null` to set no limit for the spatial extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_bbox()`` or ``filter_spatial()`` directly after loading unbounded data.",
					"schema": [
						{
							"title": "Bounding Box",
							"type": "object",
							"subtype": "bounding-box",
							"required": [
								"west",
								"south",
								"east",
								"north"
							],
							"properties": {
								"west": {
									"description": "West (lower left corner, coordinate axis 1).",
									"type": "number"
								},
								"south": {
									"description": "South (lower left corner, coordinate axis 2).",
									"type": "number"
								},
								"east": {
									"description": "East (upper right corner, coordinate axis 1).",
									"type": "number"
								},
								"north": {
									"description": "North (upper right corner, coordinate axis 2).",
									"type": "number"
								},
								"base": {
									"description": "Base (optional, lower left corner, coordinate axis 3).",
									"type": [
										"number",
										"null"
									],
									"default": null
								},
								"height": {
									"description": "Height (optional, upper right corner, coordinate axis 3).",
									"type": [
										"number",
										"null"
									],
									"default": null
								},
								"crs": {
									"description": "Coordinate reference system of the extent, specified as as [EPSG code](http://www.epsg-registry.org/) or [WKT2 CRS string](http://docs.opengeospatial.org/is/18-010r7/18-010r7.html). Defaults to `4326` (EPSG code 4326) unless the client explicitly requests a different coordinate reference system.",
									"anyOf": [
										{
											"title": "EPSG Code",
											"type": "integer",
											"subtype": "epsg-code",
											"minimum": 1000,
											"examples": [
												3857
											]
										},
										{
											"title": "WKT2",
											"type": "string",
											"subtype": "wkt2-definition"
										}
									],
									"default": 4326
								}
							}
						},
						{
							"title": "GeoJSON",
							"description": "Deprecated in favor of ``load_geojson()``. Limits the data cube to the bounding box of the given geometries. For raster data, all pixels inside the bounding box that do not intersect with any of the polygons will be set to no data (`null`).\n\nThe GeoJSON type `GeometryCollection` is not supported. Empty geometries are ignored.",
							"type": "object",
							"subtype": "geojson",
							"deprecated": true
						},
						{
							"title": "Vector data cube",
							"description": "Limits the data cube to the bounding box of the given geometries in the vector data cube. For raster data, all pixels inside the bounding box that do not intersect with any of the polygons will be set to no data (`null`). Empty geometries are ignored.",
							"type": "object",
							"subtype": "datacube",
							"dimensions": [
								{
									"type": "geometry"
								}
							]
						},
						{
							"title": "No filter",
							"description": "Don't filter spatially. All data is included in the data cube.",
							"type": "null"
						}
					]
				},
				{
					"name": "temporal_extent",
					"description": "Limits the data to load from the collection to the specified left-closed temporal interval. Applies to all temporal dimensions. The interval has to be specified as an array with exactly two elements:\n\n1. The first element is the start of the temporal interval. The specified time instant is **included** in the interval.\n2. The second element is the end of the temporal interval. The specified time instant is **excluded** from the interval.\n\nThe second element must always be greater/later than the first element. Otherwise, a `TemporalExtentEmpty` exception is thrown.\n\nAlso supports unbounded intervals by setting one of the boundaries to `null`, but never both.\n\nSet this parameter to `null` to set no limit for the temporal extent. Be careful with this when loading large datasets! It is recommended to use this parameter instead of using ``filter_temporal()`` directly after loading unbounded data.",
					"schema": [
						{
							"type": "array",
							"subtype": "temporal-interval",
							"uniqueItems": true,
							"minItems": 2,
							"maxItems": 2,
							"items": {
								"anyOf": [
									{
										"type": "string",
										"format": "date-time",
										"subtype": "date-time",
										"description": "Date and time with a time zone."
									},
									{
										"type": "string",
										"format": "date",
										"subtype": "date",
										"description": "Date only, formatted as `YYYY-MM-DD`. The time zone is UTC. Missing time components are all 0."
									},
									{
										"type": "null"
									}
								]
							},
							"examples": [
								[
									"2015-01-01T00:00:00Z",
									"2016-01-01T00:00:00Z"
								],
								[
									"2015-01-01",
									"2016-01-01"
								]
							]
						},
						{
							"title": "No filter",
							"description": "Don't filter temporally. All data is included in the data cube.",
							"type": "null"
						}
					]
				},
				{
					"name": "properties",
					"description": "Limits the data by metadata properties to include only data in the data cube which all given conditions return `true` for (AND operation).\n\nSpecify key-value-pairs with the key being the name of the metadata property, which can be retrieved with the openEO Data Discovery for Collections. The value must be a condition (user-defined process) to be evaluated against the collection metadata, see the example.",
					"schema": [
						{
							"type": "object",
							"subtype": "metadata-filter",
							"title": "Filters",
							"description": "A list of filters to check against. Specify key-value-pairs with the key being the name of the metadata property name and the value being a process evaluated against the metadata values.",
							"additionalProperties": {
								"type": "object",
								"subtype": "process-graph",
								"parameters": [
									{
										"name": "value",
										"description": "The property value to be checked against.",
										"schema": {
											"description": "Any data type."
										}
									}
								],
								"returns": {
									"description": "`true` if the data should be loaded into the data cube, otherwise `false`.",
									"schema": {
										"type": "boolean"
									}
								}
							}
						},
						{
							"title": "No filter",
							"description": "Don't filter by metadata properties.",
							"type": "null"
						}
					],
					"default": null,
					"optional": true
				}
			],
			"returns": {
				"description": "A data cube for further processing. The dimensions and dimension properties (name, type, labels, reference system and resolution) correspond to the collection's metadata, but the dimension labels are restricted as specified in the parameters.",
				"schema": {
					"type": "object",
					"subtype": "datacube"
				}
			},
			"links": [
				{
					"href": "https://openeo.org/documentation/1.0/datacubes.html",
					"rel": "about",
					"title": "Data Cubes explained in the openEO documentation"
				},
				{
					"rel": "about",
					"href": "https://proj.org/usage/projections.html",
					"title": "PROJ parameters for cartographic projections"
				},
				{
					"rel": "about",
					"href": "http://www.epsg-registry.org",
					"title": "Official EPSG code registry"
				},
				{
					"rel": "about",
					"href": "http://www.epsg.io",
					"title": "Unofficial EPSG code database"
				},
				{
					"href": "http://www.opengeospatial.org/standards/sfa",
					"rel": "about",
					"title": "Simple Features standard by the OGC"
				},
				{
					"rel": "about",
					"href": "https://github.com/radiantearth/stac-spec/tree/master/extensions/eo#common-band-names",
					"title": "List of common band names as specified by the STAC specification"
				},
				{
					"href": "https://www.rfc-editor.org/rfc/rfc3339.html",
					"rel": "about",
					"title": "RFC3339: Details about formatting temporal strings"
				}
			]
		},
		{
			"id": "save_result",
			"summary": "Save processed data",
			"description": "Makes the processed data available in the given file format to the corresponding medium that is relevant for the context this processes is applied in:\n\n* For **batch jobs** the data is stored on the back-end. STAC-compatible metadata is usually made available with the processed data.\n* For **synchronous processing** the data is sent to the client as a direct response to the request.\n* **Secondary web services** are provided with the processed data so that it can make use of it (e.g., visualize it). Web service may require the data in a certain format. Please refer to the documentation of the individual service types for details.",
			"categories": [
				"cubes",
				"export"
			],
			"parameters": [
				{
					"name": "data",
					"description": "The data to deliver in the given file format.",
					"schema": {
						"type": "object",
						"subtype": "datacube"
					}
				},
				{
					"name": "format",
					"description": "The file format to use. It must be one of the values that the server reports as supported output file formats, which usually correspond to the short GDAL/OGR codes. This parameter is *case insensitive*.\n\n* If the data cube is empty and the file format can't store empty data cubes, a `DataCubeEmpty` exception is thrown.\n* If the file format is otherwise not suitable for storing the underlying data structure, a `FormatUnsuitable` exception is thrown.",
					"schema": {
						"type": "string",
						"subtype": "output-format"
					}
				},
				{
					"name": "options",
					"description": "The file format parameters to be used to create the file(s). Must correspond to the parameters that the server reports as supported parameters for the chosen `format`. The parameter names and valid values usually correspond to the GDAL/OGR format options.",
					"schema": {
						"type": "object",
						"subtype": "output-format-options"
					},
					"default": {},
					"optional": true
				}
			],
			"returns": {
				"description": "Returns `true` if the results were correctly saved, `false` otherwise.",
				"schema": {
					"type": "boolean",
					"const": true
				}
			},
			"links": [
				{
					"rel": "about",
					"href": "https://gdal.org/drivers/raster/index.html",
					"title": "GDAL Raster Formats"
				},
				{
					"rel": "about",
					"href": "https://gdal.org/drivers/vector/index.html",
					"title": "OGR Vector Formats"
				}
			]
		}
	],
	"links": [
		{
			"rel": "alternate",
			"href": "https://openeo.example/processes",
			"type": "text/html",
			"title": "HTML version of the processes"
		}
	]
}