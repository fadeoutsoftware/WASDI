pipeline {
  agent any

  environment {
    sCurrentRevision  = "${env.BUILD_ID}"
    sEnvironmentLower = env.sAnsibleLimit.split('-')[0].toLowerCase()
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '3', daysToKeepStr: '365'))
    disableConcurrentBuilds()
  }

  stages {
    stage('DEBUG') {
      steps {
        echo "env.GIT_BRANCH                    = " + env.GIT_BRANCH
        echo "env.sAnsibleInventory             = " + env.sAnsibleInventory
        echo "env.sAnsibleLimit                 = " + env.sAnsibleLimit
        echo "env.sCurrentRevision              = " + env.sCurrentRevision
        echo "env.sSourceBranch                 = " + env.sSourceBranch
        echo "env.sWasdiAnsibleGitRepositoryUrl = " + env.sWasdiAnsibleGitRepositoryUrl
        echo "env.sWasdiAnsiblePath             = " + env.sWasdiAnsiblePath
        echo "env.WORKSPACE                     = " + env.WORKSPACE

        sh script: "pwd", label: "Current location"
      }
    }

    stage('UPDATE THE ANSIBLE VAULT PASSWORD') {
      steps {
        withCredentials([
          string(credentialsId: 'sWasdiAnsibleVaultFile', variable: 'sWasdiAnsibleVaultFile'),
          string(credentialsId: 'sWasdiAnsibleVaultPassword', variable: 'sWasdiAnsibleVaultPassword'),
        ]) {
          sh script: """
            mkdir --parents `dirname ${sWasdiAnsibleVaultFile}`
            echo '${sWasdiAnsibleVaultPassword}' > ${sWasdiAnsibleVaultFile}
          """,
          label: "Update the Ansible vault password"
        }
      }
    }

    stage('UPDATE THE ANSIBLE CODE') {
      steps {
        dir("${env.sWasdiAnsiblePath}") {
          checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'sWasdiGitHubWasdiCloudSsh', url: "${env.sWasdiAnsibleGitRepositorySshUrl}"]]])
        }
      }
    }

    stage('BUILD THE CONTAINER(S)') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook \
            playbooks/buildWasdiDockerContainer.yml \
            --inventory inventories/${env.sAnsibleInventory}.yml \
            --limit ${env.sEnvironmentLower} \
            --diff \
            --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE} sDeployBaseImageWasdiLauncher=true'
        """,
        label: "Build the container(s)"
      }
    }

    stage('DEPLOY THE CONTAINER AND ITS RUN ELEMENTS') {
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          script {
            try {
              sh script: """
                cd ${env.sWasdiAnsiblePath}
                ansible-playbook \
                    playbooks/deployDockerContainer.yml \
                    --inventory inventories/${env.sAnsibleInventory}.yml \
                    --limit ${env.sAnsibleLimit} \
                    --diff \
                    --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE} sDeployBaseImageWasdiLauncher=true'
              """,
              label: "Deploy the container and its run elements"
            } catch (oError) {
              echo oError.getMessage()
              throw oError
            }
          }
        }
      }
    }

    stage('CLEAN THE DOCKER IMAGE(S)') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook \
            playbooks/deleteDockerImage.yml \
            --inventory inventories/${env.sAnsibleInventory}.yml \
            --limit ${env.sAnsibleLimit} \
            --diff \
            --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE} sDeployBaseImageWasdiLauncher=true'
        """,
        label: "Clean the Docker image(s)"
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
