def getEnvironmentName(String sAnsibleLimit, boolean bLower) {
  if ( bLower ) {
    return sAnsibleLimit.split('-')[0].toLowerCase()
  }

  return sAnsibleLimit.split('-')[0].toUpperCase()
}

pipeline {
  agent any

  environment {
    sCurrentEnvironmentLower = getEnvironmentName(env.sAnsibleLimit, true)
    sCurrentEnvironmentUpper = getEnvironmentName(env.sAnsibleLimit, false)
    sCurrentRevision         = "${env.BUILD_ID}"
    sMavenProfile            = "wasdi-${env.sCurrentEnvironmentLower}"
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '3', daysToKeepStr: '30'))
    disableConcurrentBuilds()
  }

  tools {
    jdk "WASDI_JDK_8"
    maven "WASDI_MAVEN"
  }

  stages {
    stage('DEBUG') {
      steps {
        echo "env.GIT_BRANCH               = " + env.GIT_BRANCH
        echo "env.sAnsibleLimit            = " + env.sAnsibleLimit
        echo "env.sCurrentEnvironmentLower = " + env.sCurrentEnvironmentLower
        echo "env.sCurrentEnvironmentUpper = " + env.sCurrentEnvironmentUpper
        echo "env.sCurrentRevision         = " + env.sCurrentRevision
        echo "env.sSourceBranch            = " + env.sSourceBranch
        echo "env.sWasdiAnsiblePath        = " + env.sWasdiAnsiblePath
        echo "env.sWasdiMavenSettings      = " + env.sWasdiMavenSettings
        echo "env.WORKSPACE                = " + env.WORKSPACE

        sh script: "pwd", label: "Current location"
        sh script: "cat pom.xml", label: "Content of the main pom.xml file"

        sh script: "which mvn", label: "Tool > mvn > path"
        sh script: "mvn --version", label: "Tool > mvn > current version"
        sh script: "which java", label: "Tool > java > path"
        sh script: "java -version", label: "Tool > java > current version"
      }
    }

    stage('INITIALIZATION') {
      steps {
        script {
          currentBuild.displayName = "${env.sCurrentRevision}"
          currentBuild.description = "WASDI - BUILD OF JAVA PACKAGES (.jar, .war, etc) + DEPLOY THEM"
        }
      }
    }

    stage('MAVEN - BUILD') {
      steps {
        sh script: "mvn --batch-mode --settings ${env.sWasdiMavenSettings} --activate-profiles ${env.sMavenProfile} --define revision=${env.sCurrentRevision} --define skipTests --update-snapshots clean package", label: "Create packages"
      }
    }

    stage('MAVEN - EXECUTE TEST') {
      steps {
        sh script: "mvn --batch-mode --settings ${env.sWasdiMavenSettings} --activate-profiles ${env.sMavenProfile} --define revision=${env.sCurrentRevision} --update-snapshots test", label: "Execute unit test"
      }
    }

    stage('MAVEN - UPLOAD IN NEXUS') {
      steps {
        sh script: "mvn --batch-mode --settings ${env.sWasdiMavenSettings} --activate-profiles ${env.sMavenProfile} --define revision=${env.sCurrentRevision} --define skipTests --update-snapshots deploy", label: "Upload in Nexus"
      }
    }

    stage('BUILD THE CONTAINERS') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook playbooks/buildWasdiDockerContainer.yml --inventory inventories/wasdi.yml --limit ${env.sAnsibleLimit} --diff --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE} sDeployWasdiContainerWasdiLauncher=true sDeployWasdiContainerWasdiScheduler=true sDeployWasdiContainerWasdiTomcatOgcProcessesServer=true sDeployWasdiContainerWasdiTomcatOpenEoServer=true sDeployWasdiContainerWasdiTomcatWasdiWebServer=true sDeployWasdiContainerWasdiTrigger=true sDeployWasdiContainerWasdiUtils=false'
        """,
        label: "Build the WASDI client container"
      }
    }

    /*
    stage('DEPLOYMENT') {
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          script {
            try {
              sh script: """
                cd ${env.sWasdiAnsiblePath}
                ansible-playbook playbooks/deployWasdiArtifact.yml --inventory inventories/wasdi.yml --limit ${env.sAnsibleLimit} --diff --extra-vars 'wasdiDeploymentAll=True sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}'
              """,
              label: "Execute ansible-playbook"
            } catch (oError) {
              echo oError.getMessage()
              throw oError
            }
          }
        }
      }
    }
    */

    stage('ANALYZE THE CODE WITH SONARQUBE') {
      steps {
        script {
          if ( env.executeSonarqube.toBoolean() && env.sCurrentEnvironmentLower == 'test' ) {
            withCredentials([
                string(credentialsId: 'SONARQUBE_JDK_HOME', variable: 'SONARQUBE_JDK_HOME'),
                string(credentialsId: 'SONARQUBE_PROJECT_KEY', variable: 'SONARQUBE_PROJECT_KEY'),
                string(credentialsId: 'SONARQUBE_TOKEN', variable: 'SONARQUBE_TOKEN'),
                string(credentialsId: 'SONARQUBE_URL', variable: 'SONARQUBE_URL')
            ]) {
                sh script: "mvn --batch-mode --settings ${env.sWasdiMavenSettings} --activate-profiles ${env.sMavenProfile} sonar:sonar --define revision=${env.sCurrentRevision} --define sonar.projectKey=${SONARQUBE_PROJECT_KEY} --define sonar.host.url=${SONARQUBE_URL} --define sonar.login=${SONARQUBE_TOKEN} --define sonar.java.jdkHome=${SONARQUBE_JDK_HOME}", label: "Execute the scanner of Sonarqube"
            }
          } else {
            echo "Nothing to do."
          }
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
