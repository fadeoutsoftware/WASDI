def getEnvironmentName(String sAnsibleLimit, boolean bLower) {
  if ( bLower ) {
    return sAnsibleLimit.split('-')[0].toLowerCase()
  }

  return sAnsibleLimit.split('-')[0].toUpperCase()
}

pipeline {
  agent any

  environment {
    sCurrentEnvironmentLower = getEnvironmentName(env.sAnsibleLimit, true)
    sCurrentEnvironmentUpper = getEnvironmentName(env.sAnsibleLimit, false)
    sMavenProfile            = "wasdi-${env.sCurrentEnvironmentLower}"
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '3', daysToKeepStr: '30'))
    disableConcurrentBuilds()
  }

  tools {
    jdk "WASDI_JDK_8"
    maven "WASDI_MAVEN"
  }

  stages {
    stage('DEBUG') {
      steps {
        echo "env.GIT_BRANCH               = " + env.GIT_BRANCH
        echo "env.sAnsibleLimit            = " + env.sAnsibleLimit
        echo "env.sCurrentEnvironmentLower = " + env.sCurrentEnvironmentLower
        echo "env.sCurrentEnvironmentUpper = " + env.sCurrentEnvironmentUpper
        echo "env.sCurrentRevision         = " + env.sCurrentRevision
        echo "env.sSourceBranch            = " + env.sSourceBranch
        echo "env.sWasdiAnsiblePath        = " + env.sWasdiAnsiblePath
        echo "env.sWasdiMavenSettings      = " + env.sWasdiMavenSettings
        echo "env.WORKSPACE                = " + env.WORKSPACE

        sh script: "pwd", label: "Current location"
        sh script: "cat pom.xml", label: "Content of the main pom.xml file"

        sh script: "which mvn", label: "Tool > mvn > path"
        sh script: "mvn --version", label: "Tool > mvn > current version"
        sh script: "which java", label: "Tool > java > path"
        sh script: "java -version", label: "Tool > java > current version"
      }
    }

    stage('INITIALIZATION') {
      steps {
        script {
          currentBuild.displayName = "${env.sCurrentRevision}"
          currentBuild.description = "WASDI - DEPLOY THE JAVA ARTIFACTS CONTAINERS"
        }
      }
    }

    stage('DEPLOY THE CONTAINERS AND THEIR RUN ELEMENTS') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook \
            playbooks/deployDockerContainerWasdiJavaArtifact.yml \
            --inventory inventories/wasdi.yml \
            --limit ${env.sAnsibleLimit} \
            --diff \
            --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}'
        """,
        label: "Deploy the containers and their run elements"
      }
    }

    stage('START OR RESTART THE CONTAINERS') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook \
            playbooks/runDockerContainerWasdiJavaArtifact.yml \
            --inventory inventories/wasdi.yml \
            --limit ${env.sAnsibleLimit} \
            --diff \
            --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}'
        """,
        label: "Start or restart the containers"
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
