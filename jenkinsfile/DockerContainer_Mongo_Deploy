def getEnvironmentName(String sAnsibleLimit, boolean bLower) {
  if ( bLower ) {
    return sAnsibleLimit.split('-')[0].toLowerCase()
  }

  return sAnsibleLimit.split('-')[0].toUpperCase()
}

pipeline {
  agent any

  environment {
    sCurrentEnvironmentLower = getEnvironmentName(env.sAnsibleLimit, true)
    sCurrentEnvironmentUpper = getEnvironmentName(env.sAnsibleLimit, false)
    sMavenProfile            = "wasdi-${env.sCurrentEnvironmentLower}"
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '3', daysToKeepStr: '30'))
    disableConcurrentBuilds()
  }

  stages {
    stage('DEBUG') {
      steps {
        echo "env.GIT_BRANCH               = " + env.GIT_BRANCH
        echo "env.sAnsibleLimit            = " + env.sAnsibleLimit
        echo "env.sCurrentEnvironmentLower = " + env.sCurrentEnvironmentLower
        echo "env.sCurrentEnvironmentUpper = " + env.sCurrentEnvironmentUpper
        echo "env.sCurrentRevision         = " + env.sCurrentRevision
        echo "env.sSourceBranch            = " + env.sSourceBranch
        echo "env.sWasdiAnsiblePath        = " + env.sWasdiAnsiblePath
        echo "env.WORKSPACE                = " + env.WORKSPACE

        sh script: "pwd", label: "Current location"
      }
    }

    stage('INITIALIZATION') {
      steps {
        script {
          currentBuild.displayName = "${env.sCurrentRevision}"
          currentBuild.description = "WASDI - DEPLOY THE MONGO CONTAINER"
        }
      }
    }

    stage('UPDATE THE ANSIBLE VAULT PASSWORD') {
      steps {
        withCredentials([
          string(credentialsId: 'sWasdiAnsibleVaultFile', variable: 'sWasdiAnsibleVaultFile'),
          string(credentialsId: 'sWasdiAnsibleVaultPassword', variable: 'sWasdiAnsibleVaultPassword'),
        ]) {
          sh script: """
            mkdir --parents `dirname ${sWasdiAnsibleVaultFile}`
            echo '${sWasdiAnsibleVaultPassword}' > ${sWasdiAnsibleVaultFile}
          """,
          label: "Update the Ansible vault password"
        }
      }
    }

    stage('DEPLOY THE CONTAINER AND ITS RUN ELEMENTS') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook \
            playbooks/deployDockerContainerWasdiMongo.yml \
            --inventory inventories/wasdi.yml \
            --limit ${env.sAnsibleLimit} \
            --diff \
            --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}'
        """,
        label: "Deploy the container and its run element"
      }
    }

    stage('START OR RESTART THE CONTAINER') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook \
            playbooks/runDockerContainerWasdiMongo.yml \
            --inventory inventories/wasdi.yml \
            --limit ${env.sAnsibleLimit} \
            --diff \
            --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}'
        """,
        label: "Start or restart the container"
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
