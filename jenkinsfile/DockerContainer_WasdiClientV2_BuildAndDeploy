pipeline {
  agent any

  environment {
    sCurrentAnsibleInventory = env.sAnsibleInventory.split('-')[0].toLowerCase()
    sCurrentEnvironmentLower = env.sAnsibleLimit.split('-')[0].toLowerCase()
    sCurrentEnvironmentUpper = env.sAnsibleLimit.split('-')[0].toUpperCase()
    sCurrentRevision         = "${env.BUILD_ID}"
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '3', daysToKeepStr: '30'))
    disableConcurrentBuilds()
  }

  tools {
    nodejs "WASDI_NODEJS_V18"
  }

  stages {
    stage('DEBUG') {
      steps {
        echo "env.GIT_BRANCH        = " + env.GIT_BRANCH
        echo "env.PYTHONPATH        = " + env.PYTHONPATH
        echo "env.sAnsibleLimit     = " + env.sAnsibleLimit
        echo "env.sCurrentRevision  = " + env.sCurrentRevision
        echo "env.sSourceBranch     = " + env.sSourceBranch
        echo "env.sWasdiAnsiblePath = " + env.sWasdiAnsiblePath
        echo "env.WORKSPACE         = " + env.WORKSPACE

        sh script: "pwd", label: "Current location"

        sh script: "which node", label: "Tool > node > path"
        sh script: "node --version", label: "Tool > node > current version"
        sh script: "which npm", label: "Tool > npm > path"
        sh script: "npm --version", label: "Tool > npm > current version"
        sh script: "which sass", label: "Tool > sass > path"
        sh script: "sass --version", label: "Tool > sass > current version"
      }
    }

    stage('UPDATE THE ANSIBLE VAULT PASSWORD') {
      steps {
        withCredentials([
          string(credentialsId: 'sWasdiAnsibleVaultFile', variable: 'sWasdiAnsibleVaultFile'),
          string(credentialsId: 'sWasdiAnsibleVaultPassword', variable: 'sWasdiAnsibleVaultPassword'),
        ]) {
          sh script: """
            mkdir --parents `dirname ${sWasdiAnsibleVaultFile}`
            echo '${sWasdiAnsibleVaultPassword}' > ${sWasdiAnsibleVaultFile}
          """,
          label: "Update the Ansible vault password"
        }
      }
    }

    stage('UPDATE THE ANSIBLE CODE') {
      steps {
        dir("${env.sWasdiAnsiblePath}") {
          checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'sWasdiGitHubWasdiCloudSsh', url: "${env.sWasdiAnsibleGitRepositorySshUrl}"]]])
        }
      }
    }

    stage('CLONE THE GIT REPOSITORY') {
      steps {
        sh script: """
          mkdir client_v2
          cd client_v2
          git clone https://github.com/wasdi-cloud/wasdiClient2.git .
        """,
        label: "Clone the GIT repository"
      }
    }

    stage('NPM - INSTALL MODULES') {
      steps {
        sh script: """
          cd client_v2
          npm install
        """,
        label: "Install NodeJS modules from package.json"
      }
    }

    stage('ANSIBLE - PREPARE THE CLIENT (RENDER TEMPLATES, DELETE TEMPLATES, ETC)') {
      steps {
        sh script: """
            cd ${env.sWasdiAnsiblePath}
            ansible-playbook playbooks/prepareWasdiClient_v2.yml \
              --inventory inventories/${env.sCurrentAnsibleInventory}.yml \
              --limit ${env.sAnsibleLimit} \
              --diff \
              --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}/client_v2'
        """,
        label: "Prepare the WASDI client"
      }
    }

    stage('NPM - BUILD') {
      steps {
        sh script: """
          cd client_v2
          ng build --configuration production
        """,
        label: "Build WASDI client"
      }
    }

    stage('BUILD THE CONTAINER') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook \
            playbooks/buildWasdiDockerContainer.yml \
            --inventory inventories/${env.sCurrentAnsibleInventory}.yml \
            --limit ${env.sCurrentEnvironmentLower} \
            --diff \
            --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE} sDeployWasdiClientV2Container=true'
        """,
        label: "Build the container"
      }
    }

    stage('DEPLOY THE CONTAINER AND ITS RUN ELEMENTS') {
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          script {
            try {
              sh script: """
                  cd ${env.sWasdiAnsiblePath}
                  ansible-playbook \
                    playbooks/deployDockerContainerWasdiClientV2.yml \
                    --inventory inventories/${env.sCurrentAnsibleInventory}.yml \
                    --limit ${env.sAnsibleLimit} \
                    --diff \
                    --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}'
              """,
              label: "Deploy the container and its run elements"
            } catch (oError) {
              echo oError.getMessage()
              throw oError
            }
          }
        }
      }
    }

    stage('START OR RESTART THE CONTAINER') {
      steps {
        catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
          script {
            try {
              sh script: """
                cd ${env.sWasdiAnsiblePath}
                ansible-playbook \
                    playbooks/runDockerContainerWasdiClientV2.yml \
                    --inventory inventories/${env.sCurrentAnsibleInventory}.yml \
                    --limit ${env.sAnsibleLimit} \
                    --diff \
                    --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}'
              """,
              label: "Start or restart the container"
            } catch (oError) {
              echo oError.getMessage()
              throw oError
            }
          }
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
