pipeline {
  agent any

  environment {
    sCurrentAnsibleInventory = env.sAnsibleInventory.split('-')[0].toLowerCase()
    sCurrentEnvironmentLower = env.sAnsibleLimit.split('-')[0].toLowerCase()
    sCurrentEnvironmentUpper = env.sAnsibleLimit.split('-')[0].toUpperCase()
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '3', daysToKeepStr: '30'))
    disableConcurrentBuilds()
  }

  stages {
    stage('DEBUG') {
      steps {
        echo "env.GIT_BRANCH               = " + env.GIT_BRANCH
        echo "env.sAnsibleLimit            = " + env.sAnsibleLimit
        echo "env.sCurrentEnvironmentLower = " + env.sCurrentEnvironmentLower
        echo "env.sCurrentEnvironmentUpper = " + env.sCurrentEnvironmentUpper
        echo "env.sCurrentRevision         = " + env.sCurrentRevision
        echo "env.sSourceBranch            = " + env.sSourceBranch
        echo "env.sWasdiAnsiblePath        = " + env.sWasdiAnsiblePath
        echo "env.WORKSPACE                = " + env.WORKSPACE

        sh script: "pwd", label: "Current location"
      }
    }

    stage('UPDATE THE ANSIBLE VAULT PASSWORD') {
      steps {
        withCredentials([
          string(credentialsId: 'sWasdiAnsibleVaultFile', variable: 'sWasdiAnsibleVaultFile'),
          string(credentialsId: 'sWasdiAnsibleVaultPassword', variable: 'sWasdiAnsibleVaultPassword'),
        ]) {
          sh script: """
            mkdir --parents `dirname ${sWasdiAnsibleVaultFile}`
            echo '${sWasdiAnsibleVaultPassword}' > ${sWasdiAnsibleVaultFile}
          """,
          label: "Update the Ansible vault password"
        }
      }
    }

    stage('UPDATE THE ANSIBLE CODE') {
      steps {
        dir("${env.sWasdiAnsiblePath}") {
          checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'sWasdiGitHubWasdiCloud', url: "${env.sWasdiAnsibleGitRepositoryUrl}"]]])
        }
      }
    }

    stage('DEPLOY THE CONTAINER AND ITS RUN ELEMENTS') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook \
            playbooks/deployDockerContainerWasdiInfluxDbGrafana.yml \
            --inventory inventories/${env.sCurrentAnsibleInventory}.yml \
            --limit ${env.sAnsibleLimit} \
            --diff \
            --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}'
        """,
        label: "Deploy the container and its run element"
      }
    }

    stage('START OR RESTART THE CONTAINER') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook \
            playbooks/runDockerContainerWasdiInfluxDbGrafana.yml \
            --inventory inventories/${env.sCurrentAnsibleInventory}.yml \
            --limit ${env.sAnsibleLimit} \
            --diff \
            --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}'
        """,
        label: "Start or restart the container"
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
