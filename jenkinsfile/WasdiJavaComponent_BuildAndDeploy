def getCurrentRevision(environmentName) {
    if ( "PROD".equals(environmentName) ) {
        return "0.0.${env.BUILD_ID}"
    } else {
        return "0.0.${env.BUILD_ID}-SNAPSHOT"
    }
}

pipeline {
  agent any

  environment {
    currentRevision = getCurrentRevision(env.targetedEnvironment)
    mavenSettingsFile = "/etc/jenkins/maven_settings.xml"
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '3', daysToKeepStr: '30'))
    disableConcurrentBuilds()
  }

  tools {
    maven "WASDI_MAVEN"
  }

  stages {
    stage('DEBUG') {
      steps {
        sh script: "pwd", label: "Current location"
        sh script: "cat pom.xml", label: "Content of the main pom.xml file"

        echo "env.currentRevision = " + env.currentRevision
        echo "env.sourceBranch = " + env.sourceBranch
        echo "env.targetedEnvironment = " + env.targetedEnvironment
        echo "env.GIT_BRANCH = " + env.GIT_BRANCH
        echo "env.WORKSPACE = " + env.WORKSPACE

        sh script: "mvn --version", label: "Tool > mvn > current version"
      }
    }

    stage('INITIALIZATION') {
      steps {
        script {
          currentBuild.displayName = "WASDI ${currentRevision}"
          currentBuild.description = "WASDI - BUILD OF JAVA PACKAGES (.jar, .war, etc) + DEPLOY THEM"
        }
      }
    }

    stage('MAVEN - BUILD') {
      steps {
        sh script: "mvn --batch-mode --settings ${mavenSettingsFile} --activate-profiles wasdi-${env.targetedEnvironment.toLowerCase()} --define revision=${currentRevision} --define currentEnvironment=${env.targetedEnvironment} --define skipTests --update-snapshots clean package", label: "Create packages"
      }
    }

    stage('MAVEN - EXECUTE TEST') {
      steps {
        sh script: "mvn --batch-mode --settings ${mavenSettingsFile} --activate-profiles wasdi-${env.targetedEnvironment.toLowerCase()} --define revision=${currentRevision} --define currentEnvironment=${env.targetedEnvironment} --update-snapshots test", label: "Execute unit test"
      }
    }

    stage('MAVEN - UPLOAD IN NEXUS') {
      steps {
        script {
          if ( env.targetedEnvironment.toLowerCase() == 'prod' ) {
            sh script: "mvn --batch-mode --settings ${mavenSettingsFile} --activate-profiles wasdi-${env.targetedEnvironment.toLowerCase()} --define revision=${currentRevision} --define currentEnvironment=${env.targetedEnvironment} --define skipTests --update-snapshots deploy scm:tag", label: "Deploy in Nexus"
          } else {
            sh script: "mvn --batch-mode --settings ${mavenSettingsFile} --activate-profiles wasdi-${env.targetedEnvironment.toLowerCase()} --define revision=${currentRevision} --define currentEnvironment=${env.targetedEnvironment} --define skipTests --update-snapshots deploy", label: "Deploy in Nexus"
          }
        }
      }
    }

    stage('DEPLOYMENT') {
      steps {
        sh script: "cd /opt/companyExploitation/specific/automation/continuousDelivery/ansible/ && ansible-playbook playbooks/deployWasdiArtifact.yml --inventory inventories/wasdi.yml --limit ${env.targetedEnvironment.toLowerCase()} --diff --extra-vars 'wasdiDeploymentAll=True currentEnvironment=${env.targetedEnvironment.toLowerCase()} currentRevision=${currentRevision} sourceDirectory=${WORKSPACE}'", label: "Execute ansible-playbook"
      }
    }
  }
  post {
    always {
      cleanWs()
    }
  }
}
