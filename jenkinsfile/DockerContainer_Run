def getContainersToRestart() {
  def aContainersToRestart = []

  if ( env.sWasdiLauncher.toBoolean() ) {
    aContainersToRestart.add('wrappersnap/wasdishared')
    aContainersToRestart.add('wrappersnap/launcher')
  }

  if ( env.sWasdiScheduler.toBoolean() ) {
    aContainersToRestart.add('wrappersnap/wasdishared')
    aContainersToRestart.add('scheduler')
  }

  if ( env.sWasdiTomcatOgcProcessesServer.toBoolean() ) {
    aContainersToRestart.add('wrappersnap/wasdishared')
    aContainersToRestart.add('ogcprocesses/processes')
  }

  if ( env.sWasdiTomcatOpenEoServer.toBoolean() ) {
    aContainersToRestart.add('wrappersnap/wasdishared')
    aContainersToRestart.add('openeo-java-server')
  }

  if ( env.sWasdiTomcatWasdiWebServer.toBoolean() ) {
    aContainersToRestart.add('wrappersnap/wasdishared')
    aContainersToRestart.add('wasdiwebserver')
  }

  if ( env.sWasdiTrigger.toBoolean() ) {
    aContainersToRestart.add('wrappersnap/wasdishared')
    aContainersToRestart.add('libraries/jwasdilib/jwasdilib')
    aContainersToRestart.add('wasditrigger')
  }

  aContainersToRestart.unique()

  if ( aContainersToRestart.size() > 0 ) {
    return '--projects ' + aContainersToRestart.join(',') + ' --also-make'
  }

  return ''
}

pipeline {
  agent any

  environment {
    sCurrentRevision = "${env.BUILD_ID}"
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '3', daysToKeepStr: '365'))
    disableConcurrentBuilds()
  }

  stages {
    stage('DEBUG') {
      steps {
        echo "env.GIT_BRANCH                    = " + env.GIT_BRANCH
        echo "env.sAnsibleInventory             = " + env.sAnsibleInventory
        echo "env.sAnsibleLimit                 = " + env.sAnsibleLimit
        echo "env.sCurrentRevision              = " + env.sCurrentRevision
        echo "env.sSourceBranch                 = " + env.sSourceBranch
        echo "env.sWasdiAnsibleGitRepositoryUrl = " + env.sWasdiAnsibleGitRepositoryUrl
        echo "env.sWasdiAnsiblePath             = " + env.sWasdiAnsiblePath
        echo "env.WORKSPACE                     = " + env.WORKSPACE

        sh script: "pwd", label: "Current location"
      }
    }

    stage('UPDATE THE ANSIBLE VAULT PASSWORD') {
      steps {
        withCredentials([
          string(credentialsId: 'sWasdiAnsibleVaultFile', variable: 'sWasdiAnsibleVaultFile'),
          string(credentialsId: 'sWasdiAnsibleVaultPassword', variable: 'sWasdiAnsibleVaultPassword'),
        ]) {
          sh script: """
            mkdir --parents `dirname ${sWasdiAnsibleVaultFile}`
            echo '${sWasdiAnsibleVaultPassword}' > ${sWasdiAnsibleVaultFile}
          """,
          label: "Update the Ansible vault password"
        }
      }
    }

    stage('UPDATE THE ANSIBLE CODE') {
      steps {
        dir("${env.sWasdiAnsiblePath}") {
          checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: 'sWasdiGitHubWasdiCloudSsh', url: "${env.sWasdiAnsibleGitRepositorySshUrl}"]]])
        }
      }
    }

    stage('PREPARE A VARIABLE FILE') {
      steps {
        sh script: """
            echo '{' > DockerContainer_Run_Variables.json
            echo '  "sDeployWasdiClientContainer": "'${env.sDeployWasdiClientContainer}'",' >> DockerContainer_Run_Variables.json
            echo '}' >> DockerContainer_Run_Variables.json
            cat ${WORKSPACE}/DockerContainer_Run_Variables.json
        """
      }
    }

    stage('START OR RESTART THE CONTAINER(S)') {
      steps {
        sh script: """
          cd ${env.sWasdiAnsiblePath}
          ansible-playbook \
            playbooks/runDockerContainer.yml \
            --inventory inventories/${env.sAnsibleInventory}.yml \
            --limit ${env.sAnsibleLimit} \
            --diff \
            --check \
            --extra-vars 'sCurrentRevision=${env.sCurrentRevision} sSourceDirectory=${WORKSPACE}' \
            --extra-vars "@${WORKSPACE}/DockerContainer_Run_Variables.json"
        """,
        label: "Start or restart the container(s)"
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
