FROM ubuntu:22.04


MAINTAINER "WASDI SARL"


# From now, all commands executed are executed with the user 'root'
USER root


# This environment variable is setted to avoid packages to ask a confirmation
ENV DEBIAN_FRONTEND="noninteractive"

# This variable is setted to make Python stop creating files '.pyc'
ENV PYTHONDONTWRITEBYTECODE="False"

# This variable is setted to force the 'print' method of Python to flush message directly
ENV PYTHONUNBUFFERED="True"

# This variable is setted to set the default editor
ENV EDITOR="nano"


# RUN generic to create user, group, directories, etc
RUN groupadd --gid {{ sWasdiSystemGroupId }} --non-unique {{ sWasdiSystemGroupName }} && \
    useradd --create-home --home-dir {{ sWasdiSystemUserHome }} --uid {{ sWasdiSystemUserId }} --gid {{ sWasdiSystemGroupId }} --non-unique --shell /bin/bash {{ sWasdiSystemUserName }} && \
    mkdir --parents \
        {{ sWasdiSystemUserHome }}/.ssh \
        {{ sWasdiSoftwareRootDirectoryPath }} && \
    chown {{ sWasdiSystemUserName }}:{{ sWasdiSystemGroupName }} \
        {{ sWasdiSystemUserHome }}/.ssh && \
    chown {{ sWasdiSoftwareRootDirectoryOwner }}:{{ sWasdiSoftwareRootDirectoryGroup }} \
        {{ sWasdiSoftwareRootDirectoryPath }} && \
    chmod 700 \
        {{ sWasdiSystemUserHome }}/.ssh && \
    chmod {{ sWasdiSoftwareRootDirectoryMode }} \
        {{ sWasdiSoftwareRootDirectoryPath }}


# RUN generic to update the system and install common packages
RUN echo "APT::Install-Suggests \"0\";" > /etc/apt/apt.conf.d/99local && \
    echo "APT::Install-Recommends \"0\";" >> /etc/apt/apt.conf.d/99local && \
    echo "APT::Get::Assume-Yes \"true\";" >> /etc/apt/apt.conf.d/99local && \
    echo "APT::Keep-Downloaded-Packages \"false\";" >> /etc/apt/apt.conf.d/99local && \
    echo "Dpkg::Options::--force-confold;" >> /etc/apt/apt.conf.d/99local && \
    apt-get update && \
    apt-get install \
        ca-certificates && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy main restricted universe multiverse"           > /etc/apt/sources.list && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy-updates main restricted universe multiverse"  >> /etc/apt/sources.list && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy-security main restricted universe multiverse" >> /etc/apt/sources.list && \
    apt-get update && \
    apt-get dist-upgrade && \
    apt-get install \
        curl \
        nano \
        tar \
        unzip \
        wget && \
    rm --recursive --force /var/lib/apt/lists/* && \
    find / -xdev -type d -name __pycache__ -exec rm --recursive --force {} +


# RUN specific to install Jenkins
RUN apt-get update && \
    apt-get install \
        acl \
        fontconfig \
        git \
        libfreetype6 \
        openssh-client \
        python3 \
        python3-venv \
        rsync && \
    mkdir --parents \
        {{ sWasdiDataPartitionRootDirectoryPath }} \
        {{ sWasdiDataRootDirectoryPath }} \
        {{ sWasdiMavenDataRootDirectoryPath }} \
        {{ sWasdiMavenLocalRepositoryDirectoryPath }} && \
    chown {{ sWasdiDataPartitionRootDirectoryOwner }}:{{ sWasdiDataPartitionRootDirectoryGroup }} \
        {{ sWasdiDataPartitionRootDirectoryPath }} && \
    chmod {{ sWasdiDataPartitionRootDirectoryMode }} \
        {{ sWasdiDataPartitionRootDirectoryPath }} && \
    chown {{ sWasdiDataRootDirectoryOwner }}:{{ sWasdiDataRootDirectoryGroup }} \
        {{ sWasdiDataRootDirectoryPath }} && \
    chmod {{ sWasdiDataRootDirectoryMode }} \
        {{ sWasdiDataRootDirectoryPath }} && \
    chown {{ sWasdiMavenDataRootDirectoryGroup }}:{{ sWasdiMavenDataRootDirectoryOwner }} \
        {{ sWasdiMavenDataRootDirectoryPath }} && \
    chmod {{ sWasdiMavenDataRootDirectoryMode }} \
        {{ sWasdiMavenDataRootDirectoryPath }} && \
    chown {{ sWasdiMavenLocalRepositoryDirectoryGroup }}:{{ sWasdiMavenLocalRepositoryDirectoryOwner }} \
        {{ sWasdiMavenLocalRepositoryDirectoryPath }} && \
    chmod {{ sWasdiMavenLocalRepositoryDirectoryMode }} \
        {{ sWasdiMavenLocalRepositoryDirectoryPath }} && \
    rm --recursive --force /var/lib/apt/lists/* && \
    find / -xdev -type d -name __pycache__ -exec rm --recursive --force {} +


# From now, all commands executed are executed with the user '{{ sWasdiSystemUserName }}'
USER {{ sWasdiSystemUserName }}


# RUN specific to install JDK 8
RUN mkdir --parents \
        {{ sWasdiJdk8RootDirectoryPath }} \
        {{ sWasdiJdk8RootDirectoryPath }}/{{ sWasdiJdk8Version }} && \
    chown {{ sWasdiJdk8RootDirectoryOwner }}:{{ sWasdiJdk8RootDirectoryGroup }} \
        {{ sWasdiJdk8RootDirectoryPath }} \
        {{ sWasdiJdk8RootDirectoryPath }}/{{ sWasdiJdk8Version }} && \
    chmod {{ sWasdiJdk8RootDirectoryMode }} \
        {{ sWasdiJdk8RootDirectoryPath }} \
        {{ sWasdiJdk8RootDirectoryPath }}/{{ sWasdiJdk8Version }} && \
    wget \
        --no-verbose \
        --output-document /tmp/{{ sWasdiJdk8SourceUrl | basename }} \
        --progress=bar:force:noscroll \
        --show-progress \
        {{ sWasdiJdk8SourceUrl }} --output-document /tmp/{{ sWasdiJdk8SourceUrl | basename }} && \
    tar \
        --directory {{ sWasdiJdk8RootDirectoryPath }}/{{ sWasdiJdk8Version }} \
        --extract \
        --file /tmp/{{ sWasdiJdk8SourceUrl | basename }} \
        --strip-components=1 && \
    ln --symbolic {{ sWasdiJdk8RootDirectoryPath }}/{{ sWasdiJdk8Version }} {{ sWasdiJdk8RootDirectoryPath }}/latest && \
    rm --force \
        /tmp/{{ sWasdiJdk8SourceUrl | basename }}


# RUN specific to install JDK 17
RUN mkdir --parents \
        {{ sWasdiJdk17RootDirectoryPath }} \
        {{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }} && \
    chown {{ sWasdiJdk17RootDirectoryOwner }}:{{ sWasdiJdk17RootDirectoryGroup }} \
        {{ sWasdiJdk17RootDirectoryPath }} \
        {{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }} && \
    chmod {{ sWasdiJdk17RootDirectoryMode }} \
        {{ sWasdiJdk17RootDirectoryPath }} \
        {{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }} && \
    wget \
        --no-verbose \
        --output-document /tmp/{{ sWasdiJdk17SourceUrl | basename }} \
        --progress=bar:force:noscroll \
        --show-progress \
        {{ sWasdiJdk17SourceUrl }} --output-document /tmp/{{ sWasdiJdk17SourceUrl | basename }} && \
    tar \
        --directory {{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }} \
        --extract \
        --file /tmp/{{ sWasdiJdk17SourceUrl | basename }} \
        --strip-components=1 && \
    ln --symbolic {{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }} {{ sWasdiJdk17RootDirectoryPath }}/latest && \
    rm --force \
        /tmp/{{ sWasdiJdk17SourceUrl | basename }}


# RUN specific to install Maven
# -> we do not install the apt package
#    to avoid to install opendjk with apt
RUN mkdir --parents \
        {{ sWasdiMavenRootDirectoryPath }} \
        {{ sWasdiMavenRootDirectoryPath }}/{{ sWasdiMavenVersion }} && \
    chown {{ sWasdiMavenRootDirectoryOwner }}:{{ sWasdiMavenRootDirectoryGroup }} \
        {{ sWasdiMavenRootDirectoryPath }} \
        {{ sWasdiMavenRootDirectoryPath }}/{{ sWasdiMavenVersion }} && \
    chmod {{ sWasdiMavenRootDirectoryMode }} \
        {{ sWasdiMavenRootDirectoryPath }} \
        {{ sWasdiMavenRootDirectoryPath }}/{{ sWasdiMavenVersion }} && \
    wget \
        --no-verbose \
        --output-document /tmp/{{ sWasdiMavenSourceUrl | basename }} \
        --progress=bar:force:noscroll \
        --show-progress \
        {{ sWasdiMavenSourceUrl }} --output-document /tmp/{{ sWasdiMavenSourceUrl | basename }} && \
    tar \
        --directory {{ sWasdiMavenRootDirectoryPath }}/{{ sWasdiMavenVersion }} \
        --extract \
        --file /tmp/{{ sWasdiMavenSourceUrl | basename }} \
        --strip-components=1 && \
    ln --symbolic {{ sWasdiMavenRootDirectoryPath }}/{{ sWasdiMavenVersion }} {{ sWasdiMavenRootDirectoryPath }}/latest && \
    rm --force \
        /tmp/{{ sWasdiMavenSourceUrl | basename }}

ENV PATH="{{ sWasdiMavenRootDirectoryPath }}/latest/bin:${PATH}"


# RUN specific to install NodeJS 18
RUN mkdir --parents \
        {{ sWasdiNodeJs18RootDirectoryPath }} \
        {{ sWasdiNodeJs18RootDirectoryPath }}/{{ sWasdiNodeJs18Version }} && \
    chown {{ sWasdiNodeJs18RootDirectoryOwner }}:{{ sWasdiNodeJs18RootDirectoryGroup }} \
        {{ sWasdiNodeJs18RootDirectoryPath }} \
        {{ sWasdiNodeJs18RootDirectoryPath }}/{{ sWasdiNodeJs18Version }} && \
    chmod {{ sWasdiNodeJs18RootDirectoryMode }} \
        {{ sWasdiNodeJs18RootDirectoryPath }} \
        {{ sWasdiNodeJs18RootDirectoryPath }}/{{ sWasdiNodeJs18Version }} && \
    wget \
        --no-verbose \
        --output-document /tmp/{{ sWasdiNodeJs18SourceUrl | basename }} \
        --progress=bar:force:noscroll \
        --show-progress \
        {{ sWasdiNodeJs18SourceUrl }} --output-document /tmp/{{ sWasdiNodeJs18SourceUrl | basename }} && \
    tar \
        --directory {{ sWasdiNodeJs18RootDirectoryPath }}/{{ sWasdiNodeJs18Version }} \
        --extract \
        --file /tmp/{{ sWasdiNodeJs18SourceUrl | basename }} \
        --strip-components=1 && \
    ln --symbolic {{ sWasdiNodeJs18RootDirectoryPath }}/{{ sWasdiNodeJs18Version }} {{ sWasdiNodeJs18RootDirectoryPath }}/latest && \
    rm --force \
        /tmp/{{ sWasdiNodeJs18SourceUrl | basename }}

ENV PATH="{{ sWasdiNodeJs18RootDirectoryPath }}/latest/bin:${PATH}"


# RUN specific to install Jenkins
RUN mkdir --parents \
        {{ sWasdiJenkinsRootDirectoryPath }} \
        {{ sWasdiJenkinsRootDirectoryPath }}/{{ sWasdiJenkinsVersion }} \
        {{ sWasdiSoftwareRootDirectoryPath }}/ansible \
        {{ sWasdiSoftwareRootDirectoryPath }}/venv && \
    chown {{ sWasdiJenkinsRootDirectoryOwner }}:{{ sWasdiJenkinsRootDirectoryGroup }} \
        {{ sWasdiJenkinsRootDirectoryPath }} \
        {{ sWasdiJenkinsRootDirectoryPath }}/{{ sWasdiJenkinsVersion }} \
        {{ sWasdiSoftwareRootDirectoryPath }}/ansible \
        {{ sWasdiSoftwareRootDirectoryPath }}/venv && \
    chmod {{ sWasdiJenkinsRootDirectoryMode }} \
        {{ sWasdiJenkinsRootDirectoryPath }} \
        {{ sWasdiJenkinsRootDirectoryPath }}/{{ sWasdiJenkinsVersion }} \
        {{ sWasdiSoftwareRootDirectoryPath }}/ansible \
        {{ sWasdiSoftwareRootDirectoryPath }}/venv && \
    python3 -m venv --system-site-packages {{ sWasdiSoftwareRootDirectoryPath }}/venv && \
    {{ sWasdiSoftwareRootDirectoryPath }}/venv/bin/pip3 install --no-cache-dir --no-compile \
        ansible \
        jmespath \
        pymongo && \
    wget \
        --no-verbose \
        --output-document /tmp/{{ sWasdiJenkinsSourceUrl | basename }} \
        --progress=bar:force:noscroll \
        --show-progress \
        {{ sWasdiJenkinsSourceUrl }} --output-document {{ sWasdiJenkinsRootDirectoryPath }}/{{ sWasdiJenkinsVersion }}/{{ sWasdiJenkinsSourceUrl | basename }}

ENV PATH="{{ sWasdiSoftwareRootDirectoryPath }}/venv/bin:{{ sWasdiNodeJs18RootDirectoryPath }}/latest/bin:${PATH}"


# From now, all commands executed are executed with the user '{{ sWasdiSystemUserName }}'
USER {{ sWasdiSystemUserName }}


# Set the workdir
WORKDIR {{ sWasdiJenkinsRootDirectoryPath }}/{{ sWasdiJenkinsVersion }}


# Copy data
COPY --chown={{ sWasdiSystemUserName }}:{{ sWasdiSystemGroupName }} ./dataToCopy/home_.ssh_config {{ sWasdiSystemUserHome }}/.ssh/config
COPY --chown={{ sWasdiSystemUserName }}:{{ sWasdiSystemGroupName }} ./dataToCopy/home_.ssh_id_ed25519 {{ sWasdiSystemUserHome }}/.ssh/id_ed25519
COPY --chown={{ sWasdiSystemUserName }}:{{ sWasdiSystemGroupName }} ./dataToCopy/docker-entrypoint.sh {{ sWasdiJenkinsRootDirectoryPath }}/docker-entrypoint.sh
COPY --chown={{ sWasdiSystemUserName }}:{{ sWasdiSystemGroupName }} ./dataToCopy/maven_settings.xml {{ sWasdiMavenRootDirectoryPath }}/{{ sWasdiMavenVersion }}/conf/settings.xml


# Start the container
ENTRYPOINT [ \
    "/bin/bash", \
    "{{ sWasdiJenkinsRootDirectoryPath }}/docker-entrypoint.sh", \
    "{{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }}/bin/java", \
    "-jar", \
    "{{ sWasdiJenkinsRootDirectoryPath }}/{{ sWasdiJenkinsVersion }}/{{ sWasdiJenkinsSourceUrl | basename }}" \
]
