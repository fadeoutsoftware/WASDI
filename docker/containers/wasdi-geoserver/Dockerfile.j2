FROM ubuntu:22.04


MAINTAINER "WASDI SARL"


# From now, all commands executed are executed with the user 'root'
USER root


# This environment variable is setted to avoid packages to ask a confirmation
ENV DEBIAN_FRONTEND="noninteractive"

# This variable is setted to make Python stop creating files '.pyc'
ENV PYTHONDONTWRITEBYTECODE="False"

# This variable is setted to force the 'print' method of Python to flush message directly
ENV PYTHONUNBUFFERED="True"


# RUN generic to create user, group, directories, etc
RUN groupadd --gid {{ sWasdiSystemGroupId }} --non-unique {{ sWasdiSystemGroupName }} && \
    useradd --create-home --home-dir {{ sWasdiSystemUserHome }} --uid {{ sWasdiSystemUserId }} --gid {{ sWasdiSystemGroupId }} --non-unique --shell /bin/bash {{ sWasdiSystemUserName }} && \
    mkdir --parents \
      {{ sWasdiSoftwareRootDirectoryPath }} \
      /data && \
    chown {{ sWasdiSoftwareRootDirectoryOwner }}:{{ sWasdiSoftwareRootDirectoryGroup }} \
      {{ sWasdiSoftwareRootDirectoryPath }} \
      /data && \
    chmod {{ sWasdiSoftwareRootDirectoryMode }} \
      {{ sWasdiSoftwareRootDirectoryPath }} \
      /data


# RUN generic to update the system and install common packages
RUN echo "APT::Install-Suggests \"0\";" > /etc/apt/apt.conf.d/99local && \
    echo "APT::Install-Recommends \"0\";" >> /etc/apt/apt.conf.d/99local && \
    echo "APT::Get::Assume-Yes \"true\";" >> /etc/apt/apt.conf.d/99local && \
    echo "APT::Keep-Downloaded-Packages \"false\";" >> /etc/apt/apt.conf.d/99local && \
    echo "Dpkg::Options::--force-confold;" >> /etc/apt/apt.conf.d/99local && \
    apt-get update && \
    apt-get install \
        ca-certificates && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy main restricted universe multiverse"          > /etc/apt/sources.list && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy-updates main restricted universe multiverse"  >> /etc/apt/sources.list && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy-security main restricted universe multiverse" >> /etc/apt/sources.list && \
    apt-get update && \
    apt-get dist-upgrade && \
    apt-get install \
        curl \
        nano \
        tar \
        unzip \
        wget && \
    rm --recursive --force /var/lib/apt/lists/* && \
    find / -xdev -type d -name __pycache__ -exec rm --recursive --force {} +


# From now, all commands executed are executed with the user '{{ sWasdiSystemUserName }}'
USER {{ sWasdiSystemUserName }}


# RUN specific to install the JRE
RUN mkdir --parents {{ sWasdiJreRootDirectoryPath }} \
        {{ sWasdiJre17RootDirectoryPath }} \
        {{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }} && \
    chown {{ sWasdiJreRootDirectoryOwner }}:{{ sWasdiJreRootDirectoryGroup }} {{ sWasdiJreRootDirectoryPath }} && \
    chmod {{ sWasdiJreRootDirectoryMode }} {{ sWasdiJreRootDirectoryPath }} && \
    chown {{ sWasdiJre17RootDirectoryOwner }}:{{ sWasdiJre17RootDirectoryGroup }} {{ sWasdiJre17RootDirectoryPath }} && \
    chmod {{ sWasdiJre17RootDirectoryMode }} {{ sWasdiJre17RootDirectoryPath }} && \
    chown {{ sWasdiJre17RootDirectoryOwner }}:{{ sWasdiJre17RootDirectoryGroup }} {{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }} && \
    chmod {{ sWasdiJre17RootDirectoryMode }} {{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }} && \
    wget --no-verbose --show-progress --progress=bar:force:noscroll {{ sWasdiJre17SourceUrl }} --output-document /tmp/{{ sWasdiJre17SourceUrl | basename }} && \
    tar --extract --strip-components=1 --file /tmp/{{ sWasdiJre17SourceUrl | basename }} --directory {{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }} && \
    rm --force /tmp/{{ sWasdiJre17SourceUrl | basename }}

ENV JAVA_HOME="{{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }}"
ENV PATH="{{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }}/bin:${PATH}"


# From now, all commands executed are executed with the user 'root'
USER root


# RUN specific to install Geoserver
RUN apt-get update && \
    apt-get install \
        fontconfig \
        libfreetype6 && \
    rm --recursive --force /var/lib/apt/lists/* && \
    find / -xdev -type d -name __pycache__ -exec rm --recursive --force {} +


# From now, all commands executed are executed with the user '{{ sWasdiSystemUserName }}'
USER {{ sWasdiSystemUserName }}


# RUN specific to install Geoserver
RUN mkdir --parents {{ sWasdiGeoserverRootDirectoryPath }} \
        {{ sWasdiGeoserverRootDirectoryPath }} \
        {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }} \
        {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01 \
        /tmp/geoserverPlugin && \
    chown {{ sWasdiGeoserverRootDirectoryOwner }}:{{ sWasdiGeoserverRootDirectoryGroup }} {{ sWasdiGeoserverRootDirectoryPath }} && \
    chmod {{ sWasdiGeoserverRootDirectoryMode }} {{ sWasdiGeoserverRootDirectoryPath }} && \
    chown {{ sWasdiGeoserverRootDirectoryOwner }}:{{ sWasdiGeoserverRootDirectoryGroup }} {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }} && \
    chmod {{ sWasdiGeoserverRootDirectoryMode }} {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }} && \
    wget --no-verbose --show-progress --progress=bar:force:noscroll {{ sWasdiGeoserverSourceUrl }} --output-document /tmp/{{ sWasdiGeoserverSourceUrl | basename }} && \
    unzip /tmp/{{ sWasdiGeoserverSourceUrl | basename }} -d {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }} && \
    rm --force /tmp/{{ sWasdiGeoserverSourceUrl | basename }} && \
    wget --no-verbose --show-progress --progress=bar:force:noscroll {{ sWasdiGeoserverPluginImagePyramidSourceUrl }} --output-document /tmp/{{ sWasdiGeoserverPluginImagePyramidSourceUrl | basename }} && \
    unzip /tmp/{{ sWasdiGeoserverPluginImagePyramidSourceUrl | basename }} -d /tmp/geoserverPlugin && \
    mv /tmp/geoserverPlugin/*.jar {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}/webapps/geoserver/WEB-INF/lib/. && \
    rm --force /tmp/{{ sWasdiGeoserverPluginImagePyramidSourceUrl | basename }} && \
    rm --recursive --force /tmp/geoserverPlugin

ENV PATH="{{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}/bin:${PATH}"


# Set the workdir
WORKDIR {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}


# Copy data
COPY --chown={{ sWasdiSystemUserName }}:{{ sWasdiSystemGroupName }} ./dataToCopy/docker-entrypoint.sh /docker-entrypoint.sh


# Start the container
ENTRYPOINT ["/bin/bash", "/docker-entrypoint.sh"]
CMD ["{{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}/bin/startup.sh"]
