FROM ubuntu:22.04


MAINTAINER "WASDI SARL"


# From now, all commands executed are executed with the user 'root'
USER root


# This environment variable is setted to avoid packages to ask a confirmation
ENV DEBIAN_FRONTEND="noninteractive"

# This variable is setted to make Python stop creating files '.pyc'
ENV PYTHONDONTWRITEBYTECODE="False"

# This variable is setted to force the 'print' method of Python to flush message directly
ENV PYTHONUNBUFFERED="True"

# This variable is setted to set the default editor
ENV EDITOR="nano"


# RUN generic to create user, group, directories, etc
RUN groupadd --gid {{ sWasdiSystemGroupId }} --non-unique {{ sWasdiSystemGroupName }} && \
    useradd --create-home --home-dir {{ sWasdiSystemUserHome }} --uid {{ sWasdiSystemUserId }} --gid {{ sWasdiSystemGroupId }} --non-unique --shell /bin/bash {{ sWasdiSystemUserName }} && \
    mkdir --parents \
        {{ sWasdiSystemUserHome }}/.ssh \
        {{ sWasdiSoftwareRootDirectoryPath }} && \
    chown {{ sWasdiSystemUserName }}:{{ sWasdiSystemGroupName }} \
        {{ sWasdiSystemUserHome }}/.ssh && \
    chown {{ sWasdiSoftwareRootDirectoryOwner }}:{{ sWasdiSoftwareRootDirectoryGroup }} \
        {{ sWasdiSoftwareRootDirectoryPath }} && \
    chmod 700 \
        {{ sWasdiSystemUserHome }}/.ssh && \
    chmod {{ sWasdiSoftwareRootDirectoryMode }} \
        {{ sWasdiSoftwareRootDirectoryPath }}


# RUN generic to update the system and install common packages
RUN echo "APT::Install-Suggests \"0\";" > /etc/apt/apt.conf.d/99local && \
    echo "APT::Install-Recommends \"0\";" >> /etc/apt/apt.conf.d/99local && \
    echo "APT::Get::Assume-Yes \"true\";" >> /etc/apt/apt.conf.d/99local && \
    echo "APT::Keep-Downloaded-Packages \"false\";" >> /etc/apt/apt.conf.d/99local && \
    echo "Dpkg::Options::--force-confold;" >> /etc/apt/apt.conf.d/99local && \
    apt-get update && \
    apt-get install \
        ca-certificates && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy main restricted universe multiverse"          > /etc/apt/sources.list && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy-updates main restricted universe multiverse"  >> /etc/apt/sources.list && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy-security main restricted universe multiverse" >> /etc/apt/sources.list && \
    apt-get update && \
    apt-get dist-upgrade && \
    apt-get install \
        curl \
        nano \
        tar \
        unzip \
        wget && \
    sed --in-place "s/# set tabsize.*/set tabsize 4/g" /etc/nanorc && \
    sed --in-place "s/# set tabstospaces/set tabstospaces/g" /etc/nanorc && \
    rm --recursive --force /var/lib/apt/lists/* && \
    find / -xdev -type d -name __pycache__ -exec rm --recursive --force {} +


# RUN specific to install Geoserver
RUN mkdir --parents \
      /data && \
    chown {{ sWasdiSoftwareRootDirectoryOwner }}:{{ sWasdiSoftwareRootDirectoryGroup }} \
      /data && \
    chmod {{ sWasdiSoftwareRootDirectoryMode }} \
      /data && \
    apt-get update && \
    apt-get install \
        fontconfig \
        libfreetype6 && \
    rm --recursive --force /var/lib/apt/lists/* && \
    find / -xdev -type d -name __pycache__ -exec rm --recursive --force {} +


# From now, all commands executed are executed with the user '{{ sWasdiSystemUserName }}'
USER {{ sWasdiSystemUserName }}


# RUN specific to install JRE 17
RUN mkdir --parents \
        {{ sWasdiJre17RootDirectoryPath }} \
        {{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }} && \
    chown {{ sWasdiJre17RootDirectoryOwner }}:{{ sWasdiJre17RootDirectoryGroup }} \
        {{ sWasdiJre17RootDirectoryPath }} \
        {{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }} && \
    chmod {{ sWasdiJre17RootDirectoryMode }} \
        {{ sWasdiJre17RootDirectoryPath }} \
        {{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }} && \
    wget \
        --no-verbose \
        --output-document /tmp/{{ sWasdiJre17SourceUrl | basename }} \
        --progress=bar:force:noscroll \
        --show-progress \
        {{ sWasdiJre17SourceUrl }} --output-document /tmp/{{ sWasdiJre17SourceUrl | basename }} && \
    tar \
        --directory {{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }} \
        --extract \
        --file /tmp/{{ sWasdiJre17SourceUrl | basename }} \
        --strip-components=1 && \
    rm --force \
        /tmp/{{ sWasdiJre17SourceUrl | basename }}

ENV JAVA_HOME="{{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }}"
ENV PATH="{{ sWasdiJre17RootDirectoryPath }}/{{ sWasdiJre17Version }}/bin:${PATH}"


# RUN specific to install Geoserver
RUN mkdir --parents \
        {{ sWasdiGeoserverRootDirectoryPath }} \
        {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }} \
        {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01 \
        /tmp/geoserverPlugin && \
    chmod {{ sWasdiGeoserverRootDirectoryMode }} \
        {{ sWasdiGeoserverRootDirectoryPath }} \
        {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }} && \
    wget \
        --no-verbose \
        --output-document /tmp/{{ sWasdiGeoserverSourceUrl | basename }} \
        --progress=bar:force:noscroll \
        --show-progress \
        {{ sWasdiGeoserverSourceUrl }} && \
    wget \
        --no-verbose \
        --output-document /tmp/{{ sWasdiGeoserverPluginImagePyramidSourceUrl | basename }} \
        --progress=bar:force:noscroll \
        --show-progress \
        {{ sWasdiGeoserverPluginImagePyramidSourceUrl }} && \
    unzip \
        /tmp/{{ sWasdiGeoserverSourceUrl | basename }} \
        -d {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }} && \
    unzip \
        /tmp/{{ sWasdiGeoserverPluginImagePyramidSourceUrl | basename }} \
        -d /tmp/geoserverPlugin && \
    mv /tmp/geoserverPlugin/*.jar {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}/webapps/geoserver/WEB-INF/lib/. && \
    rm --recursive --force \
        {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}/webapps/geoserver/WEB-INF/lib/marlin-0.9.3.jar \
        /tmp/{{ sWasdiGeoserverSourceUrl | basename }} \
        /tmp/{{ sWasdiGeoserverPluginImagePyramidSourceUrl | basename }} \
        /tmp/geoserverPlugin
ENV GEOSERVER_HOME="{{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}"
ENV PATH="{{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}/bin:${PATH}"


# Set the workdir
WORKDIR {{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}


# Copy data
COPY --chown={{ sWasdiSystemUserName }}:{{ sWasdiSystemGroupName }} ./dataToCopy/docker-entrypoint.sh /docker-entrypoint.sh


# Start the container
ENTRYPOINT ["/bin/bash", "/docker-entrypoint.sh"]
CMD ["{{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}/bin/startup.sh"]
