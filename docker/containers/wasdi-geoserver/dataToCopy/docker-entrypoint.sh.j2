#!/bin/bash

function generateHash() {
    local sPassword=${1}

    if [[ -z "${GEOSERVER_HOME}" ]]
    then
        echo ""
        return 1
    fi

    sPasswordHash="$(java -classpath $(find "${GEOSERVER_HOME}/webapps/geoserver" -regex ".*jasypt-[0-9]\.[0-9]\.[0-9].*jar") org.jasypt.intf.cli.JasyptStringDigestCLI digest.sh algorithm=SHA-256 saltSizeBytes=16 iterations=100000 input="${sPassword}" verbose=0)"

    if [[ -n "${sPasswordHash}" ]]
    then
        echo "digest1:${sPasswordHash}" | tr --delete "\n"
        return 0
    else
        echo ""
        return 1
    fi
}

function createUser() {
    local sUserName=${1}
    local sUserPassword=${2}
    local iCurrentLine

    echo "[ENTRYPOINT] Create a hash for ${sUserName}'s password"
    sUserPasswordHash=$(generateHash "${sUserPassword}")

    if [[ ${?} -eq 0 && -n "${sUserPasswordHash}" ]]
    then
        echo "[ENTRYPOINT] OK"
        echo "[ENTRYPOINT] Add an entry in '${sGeoserverWorkingDir}/security/usergroup/default/users.xml' to create the user '${sUserName}'"
        iCurrentLine=$(grep --line-number "</users>" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml | cut --delimiter ':' --fields '1')

        if [[ -n "${iCurrentLine}" ]]
        then
            sed --in-place "${iCurrentLine}i \        <user enabled=\"true\" name=\"${sUserName}\" password=\"${sUserPasswordHash//\//\\/}\"/>" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml

            if [[ ${?} -eq 0 ]]
            then
                echo "[ENTRYPOINT] OK"
                return 0
            else
                echo "[ENTRYPOINT] ERROR"
                return 1
            fi
        fi
    else
        echo "[ENTRYPOINT] ERROR: unable to get a hash"
        return 1
    fi
}

function deleteUser() {
    local sUserName=${1}
    local iReturnCode=0

    echo "[ENTRYPOINT] Search if the user '${sUserName}' exists"
    iCurrentLine=$(grep --line-number "<user.*name=\"${sUserName}\".*" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml | cut --delimiter ':' --fields '1')

    if [[ -z "${iCurrentLine}" ]]
    then
        echo "[ENTRYPOINT] The user does not exist: nothing to do"
        return 0
    else
        echo "[ENTRYPOINT] The user exists"
        echo "[ENTRYPOINT] Delete the user '${sUserName}' from '${sGeoserverWorkingDir}/security/usergroup/default/users.xml'"
        sed --in-place "${iCurrentLine}d" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml

        if [[ ${?} -eq 0 ]]
        then
            echo "[ENTRYPOINT] OK"
        else
            echo "[ENTRYPOINT] ERROR"
            iReturnCode=1
        fi

        echo "[ENTRYPOINT] Delete the role of the user '${sUserName}' from '${sGeoserverWorkingDir}/security/role/default/roles.xml'"
        sed --in-place "/<userRoles username=\"${sUserName}\">/,/<\/userRoles>/d" ${sGeoserverWorkingDir}/security/role/default/roles.xml

        if [[ ${?} -eq 0 ]]
        then
            echo "[ENTRYPOINT] OK"
        else
            echo "[ENTRYPOINT] ERROR"
            iReturnCode=1
        fi
    fi

    return ${iReturnCode}
}

function updateUser() {
    local sUserName=${1}
    local sUserPassword=${2}
    local iCurrentLine=${3}

    echo "[ENTRYPOINT] Create a hash for ${sUserName}'s password"
    sUserPasswordHash=$(generateHash "${sUserPassword}")

    if [[ ${?} -eq 0 && -n "${sUserPasswordHash}" ]]
    then
        echo "[ENTRYPOINT] OK"
        echo "[ENTRYPOINT] Update the user '${sUserName}' in '${sGeoserverWorkingDir}/security/usergroup/default/users.xml'"
        sed --in-place "${iCurrentLine}s/.*/\        <user enabled=\"true\" name=\"${sUserName}\" password=\"${sUserPasswordHash//\//\\/}\"\/>/g" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml

        if [[ ${?} -eq 0 ]]
        then
            echo "[ENTRYPOINT] OK"
            return 0
        else
            echo "[ENTRYPOINT] ERROR"
            return 1
        fi
    else
        echo "[ENTRYPOINT] ERROR: unable to get a hash"
        return 1
    fi
}

function createOrUpdateUser() {
    local sUserName=${1}
    local sUserPassword=${2}
    local iCurrentLine

    echo "[ENTRYPOINT] Search if the user '${sUserName}' exists"
    iCurrentLine=$(grep --line-number "<user.*name=\"${sUserName}\".*" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml | cut --delimiter ':' --fields '1')

    if [[ -z "${iCurrentLine}" ]]
    then
        echo "[ENTRYPOINT] The user does not exist"
        createUser "${sUserName}" "${sUserPassword}"
        return ${?}
    else
        echo "[ENTRYPOINT] The user exists"
        updateUser "${sUserName}" "${sUserPassword}" ${iCurrentLine}
        return ${?}
    fi
}

function associateRoleToUser() {
    local sUserName=${1}
    local sRoleName=${2}
    local iCurrentLine

    echo "[ENTRYPOINT] Add an entry in '${sGeoserverWorkingDir}/security/role/default/roles.xml' to give the role '${sRoleName}' to the user '${sUserName}'"
    iCurrentLine=$(grep --line-number "</userList>" ${sGeoserverWorkingDir}/security/role/default/roles.xml | cut --delimiter ':' --fields '1')
    sed --in-place "${iCurrentLine}i \        <userRoles username=\"${sUserName}\">\n\            <roleRef roleID=\"${sRoleName}\"\/>\n\        </userRoles>" ${sGeoserverWorkingDir}/security/role/default/roles.xml

    if [[ ${?} -eq 0 ]]
    then
        echo "[ENTRYPOINT] OK"
        return 0
    else
        echo "[ENTRYPOINT] ERROR"
        return 1
    fi
}




# Initialize the default working directory
sGeoserverWorkingDir=""

if [[ -n "${GEOSERVER_HOME}" ]]
then
    echo "[ENTRYPOINT] \${GEOSERVER_HOME} = ${GEOSERVER_HOME}"
    sGeoserverWorkingDir="${GEOSERVER_HOME}"
fi


# Copy the data from the initial directory 'GEOSERVER_HOME' to 'GEOSERVER_DATA_DIR'
if [[ -n "${GEOSERVER_DATA_DIR}" ]]
then
    echo "[ENTRYPOINT] \${GEOSERVER_DATA_DIR} = ${GEOSERVER_DATA_DIR}"
    sGeoserverWorkingDir="${GEOSERVER_DATA_DIR}"

    if [[ -n "${GEOSERVER_HOME}" && -d "${GEOSERVER_HOME}/data_dir" && -d "${GEOSERVER_DATA_DIR}" ]]
    then
        if [[ -z "$(ls --almost-all ${GEOSERVER_DATA_DIR})" ]]
        then
            echo "[ENTRYPOINT] Copy '${GEOSERVER_HOME}/data_dir/' in '${GEOSERVER_DATA_DIR}/'"
            cp --recursive --preserve ${GEOSERVER_HOME}/data_dir/* ${GEOSERVER_DATA_DIR}/.

            if [[ ${?} -eq 0 ]]
            then
                echo "[ENTRYPOINT] OK"
                rm --recursive --force \
                    ${GEOSERVER_HOME}/data_dir \
                    ${GEOSERVER_DATA_DIR}/demo/*
            else
                echo "[ENTRYPOINT] ERROR"
            fi
        fi
    fi
fi

# Configure the strenght of password encryption
if [[ -f "${sGeoserverWorkingDir}/security/config.xml" ]]
then
    echo "[ENTRYPOINT] Reconfigure ${sGeoserverWorkingDir}/security/config.xml"
    sed --in-place 's/<configPasswordEncrypterName>pbePasswordEncoder<\/configPasswordEncrypterName>/<configPasswordEncrypterName>strongPbePasswordEncoder<\/configPasswordEncrypterName>/g' ${sGeoserverWorkingDir}/security/config.xml

    if [[ ${?} -eq 0 ]]
    then
        echo "[ENTRYPOINT] OK"
    else
        echo "[ENTRYPOINT] ERROR"
    fi
fi


# Delete the masterpw.info file
if [[ -f "${sGeoserverWorkingDir}/security/masterpw.info" ]]
then
    echo "[ENTRYPOINT] Delete '${sGeoserverWorkingDir}/security/masterpw.info'"
    rm --force ${sGeoserverWorkingDir}/security/masterpw.info

    if [[ ${?} -eq 0 ]]
    then
        echo "[ENTRYPOINT] OK"
    else
        echo "[ENTRYPOINT] ERROR"
    fi
fi


# Reconfigure the default master password
if [[ -n "${GEOSERVER_MASTER_PASSWORD}" && ! -f "${sGeoserverWorkingDir}/security/masterpw.digest" ]]
then
    echo "[ENTRYPOINT] Create a hash for the master password"
    sGeoserverMasterPasswordHash=$(generateHash "${GEOSERVER_MASTER_PASSWORD}")

    if [[ -n "${sGeoserverMasterPasswordHash}" ]]
    then
        echo "[ENTRYPOINT] OK"
        echo "[ENTRYPOINT] Create the master password in '${sGeoserverWorkingDir}/security/masterpw.digest'"
        echo ${sGeoserverMasterPasswordHash} > ${sGeoserverWorkingDir}/security/masterpw.digest

        if [[ ${?} -eq 0 ]]
        then
            echo "[ENTRYPOINT] OK"
        else
            echo "[ENTRYPOINT] ERROR"
        fi
    else
        echo "[ENTRYPOINT] ERROR: unable to get a hash"
    fi
fi


# Reconfigure the administrator credentials (user name and password)
if [[ -n "${GEOSERVER_ADMIN_USER_NAME}" && -n "${GEOSERVER_ADMIN_USER_PASSWORD}" && -f "${sGeoserverWorkingDir}/security/usergroup/default/users.xml" ]]
then
    createOrUpdateUser "${GEOSERVER_ADMIN_USER_NAME}" "${GEOSERVER_ADMIN_USER_PASSWORD}"

    if [[ ${?} -eq 0 && -f "${sGeoserverWorkingDir}/security/role/default/roles.xml" ]]
    then
        associateRoleToUser "${GEOSERVER_ADMIN_USER_NAME}" "ADMIN"

        if [[ ${?} -eq 0 ]]
        then
            deleteUser "admin"
        fi
    fi
fi


# Reconfigure the URL
if [[ -n "${GEOSERVER_URL}" && -f "${sGeoserverWorkingDir}/global.xml" ]]
then
    iCurrentLine=$(grep --line-number "<proxyBaseUrl>.*</proxyBaseUrl>" ${sGeoserverWorkingDir}/global.xml | cut --delimiter ':' --fields '1')

    if [[ -n "${iCurrentLine}" ]]
    then
        echo "[ENTRYPOINT] Reconfigure proxyBaseUrl in ${sGeoserverWorkingDir}/global.xml"
        sed --in-place "s/<proxyBaseUrl>.*<\/proxyBaseUrl>/<proxyBaseUrl>${GEOSERVER_URL//\//\\/}<\/proxyBaseUrl>/g" ${sGeoserverWorkingDir}/global.xml

        if [[ ${?} -eq 0 ]]
        then
            echo "[ENTRYPOINT] OK"
        else
            echo "[ENTRYPOINT] ERROR"
        fi
    else
        echo "[ENTRYPOINT] Add an entry proxyBaseUrl in ${sGeoserverWorkingDir}/global.xml"
        iCurrentLine=$(grep --line-number "<useHeadersProxyURL>.*</useHeadersProxyURL>" ${sGeoserverWorkingDir}/global.xml | cut --delimiter ':' --fields '1')

        if [[ -n "${iCurrentLine}" ]]
        then
            sed --in-place "${iCurrentLine}i \    <proxyBaseUrl>${GEOSERVER_URL//\//\\/}</proxyBaseUrl>" ${sGeoserverWorkingDir}/global.xml

            if [[ ${?} -eq 0 ]]
            then
                echo "[ENTRYPOINT] OK"
            else
                echo "[ENTRYPOINT] ERROR"
            fi
        else
            echo "[ENTRYPOINT] ERROR: unable to get the number of the line which contain 'useHeadersProxyURL'"
        fi
    fi
fi


# Create the application user
if [[ -n "${GEOSERVER_APPLICATION_USER_NAME}" && -n "${GEOSERVER_APPLICATION_USER_PASSWORD}" && -f "${sGeoserverWorkingDir}/security/usergroup/default/users.xml" ]]
then
    createOrUpdateUser "${GEOSERVER_APPLICATION_USER_NAME}" "${GEOSERVER_APPLICATION_USER_PASSWORD}"

    if [[ ${?} -eq 0 && -n "${GEOSERVER_APPLICATION_USER_ROLE}" && -f "${sGeoserverWorkingDir}/security/role/default/roles.xml" ]]
    then
        associateRoleToUser "${GEOSERVER_APPLICATION_USER_NAME}" "${GEOSERVER_APPLICATION_USER_ROLE}"
    fi
fi

exec "$@"
