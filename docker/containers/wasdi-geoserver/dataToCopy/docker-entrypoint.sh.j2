#!/bin/bash

function addOrUpdateLine() {
    local sLogPrefix="${1}"
    local sFile="${2}"
    local sAddAfter="${3}"
    local sLineToSearch="${4}"
    local sLineToAddOrUpdate="${5}"
    local iIndentation="${6}"

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Check if '${sFile}' exists"

    if [[ -f "${sFile}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR: the file does not exist"
        return 1
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Check if '\${sAddAfter}' is filled"

    if [[ -n "${sAddAfter}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR: the variable is not filled"
        return 1
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Check if '\${sLineToSearch}' is filled"

    if [[ -n "${sLineToSearch}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR: the variable is not filled"
        return 1
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Check if '\${sLineToAddOrUpdate}' is filled"

    if [[ -n "${sLineToAddOrUpdate}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR: the variable is not filled"
        return 1
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Search if the line '${sLineToSearch}' exists"
    iPositionLineWeSearch=$(grep --line-number "${sLineToSearch}" ${sFile} | cut --delimiter ':' --fields '1')

    if [[ -n "${iPositionLineWeSearch}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The line exists: we will try to update it"
        displayLog "${FUNCNAME}" "${sLogPrefix}" "Update the line"
        sed --in-place "s/${sLineToSearch//\//\\/}/${sLineToAddOrUpdate//\//\\/}/g" ${sFile}

        if [[ ${?} -eq 0 ]]
        then
            displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
        else
            displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR"
        fi
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The line does not exist: we will try to insert it"
        displayLog "${FUNCNAME}" "${sLogPrefix}" "We requested an insertion after the line '${sAddAfter}': search if the line exists"
        iPositionLineReference=$(grep --line-number "${sAddAfter}" ${sFile} | cut --delimiter ':' --fields '1')

        if [[ -n "${iPositionLineReference}" ]]
        then
            displayLog "${FUNCNAME}" "${sLogPrefix}" "OK: the line exists"
            sSpace="$(generateSpace ${iIndentation})"
            iPositionInsertion=$(( ${iPositionLineReference} + 1 ))

            displayLog "${FUNCNAME}" "${sLogPrefix}" "Insert the line '${sLineToAddOrUpdate}'"
            sed --in-place "${iPositionInsertion}i \ ${sSpace}${sLineToAddOrUpdate//\//\\/}" ${sFile}

            if [[ ${?} -eq 0 ]]
            then
                displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
            else
                displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR"
            fi
        else
            return 1
        fi
    fi

    return 0
}

function addContentFromLineNumber() {
    local sLogPrefix="${1}"
    local sFile="${2}"
    local iLineNumber="${3}"
    local sPrefixToAppend="${4}"
    local sSuffixToAppend="${5}"

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Check if '${sFile}' exists"

    if [[ -f "${sFile}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR: the file does not exist"
        return 1
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Check if '\${iLineNumber}' is filled"

    if [[ -n "${iLineNumber}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR: the variable is not filled"
        return 1
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Check if we have a prefix to add on the line ${iLineNumber}"

    if [[ -n "${sPrefixToAppend}" ]]
    then
        bUpdatePrefix="true"
        displayLog "${FUNCNAME}" "${sLogPrefix}" "We have a prefix to add"
        displayLog "${FUNCNAME}" "${sLogPrefix}" "Check if the prefix is already present or not on the line ${iLineNumber}"
        local sPrefixToAppendEscaped="$(escapeForGrep "${sPrefixToAppend}")"
        local sSearchResult="$(sed --quiet "${iLineNumber}p" ${sFile} | grep --extended-regexp "^${sPrefixToAppendEscaped}")"

        if [[ -z "${sSearchResult}" ]]
        then
            displayLog "${FUNCNAME}" "${sLogPrefix}" "The prefix is missing: we will try to add it"
        else
            displayLog "${FUNCNAME}" "${sLogPrefix}" "The prefix is present: we stop now as there is nothing to do"
            bUpdatePrefix="false"
        fi

        if [[ "${bUpdatePrefix}" == "true" ]]
        then
            displayLog "${FUNCNAME}" "${sLogPrefix}" "Update the line ${iLineNumber} to add the prefix"
            sed --in-place "${iLineNumber}s/\(.*\)/${sPrefixToAppendEscaped} \1/" ${sFile}

            if [[ ${?} -eq 0 ]]
            then
                displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
            else
                displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR"
            fi
        fi
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "We have no prefix to add"
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Check if we have a suffix to add on the line ${iLineNumber}"

    if [[ -n "${sSuffixToAppend}" ]]
    then
        bUpdateSuffix="true"
        displayLog "${FUNCNAME}" "${sLogPrefix}" "We have a suffix to add"
        displayLog "${FUNCNAME}" "${sLogPrefix}" "Check if the suffix is already present or not on the line ${iLineNumber}"
        local sSuffixToAppendEscaped="$(escapeForGrep "${sSuffixToAppend}")"
        local sSearchResult="$(sed --quiet "${iLineNumber}p" ${sFile} | grep --extended-regexp "${sSuffixToAppendEscaped}$")"

        if [[ -z "${sSearchResult}" ]]
        then
            displayLog "${FUNCNAME}" "${sLogPrefix}" "The suffix is missing: we will try to add it"
        else
            displayLog "${FUNCNAME}" "${sLogPrefix}" "The suffix is present: we stop now as there is nothing to do"
            bUpdateSuffix="false"
        fi

        if [[ "${bUpdateSuffix}" == "true" ]]
        then
            displayLog "${FUNCNAME}" "${sLogPrefix}" "Update the line ${iLineNumber} to add the suffix"
            sed --in-place "${iLineNumber}s/\(.*\)/\1 ${sSuffixToAppend}/" ${sFile}

            if [[ ${?} -eq 0 ]]
            then
                displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
            else
                displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR"
            fi
        fi
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "We have no suffix to add"
    fi

    return 0
}

function associateRoleToUser() {
    local sLogPrefix="${1}"
    local sUserName="${2}"
    local sRoleName="${3}"
    local iCurrentLine

    if [[ -z "${sUserName}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user name is empty: we bypass the user manipulation"
        return 0
    fi

    if [[ -z "${sRoleName}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The role is empty: we bypass the user manipulation"
        return 0
    fi

    if [[ ! -f "${sGeoserverWorkingDir}/security/role/default/roles.xml" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The file '${sGeoserverWorkingDir}/security/role/default/roles.xml' does not exist: we bypass the role manipulation"
        return 0
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Associate the role '${sRoleName}' to the user '${sUserName}' adding an entry in '${sGeoserverWorkingDir}/security/role/default/roles.xml'"
    iCurrentLine=$(grep --line-number "</userList>" ${sGeoserverWorkingDir}/security/role/default/roles.xml | cut --delimiter ':' --fields '1')
    sed --in-place "${iCurrentLine}i \        <userRoles username=\"${sUserName}\">\n\            <roleRef roleID=\"${sRoleName}\"\/>\n\        </userRoles>" ${sGeoserverWorkingDir}/security/role/default/roles.xml

    if [[ ${?} -eq 0 ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
        return 0
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR"
        return 1
    fi
}

function createUser() {
    local sLogPrefix="${1}"
    local sUserName="${2}"
    local sUserPassword="${3}"
    local iCurrentLine

    if [[ -z "${sUserName}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user name is empty: we bypass the user manipulation"
        return 0
    fi

    if [[ -z "${sUserPassword}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user password is empty: we bypass the user manipulation"
        return 0
    fi

    if [[ ! -f "${sGeoserverWorkingDir}/security/usergroup/default/users.xml" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The file '${sGeoserverWorkingDir}/security/usergroup/default/users.xml' does not exist: we bypass the user manipulation"
        return 0
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "[ENTRYPOINT] Hash the password of the user '${sUserName}'"
    sUserPasswordHash=$(generateHash "${sUserPassword}")

    if [[ ${?} -eq 0 && -n "${sUserPasswordHash}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
        displayLog "${FUNCNAME}" "${sLogPrefix}" "Create the user '${sUserName}' adding an entry in '${sGeoserverWorkingDir}/security/usergroup/default/users.xml'"
        iCurrentLine=$(grep --line-number "</users>" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml | cut --delimiter ':' --fields '1')

        if [[ -n "${iCurrentLine}" ]]
        then
            sed --in-place "${iCurrentLine}i \        <user enabled=\"true\" name=\"${sUserName}\" password=\"${sUserPasswordHash//\//\\/}\"/>" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml

            if [[ ${?} -eq 0 ]]
            then
                displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
                return 0
            else
                displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR"
                return 1
            fi
        fi
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR: unable to get a hash"
        return 1
    fi
}

function deleteUser() {
    local sLogPrefix="${1}"
    local sUserName="${2}"
    local iReturnCode=0

    if [[ -z "${sUserName}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user name is empty: we bypass the user manipulation"
        return 0
    fi

    if [[ ! -f "${sGeoserverWorkingDir}/security/usergroup/default/users.xml" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The file '${sGeoserverWorkingDir}/security/usergroup/default/users.xml' does not exist: we bypass the user manipulation"
        return 0
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Search if the user '${sUserName}' exists"
    iCurrentLine=$(grep --line-number "<user.*name=\"${sUserName}\".*" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml | cut --delimiter ':' --fields '1')

    if [[ -z "${iCurrentLine}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user does not exist: nothing to do"
        return 0
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user exists"
        displayLog "${FUNCNAME}" "${sLogPrefix}" "Delete the user '${sUserName}' from '${sGeoserverWorkingDir}/security/usergroup/default/users.xml'"
        sed --in-place "${iCurrentLine}d" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml

        if [[ ${?} -eq 0 ]]
        then
            displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
        else
            displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR"
            iReturnCode=1
        fi

        displayLog "${FUNCNAME}" "${sLogPrefix}" "Delete the role associated to the user '${sUserName}' from '${sGeoserverWorkingDir}/security/role/default/roles.xml'"
        sed --in-place "/<userRoles username=\"${sUserName}\">/,/<\/userRoles>/d" ${sGeoserverWorkingDir}/security/role/default/roles.xml

        if [[ ${?} -eq 0 ]]
        then
            displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
        else
            displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR"
            iReturnCode=1
        fi
    fi

    return ${iReturnCode}
}

function displayLog() {
    local sFunctionName="${1}"
    local sLogPrefix="${2}"
    local sMessage="${3}"

    local sMessageToDisplay="[ENTRYPOINT]"

    if [[ -n "${sLogPrefix}" ]]
    then
        sMessageToDisplay="${sMessageToDisplay} [${sLogPrefix}]"
    fi

    if [[ -n "${sFunctionName}" ]]
    then
        sMessageToDisplay="${sMessageToDisplay} [${sFunctionName}]"
    fi

    sMessageToDisplay="${sMessageToDisplay} ${sMessage}"
    echo -e "${sMessageToDisplay}"
}

function escapeForGrep() {
    sInput="${1}"
    echo "${sInput}" | sed 's/^-/\\-/g'
}

function generateHash() {
    local sPassword=${1}

    if [[ -z "${GEOSERVER_HOME}" ]]
    then
        echo ""
        return 1
    fi

    sPasswordHash="$(java -classpath $(find "${GEOSERVER_HOME}/webapps/geoserver" -regex ".*jasypt-[0-9]\.[0-9]\.[0-9].*jar") org.jasypt.intf.cli.JasyptStringDigestCLI digest.sh algorithm=SHA-256 saltSizeBytes=16 iterations=100000 input="${sPassword}" verbose=0)"

    if [[ -n "${sPasswordHash}" ]]
    then
        echo "digest1:${sPasswordHash}" | tr --delete "\n"
        return 0
    else
        echo ""
        return 1
    fi
}

function generateSpace() {
    local sNumber="${1}"
    local sCounter=0
    local sSpace=""

    while [[ ${sCounter} -lt ${sNumber} ]]
    do
        sSpace="${sSpace} "
        sCounter=$(( ${sCounter} + 1 ))
    done

    echo "${sSpace}"
}

function updateUser() {
    local sLogPrefix="${1}"
    local sUserName="${2}"
    local sUserPassword="${3}"
    local sUserRole="${4}"
    local iReturnCode=0

    if [[ -z "${sUserName}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user name is empty: we bypass the user manipulation"
        return 0
    fi

    if [[ -z "${sUserPassword}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user password is empty: we bypass the user manipulation"
        return 0
    fi

    if [[ ! -f "${sGeoserverWorkingDir}/security/usergroup/default/users.xml" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The file '${sGeoserverWorkingDir}/security/usergroup/default/users.xml' does not exist: we bypass the user manipulation"
        return 0
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Hash the password of the user '${sUserName}'"
    sUserPasswordHash=$(generateHash "${sUserPassword}")

    if [[ ${?} -eq 0 && -n "${sUserPasswordHash}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
        displayLog "${FUNCNAME}" "${sLogPrefix}" "Update the user '${sUserName}' in '${sGeoserverWorkingDir}/security/usergroup/default/users.xml'"
        sed --in-place "s/<user.*name=\"${sUserName}\".*>/<user enabled=\"true\" name=\"${sUserName}\" password=\"${sUserPasswordHash//\//\\/}\"\/>/g" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml

        if [[ ${?} -eq 0 ]]
        then
            displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
        else
            displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR"
            iReturnCode=1
        fi

        displayLog "${FUNCNAME}" "${sLogPrefix}" "Update the role of the user '${sUserName}' in '${sGeoserverWorkingDir}/security/role/default/roles.xml'"
        sed --in-place "/<userRoles username=\"${sUserName}\">/,/<\/userRoles>/c\        <userRoles username=\"${sUserName}\">\n\            <roleRef roleID=\"${sUserRole}\"\/>\n\        <\/userRoles>" ${sGeoserverWorkingDir}/security/role/default/roles.xml

        if [[ ${?} -eq 0 ]]
        then
            displayLog "${FUNCNAME}" "${sLogPrefix}" "OK"
        else
            displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR"
            iReturnCode=1
        fi
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "ERROR: unable to get a hash"
        iReturnCode=1
    fi

    return ${iReturnCode}
}

function createOrUpdateUser() {
    local sLogPrefix="${1}"
    local sUserName="${2}"
    local sUserPassword="${3}"
    local sUserRole="${4}"
    local iReturnCode=0
    local iCurrentLine

    if [[ -z "${sUserName}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user name is empty: we bypass the user manipulation"
        return 0
    fi

    if [[ -z "${sUserPassword}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user password is empty: we bypass the user manipulation"
        return 0
    fi

    if [[ ! -f "${sGeoserverWorkingDir}/security/usergroup/default/users.xml" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The file '${sGeoserverWorkingDir}/security/usergroup/default/users.xml' does not exist: we bypass the user manipulation"
        return 0
    fi

    displayLog "${FUNCNAME}" "${sLogPrefix}" "Search if the user '${sUserName}' exists"
    iCurrentLine=$(grep --line-number "<user.*name=\"${sUserName}\".*" ${sGeoserverWorkingDir}/security/usergroup/default/users.xml | cut --delimiter ':' --fields '1')

    if [[ -z "${iCurrentLine}" ]]
    then
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user does not exist"
        createUser "${sLogPrefix}" "${sUserName}" "${sUserPassword}"

        if [[ ${?} -eq 0 ]]
        then
            associateRoleToUser "${sLogPrefix}" "${sUserName}" "${sUserRole}"

            if [[ ${?} -ne 0 ]]
            then
                iReturnCode=1
            fi
        else
            iReturnCode=1
        fi
    else
        displayLog "${FUNCNAME}" "${sLogPrefix}" "The user exists"
        updateUser "${sLogPrefix}" "${sUserName}" "${sUserPassword}" "${sUserRole}"

        if [[ ${?} -ne 0 ]]
        then
            iReturnCode=1
        fi
    fi

    return ${iReturnCode}
}




# Initialize the default working directory
sGeoserverWorkingDir=""

if [[ -n "${GEOSERVER_HOME}" ]]
then
    displayLog "" "SET_GEOSERVER_HOME" "\${GEOSERVER_HOME} = ${GEOSERVER_HOME}"
    sGeoserverWorkingDir="${GEOSERVER_HOME}"
fi


# Copy the data from the initial directory 'GEOSERVER_HOME' to 'GEOSERVER_DATA_DIR'
if [[ -n "${GEOSERVER_DATA_DIR}" ]]
then
    displayLog "" "COPY_DATA" "\${GEOSERVER_DATA_DIR} = ${GEOSERVER_DATA_DIR}"
    sGeoserverWorkingDir="${GEOSERVER_DATA_DIR}"

    if [[ -n "${GEOSERVER_HOME}" && -d "${GEOSERVER_HOME}/data_dir" && -d "${GEOSERVER_DATA_DIR}" ]]
    then
        if [[ -z "$(ls --almost-all ${GEOSERVER_DATA_DIR})" ]]
        then
            displayLog "" "COPY_DATA" "Copy '${GEOSERVER_HOME}/data_dir/' in '${GEOSERVER_DATA_DIR}/'"
            cp --recursive --preserve ${GEOSERVER_HOME}/data_dir/* ${GEOSERVER_DATA_DIR}/.

            if [[ ${?} -eq 0 ]]
            then
                displayLog "" "COPY_DATA" "OK"
                rm --recursive --force \
                    ${GEOSERVER_HOME}/data_dir \
                    ${GEOSERVER_DATA_DIR}/demo/*
            else
                displayLog "" "COPY_DATA" "ERROR"
            fi
        fi
    fi
fi


# Configure the strenght of password encryption
if [[ -f "${sGeoserverWorkingDir}/security/config.xml" ]]
then
    displayLog "" "PASSWORD_STRENGHT" "Reconfigure ${sGeoserverWorkingDir}/security/config.xml"
    sed --in-place "s/<configPasswordEncrypterName>pbePasswordEncoder<\/configPasswordEncrypterName>/<configPasswordEncrypterName>strongPbePasswordEncoder<\/configPasswordEncrypterName>/g" ${sGeoserverWorkingDir}/security/config.xml

    if [[ ${?} -eq 0 ]]
    then
        displayLog "" "PASSWORD_STRENGHT" "OK"
    else
        displayLog "" "PASSWORD_STRENGHT" "ERROR"
    fi
fi


# Delete the masterpw.info file
if [[ -f "${sGeoserverWorkingDir}/security/masterpw.info" ]]
then
    displayLog "" "DEFAULT_MASTER_PASSWORD" "Delete '${sGeoserverWorkingDir}/security/masterpw.info'"
    rm --force ${sGeoserverWorkingDir}/security/masterpw.info

    if [[ ${?} -eq 0 ]]
    then
        displayLog "" "DEFAULT_MASTER_PASSWORD" "OK"
    else
        displayLog "" "DEFAULT_MASTER_PASSWORD" "ERROR"
    fi
fi


# Reconfigure the default master password
if [[ -n "${GEOSERVER_MASTER_PASSWORD}" && ! -f "${sGeoserverWorkingDir}/security/masterpw.digest" ]]
then
    displayLog "" "MASTER_PASSWORD" "Hash the master password"
    sGeoserverMasterPasswordHash=$(generateHash "${GEOSERVER_MASTER_PASSWORD}")

    if [[ -n "${sGeoserverMasterPasswordHash}" ]]
    then
        displayLog "" "MASTER_PASSWORD" "OK"
        displayLog "" "MASTER_PASSWORD" "Create the master password in '${sGeoserverWorkingDir}/security/masterpw.digest'"
        echo ${sGeoserverMasterPasswordHash} > ${sGeoserverWorkingDir}/security/masterpw.digest

        if [[ ${?} -eq 0 ]]
        then
            displayLog "" "MASTER_PASSWORD" "OK"
        else
            displayLog "" "MASTER_PASSWORD" "ERROR"
        fi
    else
        displayLog "" "MASTER_PASSWORD" "ERROR: unable to get a hash"
    fi
fi


# Enable the usage of headers for proxy URL
if [[ -f "${sGeoserverWorkingDir}/global.xml" ]]
then
    displayLog "" "HEADERS_PROXY_URL" "Reconfigure useHeadersProxyURL to enable it in '${sGeoserverWorkingDir}/global.xml'"
    sed --in-place "s/<useHeadersProxyURL>.*<\/useHeadersProxyURL>/<useHeadersProxyURL>true<\/useHeadersProxyURL>/g" ${sGeoserverWorkingDir}/global.xml

    if [[ ${?} -eq 0 ]]
    then
        displayLog "" "HEADERS_PROXY_URL" "OK"
    else
        displayLog "" "HEADERS_PROXY_URL" "ERROR"
    fi
fi


# Reconfigure the logging profile
if [[ -n "${GEOSERVER_LOGGING_PROFILE}" && -f "${sGeoserverWorkingDir}/logging.xml" ]]
then
    displayLog "" "LOGGING_PROFILE" "Reconfigure the logging profile in '${sGeoserverWorkingDir}/logging.xml'"
    sed --in-place "s/<level>.*<\/level>/<level>${GEOSERVER_LOGGING_PROFILE}<\/level>/g" ${sGeoserverWorkingDir}/logging.xml

    if [[ ${?} -eq 0 ]]
    then
        displayLog "" "LOGGING_PROFILE" "OK"
    else
        displayLog "" "LOGGING_PROFILE" "ERROR"
    fi
fi


# Reconfigure the URL
if [[ -n "${GEOSERVER_URL}" && -f "${sGeoserverWorkingDir}/global.xml" ]]
then
    iCurrentLine=$(grep --line-number "<proxyBaseUrl>.*</proxyBaseUrl>" ${sGeoserverWorkingDir}/global.xml | cut --delimiter ':' --fields '1')

    if [[ -n "${iCurrentLine}" ]]
    then
        displayLog "" "PROXY_URL" "Reconfigure proxyBaseUrl in '${sGeoserverWorkingDir}/global.xml'"
        sed --in-place "s/<proxyBaseUrl>.*<\/proxyBaseUrl>/<proxyBaseUrl>${GEOSERVER_URL//\//\\/}<\/proxyBaseUrl>/g" ${sGeoserverWorkingDir}/global.xml

        if [[ ${?} -eq 0 ]]
        then
            displayLog "" "PROXY_URL" "OK"
        else
            displayLog "" "PROXY_URL" "ERROR"
        fi
    else
        displayLog "" "PROXY_URL" "Add an entry proxyBaseUrl in ${sGeoserverWorkingDir}/global.xml"
        iCurrentLine=$(grep --line-number "<useHeadersProxyURL>.*</useHeadersProxyURL>" ${sGeoserverWorkingDir}/global.xml | cut --delimiter ':' --fields '1')

        if [[ -n "${iCurrentLine}" ]]
        then
            sed --in-place "${iCurrentLine}i \    <proxyBaseUrl>${GEOSERVER_URL//\//\\/}</proxyBaseUrl>" ${sGeoserverWorkingDir}/global.xml

            if [[ ${?} -eq 0 ]]
            then
                displayLog "" "PROXY_URL" "OK"
            else
                displayLog "" "PROXY_URL" "ERROR"
            fi
        else
            displayLog "" "PROXY_URL" "ERROR: unable to get the number of the line which contain 'useHeadersProxyURL'"
        fi
    fi
fi


# Configure CORS for Jetty
sGeoserverWebApplicationConfigurationFile="${GEOSERVER_HOME}/webapps/geoserver/WEB-INF/web.xml"

if [[ -n "${GEOSERVER_ENABLE_CORS_JETTY}" && -f "${sGeoserverWebApplicationConfigurationFile}" ]]
then
    displayLog "" "CORS_JETTY" "Search the line at which the CORS for Jetty block is starting"
    iCorsJettyBlockStartLineNumber="$(grep --extended-regexp --ignore-case --line-number ".*CORS.*Jetty.*" ${sGeoserverWebApplicationConfigurationFile} | cut --delimiter ':' --fields 1)"

    if [[ -n "${iCorsJettyBlockStartLineNumber}" ]]
    then
        displayLog "" "CORS_JETTY" "OK: line ${iCorsJettyBlockStartLineNumber}"
    else
        displayLog "" "CORS_JETTY" "ERROR: unable to find the line"
    fi

    if [[ -n "${iCorsJettyBlockStartLineNumber}" ]]
    then
        displayLog "" "CORS_JETTY" "Search the line at which the CORS for Jetty block is finishing"
        iCorsJettyBlockStopLineNumber="$(grep --line-number "\-->" ${sGeoserverWebApplicationConfigurationFile} | cut --delimiter ':' --fields 1 | awk -v iCorsJettyBlockStartLineNumber=${iCorsJettyBlockStartLineNumber} '{ if ( $1 > iCorsJettyBlockStartLineNumber ) print $0}' | head --lines 1)"

        if [[ -n "${iCorsJettyBlockStopLineNumber}" ]]
        then
            displayLog "" "CORS_JETTY" "OK: line ${iCorsJettyBlockStopLineNumber}"
        else
            displayLog "" "CORS_JETTY" "ERROR: unable to find the line"
        fi
    fi

    if [[ -n "${iCorsJettyBlockStartLineNumber}" && -n "${iCorsJettyBlockStopLineNumber}" ]]
    then
        addContentFromLineNumber \
            "CORS_JETTY" \
            "${sGeoserverWebApplicationConfigurationFile}" \
            "${iCorsJettyBlockStartLineNumber}" \
            "" \
            "-->"

        addContentFromLineNumber \
            "CORS_JETTY" \
            "${sGeoserverWebApplicationConfigurationFile}" \
            "${iCorsJettyBlockStopLineNumber}" \
            "    <!--" \
            ""
    fi

    iCorsJettyBlockStartLineNumber=""
    iCorsJettyBlockStopLineNumber=""

    displayLog "" "CORS_JETTY" "Search the line at which the CORS for Jetty block is starting"
    iCorsJettyBlockStartLineNumber="$(grep --extended-regexp --ignore-case --line-number ".*Uncomment.*CORS$" ${sGeoserverWebApplicationConfigurationFile} | cut --delimiter ':' --fields 1)"

    if [[ -n "${iCorsJettyBlockStartLineNumber}" ]]
    then
        displayLog "" "CORS_JETTY" "OK: line ${iCorsJettyBlockStartLineNumber}"
    else
        displayLog "" "CORS_JETTY" "ERROR: unable to find the line"
    fi

    if [[ -n "${iCorsJettyBlockStartLineNumber}" ]]
    then
        displayLog "" "CORS_JETTY" "Search the line at which the CORS for Jetty block is finishing"
        iCorsJettyBlockStopLineNumber="$(grep --line-number "\-->" ${sGeoserverWebApplicationConfigurationFile} | cut --delimiter ':' --fields 1 | awk -v iCorsJettyBlockStartLineNumber=${iCorsJettyBlockStartLineNumber} '{ if ( $1 > iCorsJettyBlockStartLineNumber ) print $0}' | head --lines 1)"

        if [[ -n "${iCorsJettyBlockStopLineNumber}" ]]
        then
            displayLog "" "CORS_JETTY" "OK: line ${iCorsJettyBlockStopLineNumber}"
        else
            displayLog "" "CORS_JETTY" "ERROR: unable to find the line"
        fi
    fi

    if [[ -n "${iCorsJettyBlockStartLineNumber}" && -n "${iCorsJettyBlockStopLineNumber}" ]]
    then
        addContentFromLineNumber \
            "CORS_JETTY" \
            "${sGeoserverWebApplicationConfigurationFile}" \
            "${iCorsJettyBlockStartLineNumber}" \
            "" \
            "-->"

        addContentFromLineNumber \
            "CORS_JETTY" \
            "${sGeoserverWebApplicationConfigurationFile}" \
            "${iCorsJettyBlockStopLineNumber}" \
            "    <!--" \
            ""
    fi
fi


# Configure the contact informations
if [[ -n "${GEOSERVER_CONTACT_ADDRESS}" ]]
then
    addOrUpdateLine \
        "CONTACT_ADDRESS" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<address>.*</address>" \
        "<address>${GEOSERVER_CONTACT_ADDRESS}</address>" \
        5
fi

if [[ -n "${GEOSERVER_CONTACT_ADDRESS_CITY}" ]]
then
    addOrUpdateLine \
        "CONTACT_ADDRESS_CITY" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<addressCity>.*</addressCity>" \
        "<addressCity>${GEOSERVER_CONTACT_ADDRESS_CITY}</addressCity>" \
        5
fi

if [[ -n "${GEOSERVER_CONTACT_ADDRESS_COUNTRY}" ]]
then
    addOrUpdateLine \
        "CONTACT_ADDRESS_COUNTRY" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<addressCountry>.*</addressCountry>" \
        "<addressCountry>${GEOSERVER_CONTACT_ADDRESS_COUNTRY}</addressCountry>" \
        5
fi

if [[ -n "${GEOSERVER_CONTACT_ADDRESS_POSTAL_CODE}" ]]
then
    addOrUpdateLine \
        "CONTACT_ADDRESS_POSTAL_CODE" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<addressPostalCode>.*</addressPostalCode>" \
        "<addressPostalCode>${GEOSERVER_CONTACT_ADDRESS_POSTAL_CODE}</addressPostalCode>" \
        5
fi

if [[ -n "${GEOSERVER_CONTACT_ADDRESS_STATE}" ]]
then
    addOrUpdateLine \
        "CONTACT_ADDRESS_STATE" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<addressState>.*</addressState>" \
        "<addressState>${GEOSERVER_CONTACT_ADDRESS_STATE}</addressState>" \
        5
fi

if [[ -n "${GEOSERVER_CONTACT_ADDRESS_TYPE}" ]]
then
    addOrUpdateLine \
        "CONTACT_ADDRESS_ADDRESS_TYPE" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<addressType>.*</addressType>" \
        "<addressType>${GEOSERVER_CONTACT_ADDRESS_TYPE}</addressType>" \
        5
fi

if [[ -n "${GEOSERVER_CONTACT_EMAIL}" ]]
then
    addOrUpdateLine \
        "CONTACT_EMAIL" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<contactEmail>.*</contactEmail>" \
        "<contactEmail>${GEOSERVER_CONTACT_EMAIL}</contactEmail>" \
        5
fi

if [[ -n "${GEOSERVER_CONTACT_ORGANIZATION}" ]]
then
    addOrUpdateLine \
        "CONTACT_ORGANIZATION" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<contactOrganization>.*</contactOrganization>" \
        "<contactOrganization>${GEOSERVER_CONTACT_ORGANIZATION}</contactOrganization>" \
        5
fi

if [[ -n "${GEOSERVER_CONTACT_PERSON}" ]]
then
    addOrUpdateLine \
        "CONTACT_PERSON" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<contactPerson>.*</contactPerson>" \
        "<contactPerson>${GEOSERVER_CONTACT_PERSON}</contactPerson>" \
        5
fi

if [[ -n "${GEOSERVER_CONTACT_POSITION}" ]]
then
    addOrUpdateLine \
        "CONTACT_POSITION" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<contactPosition>.*</contactPosition>" \
        "<contactPosition>${GEOSERVER_CONTACT_POSITION}</contactPosition>" \
        5
fi

if [[ -n "${GEOSERVER_ONLINE_RESOURCE}" ]]
then
    addOrUpdateLine \
        "CONTACT_ONLINE_RESOURCE" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<onlineResource>.*</onlineResource>" \
        "<onlineResource>${GEOSERVER_ONLINE_RESOURCE}</onlineResource>" \
        5
fi

if [[ -n "${GEOSERVER_WELCOME}" ]]
then
    addOrUpdateLine \
        "CONTACT_WELCOME" \
        "${sGeoserverWorkingDir}/global.xml" \
        "<contact>" \
        "<welcome>.*</welcome>" \
        "<welcome>${GEOSERVER_WELCOME}</welcome>" \
        5
fi


# Reconfigure the administrator credentials (user name and password)
if [[ -n "${GEOSERVER_USER_ADMINISTRATOR_NAME}" && -n "${GEOSERVER_USER_ADMINISTRATOR_PASSWORD}" && -f "${sGeoserverWorkingDir}/security/usergroup/default/users.xml" ]]
then
    createOrUpdateUser "USER ${GEOSERVER_USER_ADMINISTRATOR_NAME}" "${GEOSERVER_USER_ADMINISTRATOR_NAME}" "${GEOSERVER_USER_ADMINISTRATOR_PASSWORD}" "ADMIN"

    if [[ ${?} -eq 0 && "${GEOSERVER_USER_ADMINISTRATOR_NAME}" != "admin" ]]
    then
        deleteUser "USER admin" "admin"
    fi
fi


# Create the application user
if [[ -n "${GEOSERVER_USER_APPLICATION_NAME}" && -n "${GEOSERVER_USER_APPLICATION_PASSWORD}" && -n "${GEOSERVER_USER_APPLICATION_ROLE}" ]]
then
    createOrUpdateUser "USER ${GEOSERVER_USER_APPLICATION_NAME}" "${GEOSERVER_USER_APPLICATION_NAME}" "${GEOSERVER_USER_APPLICATION_PASSWORD}" "${GEOSERVER_USER_APPLICATION_ROLE}"
fi


# Create the additional user
if [[ -n "${GEOSERVER_USER_ADDITIONAL_NAME}" && -n "${GEOSERVER_USER_ADDITIONAL_PASSWORD}" && -n "${GEOSERVER_USER_ADDITIONAL_ROLE}" ]]
then
    createOrUpdateUser "USER ${GEOSERVER_USER_ADDITIONAL_NAME}" "${GEOSERVER_USER_ADDITIONAL_NAME}" "${GEOSERVER_USER_ADDITIONAL_PASSWORD}" "${GEOSERVER_USER_ADDITIONAL_ROLE}"
fi

exec "$@"
