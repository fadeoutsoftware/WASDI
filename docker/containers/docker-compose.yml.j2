# {{ ansible_managed }}
version: "3"

# Default project name: all containers are
# prefixed with this value
name: "wasdi"

networks:
  default:
    name: "{{ sWasdiDockerNetworkName }}"
    driver: "bridge"
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.bridge.name: "br-{{ sWasdiDockerNetworkName }}"
      com.docker.network.driver.mtu: "1500"
    external: {% if bWasdiDockerNetworkMustBeCreated %}false{% else %}true{% endif %}

    ipam:
      driver: "default"
      config:
        - subnet: "{{ sWasdiDockerNetworkSubnet }}"
          gateway: "{{ sWasdiDockerNetworkGateway }}"

services:
{% if bWasdiClientEnabled == True %}
  {{ sWasdiClientServiceName }}:
    depends_on:
      - {{ sWasdiGeoserverServiceName }}
{% if sWasdiServerTypeIsMain == True %}
      - {{ sWasdiKeycloakServiceName }}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
      - {{ sWasdiTomcatOgcProcessesServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
      - {{ sWasdiTomcatWasdiOpenEoServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
      - {{ sWasdiTomcatWasdiWebServerServiceName }}
{% endif %}
      - {{ sWasdiTraefikServiceName }}
    image: "{{ sWasdiClientServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.entrypoints={{ sWasdiContainerTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.rule=Host(`{{ sWasdiContainerTraefikRuleHost }}`) && PathPrefix(`/`)"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.service=s_{{ sWasdiClientServiceName }}"
{% if bWasdiContainerTraefikSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiClientServiceName }}.loadbalancer.server.port={{ sWasdiClientInternalPort }}"
{% if sWasdiClientInternalPort | default("") != ""
    and sWasdiClientExternalPort | default("") != ""
    and aWasdiClientExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiClientExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiClientExternalPort }}:{{ sWasdiClientInternalPort }}"
{% endfor %}
{% endif %}
    restart: "unless-stopped"
{% endif %}
{% if bWasdiClientV2Enabled == True %}

  {{ sWasdiClientV2ServiceName }}:
    depends_on:
      - {{ sWasdiGeoserverServiceName }}
{% if sWasdiServerTypeIsMain == True %}
      - {{ sWasdiKeycloakServiceName }}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
      - {{ sWasdiTomcatOgcProcessesServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
      - {{ sWasdiTomcatWasdiOpenEoServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
      - {{ sWasdiTomcatWasdiWebServerServiceName }}
{% endif %}
      - {{ sWasdiTraefikServiceName }}
    image: "{{ sWasdiClientV2ServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.entrypoints={{ sWasdiContainerTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.rule=Host(`testnew.wasdi.net`) && PathPrefix(`/`)"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.service=s_{{ sWasdiClientV2ServiceName }}"
{% if bWasdiContainerTraefikSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiClientV2ServiceName }}.loadbalancer.server.port={{ sWasdiClientV2InternalPort }}"
{% if sWasdiClientV2InternalPort | default("") != ""
    and sWasdiClientV2ExternalPort | default("") != ""
    and aWasdiClientV2ExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiClientV2ExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiClientV2ExternalPort }}:{{ sWasdiClientV2InternalPort }}"
{% endfor %}
{% endif %}
    restart: "unless-stopped"

{% endif %}
  {{ sWasdiGeoserverServiceName }}:
    depends_on:
      - {{ sWasdiTraefikServiceName }}
    environment:
{% if ( aWasdiGeoserverCsrfWhitelist | length ) > 0 %}
      - GEOSERVER_CSRF_WHITELIST={{ aWasdiGeoserverCsrfWhitelist | join(',') }}
{% endif %}
      - GEOSERVER_DATA_DIR={{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01
      - GEOSERVER_HOME={{ sWasdiGeoserverRootDirectoryPath }}/{{ sWasdiGeoserverVersion }}
{% if sWasdiGeoserverEnvironmentJavaOpts | default('') != '' %}
      - JAVA_OPTS={{ sWasdiGeoserverEnvironmentJavaOpts }}
{% endif %}
    image: "{{ sWasdiGeoserverServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.entrypoints={{ sWasdiContainerTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.rule=Host(`{{ sWasdiContainerTraefikRuleHost }}`) && PathPrefix(`/geoserver`)"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.service=s_{{ sWasdiGeoserverServiceName }}"
{% if bWasdiContainerTraefikSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiGeoserverServiceName }}.loadbalancer.server.port={{ sWasdiGeoserverInternalPort }}"
{% if sWasdiGeoserverInternalPort | default("") != ""
    and sWasdiGeoserverExternalPort | default("") != ""
    and aWasdiGeoserverExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiGeoserverExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiGeoserverExternalPort }}:{{ sWasdiGeoserverInternalPort }}"
{% endfor %}
{% endif %}
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiGeoserverUlimitNofile }}
        hard: {{ sWasdiGeoserverUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01:{{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01:rw
{% if sWasdiServerTypeIsMain == True %}

  {{ sWasdiKeycloakServiceName }}:
    command:
      - "start"
{% if bWasdiKeycloakNewInstance | default(False) == True %}
      - "--import-realm"
{% endif %}
    depends_on:
      - {{ sWasdiContainerPostgresqlKeycloakServiceName }}
    entrypoint:
      - {{ sWasdiKeycloakRootDirectoryPath }}/{{ sWasdiKeycloakVersion }}/bin/kc.sh
    environment:
      - JGROUPS_DISCOVERY_EXTERNAL_IP={{ sWasdiKeycloakJgroupDiscoveryExternalIp | default('127.0.0.1') }}
      - KC_CACHE_CONFIG_FILE=cache-ispn.xml
      - KC_DB_PASSWORD=${sPostgresqlKeycloakDatabasePassword}
      - KC_DB=postgres
      - KC_DB_SCHEMA=public
      - KC_DB_URL_DATABASE=keycloak
      - KC_DB_URL_HOST=wasdi-postgresql-keycloak
      - KC_DB_URL_PORT=5432
      - KC_DB_USERNAME=${sPostgresqlKeycloakDatabaseUsername}
      - KC_HEALTH_ENABLED=false
      - KC_HOSTNAME_STRICT=false
      - KC_HOSTNAME_STRICT_HTTPS=false
      - KC_HTTP_ENABLED=true
      - KC_HTTP_RELATIVE_PATH=/{{ sWasdiKeycloakPathName.lstrip('/').rstrip('/') }}
      - KC_LOG_LEVEL=debug
      - KC_PROXY=edge
      - KC_TRANSACTION_XA_ENABLED=true
      - KEYCLOAK_ADMIN=${sWasdiAdministratorUsername}
      - KEYCLOAK_ADMIN_PASSWORD=${sWasdiAdministratorPassword}
    image: "{{ sWasdiKeycloakServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.entrypoints={{ sWasdiContainerTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.rule=Host(`{{ sWasdiContainerTraefikRuleHost }}`) && PathPrefix(`/{{ sWasdiKeycloakPathName.lstrip('/').rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.middlewares=mw_wasdi-secure-allowFrame@file"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.service=s_{{ sWasdiKeycloakServiceName }}"
{% if bWasdiContainerTraefikSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiKeycloakServiceName }}.loadbalancer.server.port={{ sWasdiKeycloakInternalPort }}"
{% if sWasdiKeycloakInternalPort | default("") != ""
    and sWasdiKeycloakExternalPort | default("") != ""
    and aWasdiKeycloakExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiKeycloakExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiKeycloakExternalPort }}:{{ sWasdiKeycloakInternalPort }}"
{% endfor %}
{% endif %}
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiKeycloakUlimitNofile }}
        hard: {{ sWasdiKeycloakUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiKeycloakServiceName }}/opt_wasdi_keycloak_data_import:{{ sWasdiKeycloakRootDirectoryPath }}/{{ sWasdiKeycloakVersion }}/data/import:ro
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiKeycloakServiceName }}/opt_wasdi_keycloak_providers:{{ sWasdiKeycloakRootDirectoryPath }}/{{ sWasdiKeycloakVersion }}/providers:ro

  {{ sWasdiContainerPostgresqlKeycloakServiceName }}:
{% if bWasdiPostgresqlKeycloakInitialized == False %}
    environment:
      - POSTGRES_DB=${sPostgresqlKeycloakDatabaseName}
      - POSTGRES_USER=${sPostgresqlKeycloakDatabaseUsername}
      - POSTGRES_PASSWORD=${sPostgresqlKeycloakDatabasePassword}
      - POSTGRES_USER1_NAME=${sPostgresqlKeycloakUser1Name}
      - POSTGRES_USER1_PASSWORD=${sPostgresqlKeycloakUser1Password}
{% endif %}
    image: "{{ sWasdiContainerPostgresqlKeycloakImageName }}:{{ sWasdiContainerPostgresqlKeycloakImageVersion }}"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiPostgresqlKeycloakUlimitNofile }}
        hard: {{ sWasdiPostgresqlKeycloakUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiContainerPostgresqlKeycloakServiceName }}/data01:/var/lib/postgresql/data
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiContainerPostgresqlKeycloakServiceName }}/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
{% endif %}

  # MongoDB
  {{ sWasdiMongoServiceName }}:
{% if ( sWasdiMongoInternalPort | default('') ) not in ['', '27017'] %}
    command:
      - "mongod"
      - "--port"
      - "{{ sWasdiMongoInternalPort }}"
    expose:
      - "{{ sWasdiMongoInternalPort }}"
{% endif %}
{% if bWasdiMongoInitialized == False %}
    environment:
      - MONGO_INITDB_DATABASE=${sWasdiMongoWasdiDatabaseName}
      - MONGO_INITDB_ROOT_PASSWORD=${sWasdiAdministratorPassword}
      - MONGO_INITDB_ROOT_USERNAME=${sWasdiAdministratorUsername}
      - sWasdiMongoAdditionalUserBackupUserName=${sWasdiMongoAdditionalUserBackupUserName}
      - sWasdiMongoAdditionalUserBackupUserPassword=${sWasdiMongoAdditionalUserBackupUserPassword}
      - sWasdiMongoAdditionalUserMetrologyUserName=${sWasdiMongoAdditionalUserMetrologyUserName}
      - sWasdiMongoAdditionalUserMetrologyUserPassword=${sWasdiMongoAdditionalUserMetrologyUserPassword}
{% if sWasdiServerTypeIsMain == True %}
      - sWasdiMongoEcostressDatabaseName=${sWasdiMongoEcostressDatabaseName}
      - sWasdiMongoEcostressUserName=${sWasdiMongoEcostressUserName}
      - sWasdiMongoEcostressUserPassword=${sWasdiMongoEcostressUserPassword}
      - sWasdiMongoModisDatabaseName=${sWasdiMongoModisDatabaseName}
      - sWasdiMongoModisUserName=${sWasdiMongoModisUserName}
      - sWasdiMongoModisUserPassword=${sWasdiMongoModisUserPassword}
{% endif %}
      - sWasdiMongoWasdiDatabaseName=${sWasdiMongoWasdiDatabaseName}
      - sWasdiMongoWasdiUserName=${sWasdiMongoWasdiUserName}
      - sWasdiMongoWasdiUserPassword=${sWasdiMongoWasdiUserPassword}
{% if sWasdiServerTypeIsMain == True %}
      - sWasdiMongoWasdiStatsDatabaseName=${sWasdiMongoWasdiStatsDatabaseName}
      - sWasdiMongoWasdiStatsUserName=${sWasdiMongoWasdiStatsUserName}
      - sWasdiMongoWasdiStatsUserPassword=${sWasdiMongoWasdiStatsUserPassword}
{% endif %}
{% endif %}
    image: "mongo:{{ sWasdiMongoVersion }}"
{% if sWasdiMongoInternalPort | default("") != ""
    and sWasdiMongoExternalPort | default("") != ""
    and aWasdiMongoExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiMongoExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiMongoExternalPort }}:{{ sWasdiMongoInternalPort }}"
{% endfor %}
{% endif %}
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiMongoUlimitNofile }}
        hard: {{ sWasdiMongoUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiMongoServiceName }}/data01:/data/db:rw
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiMongoServiceName }}/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
{% if sWasdiServerTypeIsMain == True %}

  {{ sWasdiRabbitMqServiceName }}:
    depends_on:
      - {{ sWasdiTraefikServiceName }}
    environment:
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf
      - RABBITMQ_DISTRIBUTION_BUFFER_SIZE=128000
      - RABBITMQ_MNESIA_BASE=/var/lib/rabbitmq/mnesia/
      - RABBITMQ_NODENAME={{ sWasdiRabbitMqServiceName }}
{% if sWasdiRabbitMqMainInternalPort != '' %}
      - RABBITMQ_NODE_PORT={{ sWasdiRabbitMqMainInternalPort }}
{% endif %}
      - RABBITMQ_PID_FILE=/var/run/rabbitmq/rabbitmq.pid
    image: "{{ sWasdiRabbitMqServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.mw_{{ sWasdiRabbitMqServiceName }}_stomp.stripprefix.prefixes=/rabbit-stomp"
      - "traefik.http.middlewares.mw_{{ sWasdiRabbitMqServiceName }}_stomp.stripprefix.forceSlash=true"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.entrypoints={{ sWasdiContainerTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.rule=Host(`{{ sWasdiContainerTraefikRuleHost }}`) && PathPrefix(`/rabbit-stomp`)"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.service=s_{{ sWasdiRabbitMqServiceName }}_stomp"
{% if bWasdiContainerTraefikSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.tls=true"
{% endif %}
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.middlewares=mw_{{ sWasdiRabbitMqServiceName }}_stomp@docker"
      - "traefik.http.services.s_{{ sWasdiRabbitMqServiceName }}_stomp.loadbalancer.server.port={{ sWasdiRabbitMqWebStompInternalPort }}"
{% if (( sWasdiRabbitMqMainInternalPort | default("") ) != ""
        and ( sWasdiRabbitMqMainExternalPort | default("") ) != ""
        and (( aWasdiRabbitMqMainExternalIp | default([]) ) | length ) > 0
    ) or (
        ( sWasdiRabbitMqWebStompInternalPort | default("") ) != ""
        and ( sWasdiRabbitMqWebStompExternalPort | default("") ) != ""
        and (( aWasdiRabbitMqWebStompExternalIp | default([]) ) | length ) > 0
    )
%}
    ports:
{% if sWasdiRabbitMqMainInternalPort | default("") != ""
    and sWasdiRabbitMqMainExternalPort | default("") != "" %}
{% for sCurrentExternalIp in aWasdiRabbitMqMainExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiRabbitMqMainExternalPort }}:{{ sWasdiRabbitMqMainInternalPort }}"
{% endfor %}
{% endif %}
{% if sWasdiRabbitMqWebStompInternalPort | default("") != ""
    and sWasdiRabbitMqWebStompExternalPort | default("") != "" %}
{% for sCurrentExternalIp in aWasdiRabbitMqWebStompExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiRabbitMqWebStompExternalPort }}:{{ sWasdiRabbitMqWebStompInternalPort }}"
{% endfor %}
{% endif %}
{% endif %}
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiRabbitMqUlimitNofile }}
        hard: {{ sWasdiRabbitMqUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiRabbitMqServiceName }}/data01:/var/lib/rabbitmq:rw
{% endif %}
{% if bWasdiSchedulerEnabled == True %}

  {{ sWasdiSchedulerServiceName }}:
    depends_on:
      - {{ sWasdiMongoServiceName }}
    image: "{{ sWasdiSchedulerServiceName }}:latest"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiSchedulerUlimitNofile }}
        hard: {{ sWasdiSchedulerUlimitNofile }}
    volumes:
      - "{{ sWasdiDockerSocketFilePath }}:{{ sWasdiDockerSocketFilePath }}:ro"
      - "{{ sWasdiDataRootDirectoryPath }}:{{ sWasdiDataRootDirectoryPath }}:rw"
      - "{{ sWasdiDataConfigurationRootDirectoryPath }}:{{ sWasdiDataConfigurationRootDirectoryPath }}:ro"
{% endif %}
{% if bWasdiTelegrafEnabled == True %}

  {{ sWasdiTelegrafServiceName }}:
    depends_on:
      - {{ sWasdiMongoServiceName }}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
      - {{ sWasdiTomcatOgcProcessesServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
      - {{ sWasdiTomcatWasdiOpenEoServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
      - {{ sWasdiTomcatWasdiWebServerServiceName }}
{% endif %}
{% if ( aoWasdiTelegrafEnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiTelegrafCurrentEnvironmentVariable in aoWasdiTelegrafEnvironmentVariable %}
      - {{ aoWasdiTelegrafCurrentEnvironmentVariable['key'] }}={{ aoWasdiTelegrafCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiTelegrafServiceName }}:latest"
{% if sWasdiTelegrafInternalPort | default("") != ""
    and sWasdiTelegrafExternalPort | default("") != ""
    and aWasdiTelegrafExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiTelegrafExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiTelegrafExternalPort }}:{{ sWasdiTelegrafInternalPort }}"
{% endfor %}
{% endif %}
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiTelegrafUlimitNofile }}
        hard: {{ sWasdiTelegrafUlimitNofile }}
{% if ( aWasdiTelegrafVolume | length ) > 0 %}
    volumes:
{% for sWasdiTelegrafCurrentVolume in aWasdiTelegrafVolume %}
      - "{{ sWasdiTelegrafCurrentVolume }}"
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}

  {{ sWasdiTomcatOgcProcessesServerServiceName }}:
    depends_on:
      - {{ sWasdiGeoserverServiceName }}
      - {{ sWasdiKeycloakServiceName }}
      - {{ sWasdiMongoServiceName }}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
      - {{ sWasdiTraefikServiceName }}
    environment:
{% if sWasdiTomcatOgcProcessesServerEnvironmentCatalinaOpts | default('') != '' %}
      - CATALINA_OPTS={{ sWasdiTomcatOgcProcessesServerEnvironmentCatalinaOpts }}
{% endif %}
    image: "{{ sWasdiTomcatOgcProcessesServerServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.entrypoints={{ sWasdiContainerTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.rule=Host(`{{ sWasdiContainerTraefikRuleHost }}`) && PathPrefix(`/ogcprocesses`)"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.service=s_{{ sWasdiTomcatOgcProcessesServerServiceName }}"
{% if bWasdiContainerTraefikSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiTomcatOgcProcessesServerServiceName }}.loadbalancer.server.port={{ sWasdiTomcatOgcProcessesServerInternalPort }}"
{% if sWasdiTomcatOgcProcessesServerInternalPort | default("") != ""
    and sWasdiTomcatOgcProcessesServerExternalPort | default("") != ""
    and aWasdiTomcatOgcProcessesServerExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiTomcatOgcProcessesServerExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiTomcatOgcProcessesServerExternalPort }}:{{ sWasdiTomcatOgcProcessesServerInternalPort }}"
{% endfor %}
{% endif %}
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiTomcatOgcProcessesServerUlimitNofile }}
        hard: {{ sWasdiTomcatOgcProcessesServerUlimitNofile }}
    volumes:
      - {{ sWasdiDataRootDirectoryPath }}:{{ sWasdiDataRootDirectoryPath }}:rw
      - {{ sWasdiDataConfigurationRootDirectoryPath }}:{{ sWasdiDataConfigurationRootDirectoryPath }}:ro
#      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01/data:/mnt/data_{{ sWasdiGeoserverServiceName }}:rw
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}

  {{ sWasdiTomcatWasdiOpenEoServerServiceName }}:
    depends_on:
      - {{ sWasdiGeoserverServiceName }}
      - {{ sWasdiKeycloakServiceName }}
      - {{ sWasdiMongoServiceName }}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
      - {{ sWasdiTraefikServiceName }}
    environment:
{% if sWasdiTomcatWasdiOpenEoServerEnvironmentCatalinaOpts | default('') != '' %}
      - CATALINA_OPTS={{ sWasdiTomcatWasdiOpenEoServerEnvironmentCatalinaOpts }}
{% endif %}
    image: "{{ sWasdiTomcatWasdiOpenEoServerServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.entrypoints={{ sWasdiContainerTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.rule=Host(`{{ sWasdiContainerTraefikRuleHost }}`) && PathPrefix(`/wasdi-openeo-server`)"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.service=s_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}"
{% if bWasdiContainerTraefikSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.loadbalancer.server.port={{ sWasdiTomcatWasdiOpenEoServerInternalPort }}"
{% if sWasdiTomcatWasdiOpenEoServerInternalPort | default("") != ""
    and sWasdiTomcatWasdiOpenEoServerExternalPort | default("") != ""
    and aWasdiTomcatWasdiOpenEoServerExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiTomcatWasdiOpenEoServerExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiTomcatWasdiOpenEoServerExternalPort }}:{{ sWasdiTomcatWasdiOpenEoServerInternalPort }}"
{% endfor %}
{% endif %}
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiTomcatWasdiOpenEoServerUlimitNofile }}
        hard: {{ sWasdiTomcatWasdiOpenEoServerUlimitNofile }}
    volumes:
      - {{ sWasdiDataRootDirectoryPath }}:{{ sWasdiDataRootDirectoryPath }}:rw
      - {{ sWasdiDataConfigurationRootDirectoryPath }}:{{ sWasdiDataConfigurationRootDirectoryPath }}:ro
#      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01/data:/mnt/data_{{ sWasdiGeoserverServiceName }}:rw
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}

  {{ sWasdiTomcatWasdiWebServerServiceName }}:
    depends_on:
      - {{ sWasdiGeoserverServiceName }}
{% if sWasdiServerTypeIsMain == True %}
      - {{ sWasdiKeycloakServiceName }}
{% endif %}
      - {{ sWasdiMongoServiceName }}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
      - {{ sWasdiTraefikServiceName }}
    environment:
{% if sWasdiTomcatWasdiWebServerEnvironmentCatalinaOpts | default('') != '' %}
      - CATALINA_OPTS={{ sWasdiTomcatWasdiWebServerEnvironmentCatalinaOpts }}
{% endif %}
    image: "{{ sWasdiTomcatWasdiWebServerServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.entrypoints={{ sWasdiContainerTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.rule=Host(`{{ sWasdiContainerTraefikRuleHost }}`) && PathPrefix(`/wasdiwebserver`)"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.service=s_{{ sWasdiTomcatWasdiWebServerServiceName }}"
{% if bWasdiContainerTraefikSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiTomcatWasdiWebServerServiceName }}.loadbalancer.server.port={{ sWasdiTomcatWasdiWebServerInternalPort }}"
{% if sWasdiTomcatWasdiWebServerInternalPort | default("") != ""
    and sWasdiTomcatWasdiWebServerExternalPort | default("") != ""
    and aWasdiTomcatWasdiWebServerExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiTomcatWasdiWebServerExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiTomcatWasdiWebServerExternalPort }}:{{ sWasdiTomcatWasdiWebServerInternalPort }}"
{% endfor %}
{% endif %}
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiTomcatWasdiWebServerUlimitNofile }}
        hard: {{ sWasdiTomcatWasdiWebServerUlimitNofile }}
    volumes:
      - {{ sWasdiDataRootDirectoryPath }}:{{ sWasdiDataRootDirectoryPath }}:rw
      - {{ sWasdiDataConfigurationRootDirectoryPath }}:{{ sWasdiDataConfigurationRootDirectoryPath }}:ro
#      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01/data:/mnt/data_{{ sWasdiGeoserverServiceName }}:rw
{% endif %}

  {{ sWasdiTraefikServiceName }}:
    command:
      - "--global.sendanonymoususage=false"
      - "--api.dashboard=true"
      - "--entryPoints.web.address=:{{ sWasdiContainerTraefikHttpInternalPort }}"
      - "--entryPoints.web.forwardedHeaders.insecure"
{% if bWasdiContainerTraefikSslEnabled == True %}
      - "--entryPoints.websecure.address=:{{ sWasdiContainerTraefikHttpsInternalPort }}"
      - "--entryPoints.web.http.redirections.entrypoint.to=websecure"
      - "--entryPoints.web.http.redirections.entrypoint.scheme=https"
{% endif %}
      - "--log=true"
      - "--log.level=DEBUG"
      - "--log.format=common"
      - "--providers.docker=true"
      - "--providers.docker.endpoint={{ sWasdiContainerTraefikDockerEndpoint }}"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.watch=true"
      - "--providers.file.directory=/etc/traefik/conf.d"
      - "--providers.file.watch=true"
    image: "{{ sWasdiContainerTraefikImageName }}:{{ sWasdiContainerTraefikImageVersion }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.entrypoints={{ sWasdiContainerTraefikEntrypoint }}"
      - "traefik.http.routers.dashboard.rule=Host(`{{ sWasdiContainerTraefikRuleHost }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.middlewares=mw_wasdi-secure-denyFrame@file,mw_auth-dashboard@file"
      - "traefik.http.routers.dashboard.service=api@internal"
{% if bWasdiContainerTraefikSslEnabled == True %}
      - "traefik.http.routers.dashboard.tls=true"
{% endif %}
{% if ( sWasdiContainerTraefikHttpInternalPort | default("") != ""
    and sWasdiContainerTraefikHttpExternalPort | default("") != ""
    and aWasdiContainerTraefikExternalIp | default([]) | length > 0 )
    or ( sWasdiContainerTraefikHttpsInternalPort | default("") != ""
    and sWasdiContainerTraefikHttpsExternalPort | default("") != ""
    and aWasdiContainerTraefikHttpsExternalIp | default([]) | length > 0 ) %}
    ports:
{% for sCurrentExternalIp in aWasdiContainerTraefikExternalIp | sort %}
{% if ( sWasdiContainerTraefikHttpInternalPort | default("") != ""
    and sWasdiContainerTraefikHttpExternalPort | default("") != ""
    and aWasdiContainerTraefikExternalIp | default([]) | length > 0 ) %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiContainerTraefikHttpExternalPort }}:{{ sWasdiContainerTraefikHttpInternalPort }}"
{% endif %}
{% if bWasdiContainerTraefikSslEnabled == True
    and sWasdiContainerTraefikHttpsInternalPort | default("") != ""
    and sWasdiContainerTraefikHttpsExternalPort | default("") != ""
    and aWasdiContainerTraefikExternalIp | default([]) | length > 0 %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiContainerTraefikHttpsExternalPort }}:{{ sWasdiContainerTraefikHttpsInternalPort }}"
{% endif %}
{% endfor %}
{% endif %}
    restart: "unless-stopped"
    stdin_open: true
    tty: true
    user: "{{ sWasdiContainerTraefikUserName }}:{{ sWasdiContainerTraefikGroupName }}"
    ulimits:
      nofile:
        soft: {{ sWasdiTraefikUlimitNofile }}
        hard: {{ sWasdiTraefikUlimitNofile }}
    volumes:
      - "{{ sWasdiDockerSocketFilePath }}:{{ sWasdiDockerSocketFilePath }}:ro"
{% if bWasdiContainerTraefikSslSourceType | upper == 'MOUNT_EACH_FILE' %}
{% for aCurrentTraefikSslCertificate in aoWasdiContainerTraefikSslCertificates %}
      - "{{ aCurrentTraefikSslCertificate['srcCertFile'] }}:/etc/traefik/certs/{{ aCurrentTraefikSslCertificate['certFile'] }}:ro"
      - "{{ aCurrentTraefikSslCertificate['srcKeyFile'] }}:/etc/traefik/certs/{{ aCurrentTraefikSslCertificate['keyFile'] }}:ro"
{% endfor %}
{% else %}
      - "{{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiTraefikServiceName }}/etc_traefik_certs:/etc/traefik/certs:ro"
{% endif %}
      - "{{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiTraefikServiceName }}/etc_traefik_conf.d:/etc/traefik/conf.d:ro"
{% if bWasdiUpdateMetricEnabled == True %}

  {{ sWasdiUpdateMetricServiceName }}:
    depends_on:
{% if sWasdiServerTypeIsMain == True %}
      - {{ sWasdiKeycloakServiceName }}
{% endif %}
      - {{ sWasdiTomcatWasdiWebServerServiceName }}
    image: "{{ sWasdiUpdateMetricServiceName }}:latest"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiUpdateMetricUlimitNofile }}
        hard: {{ sWasdiUpdateMetricUlimitNofile }}
    volumes:
      - {{ sWasdiDataConfigurationRootDirectoryPath }}:{{ sWasdiDataConfigurationRootDirectoryPath }}:ro
      - {{ sWasdiDataPartitionRootDirectoryPath }}:{{ sWasdiDataPartitionRootDirectoryPath }}:ro
{% endif %}
