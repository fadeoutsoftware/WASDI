# {{ ansible_managed }}
version: "3"

# Default project name: all containers are
# prefixed with this value
name: "wasdi"

networks:
  default:
    name: "{{ sWasdiDockerNetworkName }}"
    driver: "bridge"
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.bridge.name: "br-{{ sWasdiDockerNetworkName }}"
      com.docker.network.driver.mtu: "1500"
    external: {% if bWasdiDockerNetworkMustBeCreated %}false{% else %}true{% endif %}

    ipam:
      driver: "default"
      config:
        - subnet: "{{ sWasdiDockerNetworkSubnet }}"
          gateway: "{{ sWasdiDockerNetworkGateway }}"

services:
{% if bWasdiClientEnabled == True %}
  {{ sWasdiClientServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      - {{ sWasdiGeoserverServiceName }}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
      - {{ sWasdiKeycloakServiceName }}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
      - {{ sWasdiTomcatOgcProcessesServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
      - {{ sWasdiTomcatWasdiOpenEoServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
      - {{ sWasdiTomcatWasdiWebServerServiceName }}
{% endif %}
      - {{ sWasdiTraefikServiceName }}
{% if ( aoWasdiClientEnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiClientCurrentEnvironmentVariable in aoWasdiClientEnvironmentVariable %}
      - {{ aoWasdiClientCurrentEnvironmentVariable['key'] }}={{ aoWasdiClientCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiClientServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`/`)"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.service=s_{{ sWasdiClientServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiClientServiceName }}.loadbalancer.server.port={{ sWasdiClientInternalPort }}"
{% if sWasdiClientInternalPort | default("") != ""
    and sWasdiClientExternalPort | default("") != ""
    and aWasdiClientExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiClientExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiClientExternalPort }}:{{ sWasdiClientInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiClientUlimitNofile }}
        hard: {{ sWasdiClientUlimitNofile }}
{% endif %}
{% if bWasdiClientV2Enabled == True %}
  {{ sWasdiClientV2ServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      - {{ sWasdiGeoserverServiceName }}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
      - {{ sWasdiKeycloakServiceName }}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
      - {{ sWasdiTomcatOgcProcessesServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
      - {{ sWasdiTomcatWasdiOpenEoServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
      - {{ sWasdiTomcatWasdiWebServerServiceName }}
{% endif %}
      - {{ sWasdiTraefikServiceName }}
{% if ( aoWasdiClientV2EnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiClientV2CurrentEnvironmentVariable in aoWasdiClientV2EnvironmentVariable %}
      - {{ aoWasdiClientV2CurrentEnvironmentVariable['key'] }}={{ aoWasdiClientV2CurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiClientV2ServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.rule=Host(`testnew.wasdi.net`) && PathPrefix(`/`)"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.service=s_{{ sWasdiClientV2ServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiClientV2ServiceName }}.loadbalancer.server.port={{ sWasdiClientV2InternalPort }}"
{% if sWasdiClientV2InternalPort | default("") != ""
    and sWasdiClientV2ExternalPort | default("") != ""
    and aWasdiClientV2ExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiClientV2ExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiClientV2ExternalPort }}:{{ sWasdiClientV2InternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiClientV2UlimitNofile }}
        hard: {{ sWasdiClientV2UlimitNofile }}
{% endif %}
{% if bWasdiGeoserverEnabled == True %}
  {{ sWasdiGeoserverServiceName }}:
    depends_on:
      - {{ sWasdiTraefikServiceName }}
{% if ( aoWasdiGeoserverEnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiGeoserverCurrentEnvironmentVariable in aoWasdiGeoserverEnvironmentVariable %}
      - {{ aoWasdiGeoserverCurrentEnvironmentVariable['key'] }}={{ aoWasdiGeoserverCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiGeoserverServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiGeoserverDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.service=s_{{ sWasdiGeoserverServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiGeoserverServiceName }}.loadbalancer.server.port={{ sWasdiGeoserverInternalPort }}"
{% if sWasdiGeoserverInternalPort | default("") != ""
    and sWasdiGeoserverExternalPort | default("") != ""
    and aWasdiGeoserverExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiGeoserverExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiGeoserverExternalPort }}:{{ sWasdiGeoserverInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiGeoserverUlimitNofile }}
        hard: {{ sWasdiGeoserverUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01:{{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01:rw
{% endif %}
{% if bWasdiGrafanaEnabled == True %}
  {{ sWasdiGrafanaServiceName }}:
{% if bWasdiInfluxDbGrafanaEnabled == True %}
    depends_on:
      - {{ sWasdiInfluxDbGrafanaServiceName }}
{% endif %}
{% if ( aoWasdiGrafanaEnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiGrafanaCurrentEnvironmentVariable in aoWasdiGrafanaEnvironmentVariable %}
      - {{ aoWasdiGrafanaCurrentEnvironmentVariable['key'] }}={{ aoWasdiGrafanaCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiGrafanaImageName }}:{{ sWasdiGrafanaVersion }}"
{% if bWasdiGrafanaCluster == False %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiGrafanaDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.service=s_{{ sWasdiGrafanaServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiGrafanaServiceName }}.loadbalancer.server.port={{ sWasdiGrafanaInternalPort }}"
{% endif %}
{% if sWasdiGrafanaInternalPort | default("") != ""
    and sWasdiGrafanaExternalPort | default("") != ""
    and aWasdiGrafanaExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiGrafanaExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiGrafanaExternalPort }}:{{ sWasdiGrafanaInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "always"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiGrafanaUlimitNofile }}
        hard: {{ sWasdiGrafanaUlimitNofile }}
{% if ( aoWasdiGrafanaVolume | length ) > 0 %}
    volumes:
{% for aoWasdiGrafanaCurrentVolume in aoWasdiGrafanaVolume %}
      - {{ aoWasdiGrafanaCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiInfluxDbGrafanaEnabled == True %}
  {{ sWasdiInfluxDbGrafanaServiceName }}:
{% if ( aoWasdiInfluxDbGrafanaEnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiInfluxDbGrafanaCurrentEnvironmentVariable in aoWasdiInfluxDbGrafanaEnvironmentVariable %}
      - {{ aoWasdiInfluxDbGrafanaCurrentEnvironmentVariable['key'] }}={{ aoWasdiInfluxDbGrafanaCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiInfluxDbGrafanaImageName }}:{{ sWasdiInfluxDbGrafanaVersion }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiInfluxDbGrafanaServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.rule=Host(`{{ sWasdiInfluxDbGrafanaUrl }}`)"
      - "traefik.http.routers.r_{{ sWasdiInfluxDbGrafanaServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiInfluxDbGrafanaServiceName }}.service=s_{{ sWasdiInfluxDbGrafanaServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiInfluxDbGrafanaServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiInfluxDbGrafanaServiceName }}.loadbalancer.server.port={{ sWasdiInfluxDbGrafanaInternalPort }}"
{% if sWasdiInfluxDbGrafanaInternalPort | default("") != ""
    and sWasdiInfluxDbGrafanaExternalPort | default("") != ""
    and aWasdiInfluxDbGrafanaExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiInfluxDbGrafanaExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiInfluxDbGrafanaExternalPort }}:{{ sWasdiInfluxDbGrafanaInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "always"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiInfluxDbGrafanaUlimitNofile }}
        hard: {{ sWasdiInfluxDbGrafanaUlimitNofile }}
{% if ( aoWasdiInfluxDbGrafanaVolume | length ) > 0 %}
    volumes:
{% for aoWasdiInfluxDbGrafanaCurrentVolume in aoWasdiInfluxDbGrafanaVolume %}
      - {{ aoWasdiInfluxDbGrafanaCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiJenkinsEnabled == True %}
  {{ sWasdiJenkinsServiceName }}:
    command:
      - "--httpPort={{ sWasdiJenkinsInternalPort }}"
      - "--prefix={{ sWasdiJenkinsDefaultContextPath.rstrip('/') }}"
      - "--sessionTimeout={{ iWasdiJenkinsSessionTimeout }}"
{% if ( aoWasdiJenkinsEnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiJenkinsCurrentEnvironmentVariable in aoWasdiJenkinsEnvironmentVariable %}
      - {{ aoWasdiJenkinsCurrentEnvironmentVariable['key'] }}={{ aoWasdiJenkinsCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiJenkinsServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiJenkinsServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiJenkinsServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiJenkinsDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiJenkinsServiceName }}.middlewares=mw_wasdi-secure-allowFrame@file"
      - "traefik.http.routers.r_{{ sWasdiJenkinsServiceName }}.service=s_{{ sWasdiJenkinsServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiJenkinsServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiJenkinsServiceName }}.loadbalancer.server.port={{ sWasdiJenkinsInternalPort }}"
{% if sWasdiJenkinsInternalPort | default("") != ""
    and sWasdiJenkinsExternalPort | default("") != ""
    and aWasdiJenkinsExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiJenkinsExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiJenkinsExternalPort }}:{{ sWasdiJenkinsInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiJenkinsUlimitNofile }}
        hard: {{ sWasdiJenkinsUlimitNofile }}
{% if ( aoWasdiJenkinsVolume | length ) > 0 %}
    volumes:
{% for aoWasdiJenkinsCurrentVolume in aoWasdiJenkinsVolume %}
      - {{ aoWasdiJenkinsCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
  {{ sWasdiKeycloakServiceName }}:
    command:
      - "start"
{% if bWasdiKeycloakNewInstance | default(False) == True %}
      - "--import-realm"
{% endif %}
    depends_on:
      - {{ sWasdiPostgresqlKeycloakServiceName }}
    entrypoint:
      - {{ sWasdiKeycloakRootDirectoryPath }}/{{ sWasdiKeycloakVersion }}/bin/kc.sh
{% if ( aoWasdiKeycloakEnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiKeycloakCurrentEnvironmentVariable in aoWasdiKeycloakEnvironmentVariable %}
      - {{ aoWasdiKeycloakCurrentEnvironmentVariable['key'] }}={{ aoWasdiKeycloakCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiKeycloakServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiKeycloakDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.middlewares=mw_wasdi-secure-allowFrame@file"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.service=s_{{ sWasdiKeycloakServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiKeycloakServiceName }}.loadbalancer.server.port={{ sWasdiKeycloakInternalPort }}"
{% if sWasdiKeycloakInternalPort | default("") != ""
    and sWasdiKeycloakExternalPort | default("") != ""
    and aWasdiKeycloakExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiKeycloakExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiKeycloakExternalPort }}:{{ sWasdiKeycloakInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiKeycloakUlimitNofile }}
        hard: {{ sWasdiKeycloakUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiKeycloakServiceName }}/opt_wasdi_keycloak_data_import:{{ sWasdiKeycloakRootDirectoryPath }}/{{ sWasdiKeycloakVersion }}/data/import:ro
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiKeycloakServiceName }}/opt_wasdi_keycloak_providers:{{ sWasdiKeycloakRootDirectoryPath }}/{{ sWasdiKeycloakVersion }}/providers:ro
{% endif %}
{% if bWasdiMongoEnabled == True %}
  {{ sWasdiMongoServiceName }}:
{% if ( aWasdiMongoCommand | length ) > 0 %}
    command:
{% for sWasdiMongoCurrentCommand in aWasdiMongoCommand %}
      - "{{ sWasdiMongoCurrentCommand }}"
{% endfor %}
{% endif %}
{% if ( sWasdiMongoInternalPort | default('') ) not in ['', '27017'] %}
      - "--port"
      - "{{ sWasdiMongoInternalPort }}"
    expose:
      - "{{ sWasdiMongoInternalPort }}"
{% endif %}
{% if bWasdiMongoInitialized == False %}
    environment:
      - MONGO_INITDB_DATABASE=${sWasdiMongoMainDatabaseName}
      - MONGO_INITDB_ROOT_PASSWORD=${sWasdiAdministratorUserPassword}
      - MONGO_INITDB_ROOT_USERNAME=${sWasdiAdministratorUserName}
      - sWasdiMongoAdditionalUserBackupUserName=${sWasdiMongoAdditionalUserBackupUserName}
      - sWasdiMongoAdditionalUserBackupUserPassword=${sWasdiMongoAdditionalUserBackupUserPassword}
      - sWasdiMongoAdditionalUserMetrologyUserName=${sWasdiMongoAdditionalUserMetrologyUserName}
      - sWasdiMongoAdditionalUserMetrologyUserPassword=${sWasdiMongoAdditionalUserMetrologyUserPassword}
{% if sWasdiServerTypeIsMain == True %}
      - sWasdiMongoEcostressDatabaseName=${sWasdiMongoEcostressDatabaseName}
      - sWasdiMongoEcostressUserName=${sWasdiMongoEcostressUserName}
      - sWasdiMongoEcostressUserPassword=${sWasdiMongoEcostressUserPassword}
      - sWasdiMongoModisDatabaseName=${sWasdiMongoModisDatabaseName}
      - sWasdiMongoModisUserName=${sWasdiMongoModisUserName}
      - sWasdiMongoModisUserPassword=${sWasdiMongoModisUserPassword}
{% endif %}
      - sWasdiMongoMainDatabaseName=${sWasdiMongoMainDatabaseName}
      - sWasdiMongoMainUserName=${sWasdiMongoMainUserName}
      - sWasdiMongoMainUserPassword=${sWasdiMongoMainUserPassword}
{% if sWasdiServerTypeIsMain == True %}
      - sWasdiMongoStatisticsDatabaseName=${sWasdiMongoStatisticsDatabaseName}
      - sWasdiMongoStatisticsUserName=${sWasdiMongoStatisticsUserName}
      - sWasdiMongoStatisticsUserPassword=${sWasdiMongoStatisticsUserPassword}
{% endif %}
{% endif %}
    image: "mongo:{{ sWasdiMongoVersion }}"
{% if sWasdiMongoInternalPort | default("") != ""
    and sWasdiMongoExternalPort | default("") != ""
    and aWasdiMongoExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiMongoExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiMongoExternalPort }}:{{ sWasdiMongoInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "always"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiMongoUlimitNofile }}
        hard: {{ sWasdiMongoUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiMongoServiceName }}/data01:/data/db:rw
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiMongoServiceName }}/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
{% endif %}
{% if bWasdiNexusEnabled == True %}
  {{ sWasdiNexusServiceName }}:
    depends_on:
      - {{ sWasdiTraefikServiceName }}
{% if ( aoWasdiNexusEnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiNexusCurrentEnvironmentVariable in aoWasdiNexusEnvironmentVariable %}
      - {{ aoWasdiNexusCurrentEnvironmentVariable['key'] }}={{ aoWasdiNexusCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiNexusImageName }}:{{ sWasdiNexusVersion }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiNexusDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}.middlewares=mw_wasdi-secure-allowFrame@file"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}.service=s_{{ sWasdiNexusServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiNexusServiceName }}.loadbalancer.server.port={{ sWasdiNexusInternalPort }}"
{% for aoWasdiNexusDockerCurrentRegistry in aoWasdiNexusDockerRegistries: %}
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.rule=Host(`{{ aoWasdiNexusDockerCurrentRegistry['url'] }}`)"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.middlewares=mw_wasdi-secure-allowFrame@file"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.service=s_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.loadbalancer.server.port={{ aoWasdiNexusDockerCurrentRegistry['port'] }}"
{% endfor %}
{% if sWasdiNexusInternalPort | default("") != ""
    and sWasdiNexusExternalPort | default("") != ""
    and aWasdiNexusExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiNexusExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiNexusExternalPort }}:{{ sWasdiNexusInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "always"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiNexusUlimitNofile }}
        hard: {{ sWasdiNexusUlimitNofile }}
{% if ( aoWasdiNexusVolume | length ) > 0 %}
    volumes:
{% for aoWasdiNexusCurrentVolume in aoWasdiNexusVolume %}
      - {{ aoWasdiNexusCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
  {{ sWasdiPostgresqlKeycloakServiceName }}:
{% if bWasdiPostgresqlKeycloakInitialized == False %}
    environment:
      - POSTGRES_DB=${sPostgresqlKeycloakDatabaseName}
      - POSTGRES_USER=${sPostgresqlKeycloakDatabaseUsername}
      - POSTGRES_PASSWORD=${sPostgresqlKeycloakDatabasePassword}
      - POSTGRES_USER1_NAME=${sPostgresqlKeycloakUser1Name}
      - POSTGRES_USER1_PASSWORD=${sPostgresqlKeycloakUser1Password}
{% endif %}
    image: "{{ sWasdiPostgresqlKeycloakImageName }}:{{ sWasdiPostgresqlKeycloakVersion }}"
    pull_policy: "always"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiPostgresqlKeycloakUlimitNofile }}
        hard: {{ sWasdiPostgresqlKeycloakUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiPostgresqlKeycloakServiceName }}/data01:/var/lib/postgresql/data
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiPostgresqlKeycloakServiceName }}/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
{% endif %}
{% if bWasdiSonarqubeEnabled == True %}
  {{ sWasdiPostgresqlSonarqubeServiceName }}:
{% if bWasdiPostgresqlSonarqubeInitialized == False %}
    environment:
      - POSTGRES_DB=${sPostgresqlSonarqubeDatabaseName}
      - POSTGRES_USER=${sPostgresqlSonarqubeDatabaseUsername}
      - POSTGRES_PASSWORD=${sPostgresqlSonarqubeDatabasePassword}
      - POSTGRES_USER1_NAME=${sPostgresqlSonarqubeUser1Name}
      - POSTGRES_USER1_PASSWORD=${sPostgresqlSonarqubeUser1Password}
{% endif %}
    image: "{{ sWasdiPostgresqlSonarqubeImageName }}:{{ sWasdiPostgresqlSonarqubeVersion }}"
    pull_policy: "always"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiPostgresqlSonarqubeUlimitNofile }}
        hard: {{ sWasdiPostgresqlSonarqubeUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiPostgresqlSonarqubeServiceName }}/data01:/var/lib/postgresql/data
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiPostgresqlSonarqubeServiceName }}/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
  {{ sWasdiRabbitMqServiceName }}:
    depends_on:
      - {{ sWasdiTraefikServiceName }}
    environment:
      - RABBITMQ_CONFIG_FILE=/etc/rabbitmq/rabbitmq.conf
      - RABBITMQ_DISTRIBUTION_BUFFER_SIZE=128000
      - RABBITMQ_MNESIA_BASE=/var/lib/rabbitmq/mnesia/
      - RABBITMQ_NODENAME={{ sWasdiRabbitMqServiceName }}
{% if sWasdiRabbitMqMainInternalPort != '' %}
      - RABBITMQ_NODE_PORT={{ sWasdiRabbitMqMainInternalPort }}
{% endif %}
      - RABBITMQ_PID_FILE=/var/run/rabbitmq/rabbitmq.pid
    image: "{{ sWasdiRabbitMqServiceName }}:latest"
    labels:
{% if bWasdiRabbitMqInterfaceEndpointEnabled == True or bWasdiRabbitMqWebStompEndpointEnabled == True %}
      - "traefik.enable=true"
{% if bWasdiRabbitMqInterfaceEndpointEnabled == True %}
      - "traefik.http.middlewares.mw_{{ sWasdiRabbitMqServiceName }}_interface.stripprefix.prefixes={{ sWasdiRabbitMqInterfaceDefaultContextPath.rstrip('/') }}"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiRabbitMqInterfaceDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.service=s_{{ sWasdiRabbitMqServiceName }}_interface"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.tls=true"
{% endif %}
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.middlewares=mw_{{ sWasdiRabbitMqServiceName }}_interface@docker"
      - "traefik.http.services.s_{{ sWasdiRabbitMqServiceName }}_interface.loadbalancer.server.port={{ sWasdiRabbitMqInterfaceInternalPort }}"
{% endif %}
{% if bWasdiRabbitMqWebStompEndpointEnabled == True %}
      - "traefik.http.middlewares.mw_{{ sWasdiRabbitMqServiceName }}_stomp.stripprefix.prefixes={{ sWasdiRabbitMqWebStompDefaultContextPath.rstrip('/') }}"
      - "traefik.http.middlewares.mw_{{ sWasdiRabbitMqServiceName }}_stomp.stripprefix.forceSlash=true"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiRabbitMqWebStompDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.service=s_{{ sWasdiRabbitMqServiceName }}_stomp"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.tls=true"
{% endif %}
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.middlewares=mw_{{ sWasdiRabbitMqServiceName }}_stomp@docker"
      - "traefik.http.services.s_{{ sWasdiRabbitMqServiceName }}_stomp.loadbalancer.server.port={{ sWasdiRabbitMqWebStompInternalPort }}"
{% endif %}
{% endif %}
{% if (( sWasdiRabbitMqMainInternalPort | default("") ) != ""
        and ( sWasdiRabbitMqMainExternalPort | default("") ) != ""
        and (( aWasdiRabbitMqMainExternalIp | default([]) ) | length ) > 0
    ) or (
        ( sWasdiRabbitMqWebStompInternalPort | default("") ) != ""
        and ( sWasdiRabbitMqWebStompExternalPort | default("") ) != ""
        and (( aWasdiRabbitMqWebStompExternalIp | default([]) ) | length ) > 0
    )
%}
    ports:
{% if sWasdiRabbitMqMainInternalPort | default("") != ""
    and sWasdiRabbitMqMainExternalPort | default("") != "" %}
{% for sCurrentExternalIp in aWasdiRabbitMqMainExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiRabbitMqMainExternalPort }}:{{ sWasdiRabbitMqMainInternalPort }}"
{% endfor %}
{% endif %}
{% if sWasdiRabbitMqWebStompInternalPort | default("") != ""
    and sWasdiRabbitMqWebStompExternalPort | default("") != "" %}
{% for sCurrentExternalIp in aWasdiRabbitMqWebStompExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiRabbitMqWebStompExternalPort }}:{{ sWasdiRabbitMqWebStompInternalPort }}"
{% endfor %}
{% endif %}
{% endif %}
    pull_policy: "never"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiRabbitMqUlimitNofile }}
        hard: {{ sWasdiRabbitMqUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiRabbitMqServiceName }}/data01:/var/lib/rabbitmq:rw
{% endif %}
{% if bWasdiSchedulerEnabled == True %}
  {{ sWasdiSchedulerServiceName }}:
{% if bWasdiMongoEnabled == True %}
    depends_on:
      - {{ sWasdiMongoServiceName }}
{% endif %}
    image: "{{ sWasdiSchedulerServiceName }}:latest"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiSchedulerUlimitNofile }}
        hard: {{ sWasdiSchedulerUlimitNofile }}
    volumes:
      - "{{ sWasdiDockerSocketFilePath }}:{{ sWasdiDockerSocketFilePath }}:ro"
      - "{{ sWasdiDataRootDirectoryPath }}:{{ sWasdiDataRootDirectoryPath }}:rw"
      - "{{ sWasdiDataConfigurationRootDirectoryPath }}:{{ sWasdiDataConfigurationRootDirectoryPath }}:ro"
{% endif %}
{% if bWasdiSonarqubeEnabled == True %}
  {{ sWasdiSonarqubeServiceName }}:
    depends_on:
      - {{ sWasdiPostgresqlSonarqubeServiceName }}
      - {{ sWasdiTraefikServiceName }}
{% if ( aoWasdiSonarqubeEnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiSonarqubeCurrentEnvironmentVariable in aoWasdiSonarqubeEnvironmentVariable %}
      - {{ aoWasdiSonarqubeCurrentEnvironmentVariable['key'] }}={{ aoWasdiSonarqubeCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiSonarqubeImageName }}:{{ sWasdiSonarqubeVersion }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiSonarqubeServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiSonarqubeServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiSonarqubeDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiSonarqubeServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiSonarqubeServiceName }}.service=s_{{ sWasdiSonarqubeServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiSonarqubeServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiSonarqubeServiceName }}.loadbalancer.server.port={{ sWasdiSonarqubeInternalPort }}"
{% if sWasdiSonarqubeInternalPort | default("") != ""
    and sWasdiSonarqubeExternalPort | default("") != ""
    and aWasdiSonarqubeExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiSonarqubeExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiSonarqubeExternalPort }}:{{ sWasdiSonarqubeInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "always"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiSonarqubeUlimitNofile }}
        hard: {{ sWasdiSonarqubeUlimitNofile }}
{% if ( aWasdiSonarqubeVolume | length ) > 0 %}
    volumes:
{% for sWasdiSonarqubeCurrentVolume in aWasdiSonarqubeVolume %}
      - "{{ sWasdiSonarqubeCurrentVolume }}"
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiTelegrafEnabled == True %}
  {{ sWasdiTelegrafServiceName }}:
    depends_on:
{% if bWasdiMongoEnabled == True %}
      - {{ sWasdiMongoServiceName }}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
      - {{ sWasdiTomcatOgcProcessesServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
      - {{ sWasdiTomcatWasdiOpenEoServerServiceName }}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
      - {{ sWasdiTomcatWasdiWebServerServiceName }}
{% endif %}
{% if ( aoWasdiTelegrafEnvironmentVariable | length ) > 0 %}
    environment:
{% for aoWasdiTelegrafCurrentEnvironmentVariable in aoWasdiTelegrafEnvironmentVariable %}
      - {{ aoWasdiTelegrafCurrentEnvironmentVariable['key'] }}={{ aoWasdiTelegrafCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiTelegrafServiceName }}:latest"
{% if sWasdiTelegrafInternalPort | default("") != ""
    and sWasdiTelegrafExternalPort | default("") != ""
    and aWasdiTelegrafExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiTelegrafExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiTelegrafExternalPort }}:{{ sWasdiTelegrafInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiTelegrafUlimitNofile }}
        hard: {{ sWasdiTelegrafUlimitNofile }}
{% if ( aWasdiTelegrafVolume | length ) > 0 %}
    volumes:
{% for sWasdiTelegrafCurrentVolume in aWasdiTelegrafVolume %}
      - "{{ sWasdiTelegrafCurrentVolume }}"
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
  {{ sWasdiTomcatOgcProcessesServerServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      - {{ sWasdiGeoserverServiceName }}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
      - {{ sWasdiKeycloakServiceName }}
{% endif %}
      - {{ sWasdiMongoServiceName }}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
      - {{ sWasdiTraefikServiceName }}
    environment:
{% if sWasdiTomcatOgcProcessesServerEnvironmentCatalinaOpts | default('') != '' %}
      - CATALINA_OPTS={{ sWasdiTomcatOgcProcessesServerEnvironmentCatalinaOpts }}
{% endif %}
    image: "{{ sWasdiTomcatOgcProcessesServerServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiTomcatOgcProcessesServerDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.service=s_{{ sWasdiTomcatOgcProcessesServerServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiTomcatOgcProcessesServerServiceName }}.loadbalancer.server.port={{ sWasdiTomcatOgcProcessesServerInternalPort }}"
{% if sWasdiTomcatOgcProcessesServerInternalPort | default("") != ""
    and sWasdiTomcatOgcProcessesServerExternalPort | default("") != ""
    and aWasdiTomcatOgcProcessesServerExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiTomcatOgcProcessesServerExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiTomcatOgcProcessesServerExternalPort }}:{{ sWasdiTomcatOgcProcessesServerInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiTomcatOgcProcessesServerUlimitNofile }}
        hard: {{ sWasdiTomcatOgcProcessesServerUlimitNofile }}
    volumes:
      - {{ sWasdiDataRootDirectoryPath }}:{{ sWasdiDataRootDirectoryPath }}:rw
      - {{ sWasdiDataConfigurationRootDirectoryPath }}:{{ sWasdiDataConfigurationRootDirectoryPath }}:ro
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
  {{ sWasdiTomcatWasdiOpenEoServerServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      - {{ sWasdiGeoserverServiceName }}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
      - {{ sWasdiKeycloakServiceName }}
{% endif %}
      - {{ sWasdiMongoServiceName }}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
      - {{ sWasdiTraefikServiceName }}
    environment:
{% if sWasdiTomcatWasdiOpenEoServerEnvironmentCatalinaOpts | default('') != '' %}
      - CATALINA_OPTS={{ sWasdiTomcatWasdiOpenEoServerEnvironmentCatalinaOpts }}
{% endif %}
    image: "{{ sWasdiTomcatWasdiOpenEoServerServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiTomcatWasdiOpenEoServerDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.service=s_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.loadbalancer.server.port={{ sWasdiTomcatWasdiOpenEoServerInternalPort }}"
{% if sWasdiTomcatWasdiOpenEoServerInternalPort | default("") != ""
    and sWasdiTomcatWasdiOpenEoServerExternalPort | default("") != ""
    and aWasdiTomcatWasdiOpenEoServerExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiTomcatWasdiOpenEoServerExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiTomcatWasdiOpenEoServerExternalPort }}:{{ sWasdiTomcatWasdiOpenEoServerInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiTomcatWasdiOpenEoServerUlimitNofile }}
        hard: {{ sWasdiTomcatWasdiOpenEoServerUlimitNofile }}
    volumes:
      - {{ sWasdiDataRootDirectoryPath }}:{{ sWasdiDataRootDirectoryPath }}:rw
      - {{ sWasdiDataConfigurationRootDirectoryPath }}:{{ sWasdiDataConfigurationRootDirectoryPath }}:ro
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
  {{ sWasdiTomcatWasdiWebServerServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      - {{ sWasdiGeoserverServiceName }}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
      - {{ sWasdiKeycloakServiceName }}
{% endif %}
      - {{ sWasdiMongoServiceName }}
{% if bWasdiRabbitMqEnabled == True %}
      - {{ sWasdiRabbitMqServiceName }}
{% endif %}
      - {{ sWasdiTraefikServiceName }}
    environment:
{% if sWasdiTomcatWasdiWebServerEnvironmentCatalinaOpts | default('') != '' %}
      - CATALINA_OPTS={{ sWasdiTomcatWasdiWebServerEnvironmentCatalinaOpts }}
{% endif %}
    image: "{{ sWasdiTomcatWasdiWebServerServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiTomcatWasdiWebServerDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.service=s_{{ sWasdiTomcatWasdiWebServerServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiTomcatWasdiWebServerServiceName }}.loadbalancer.server.port={{ sWasdiTomcatWasdiWebServerInternalPort }}"
{% if sWasdiTomcatWasdiWebServerInternalPort | default("") != ""
    and sWasdiTomcatWasdiWebServerExternalPort | default("") != ""
    and aWasdiTomcatWasdiWebServerExternalIp | default([]) | length > 0 %}
    ports:
{% for sCurrentExternalIp in aWasdiTomcatWasdiWebServerExternalIp | sort %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiTomcatWasdiWebServerExternalPort }}:{{ sWasdiTomcatWasdiWebServerInternalPort }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiTomcatWasdiWebServerUlimitNofile }}
        hard: {{ sWasdiTomcatWasdiWebServerUlimitNofile }}
    volumes:
      - {{ sWasdiDataRootDirectoryPath }}:{{ sWasdiDataRootDirectoryPath }}:rw
      - {{ sWasdiDataConfigurationRootDirectoryPath }}:{{ sWasdiDataConfigurationRootDirectoryPath }}:ro
{% endif %}
  {{ sWasdiTraefikServiceName }}:
    command:
      - "--global.sendanonymoususage=false"
      - "--api.dashboard=true"
      - "--entryPoints.web.address=:{{ sWasdiTraefikHttpInternalPort }}"
      - "--entryPoints.web.forwardedHeaders.insecure"
{% if bWasdiSslEnabled == True %}
      - "--entryPoints.websecure.address=:{{ sWasdiTraefikHttpsInternalPort }}"
      - "--entryPoints.web.http.redirections.entrypoint.to=websecure"
      - "--entryPoints.web.http.redirections.entrypoint.scheme=https"
{% endif %}
{% if bWasdiTraefikAccessLogEnabled == True %}
      - "--accesslog=true"
{% endif %}
      - "--log=true"
      - "--log.level=DEBUG"
      - "--log.format=common"
      - "--providers.docker=true"
      - "--providers.docker.endpoint={{ sWasdiTraefikDockerEndpoint }}"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.watch=true"
      - "--providers.file.directory=/etc/traefik/conf.d"
      - "--providers.file.watch=true"
    image: "{{ sWasdiTraefikImageName }}:{{ sWasdiTraefikVersion }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.dashboard.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.middlewares=mw_wasdi-secure-denyFrame@file,mw_auth-dashboard@file"
      - "traefik.http.routers.dashboard.service=api@internal"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.dashboard.tls=true"
{% endif %}
{% if ( sWasdiTraefikHttpInternalPort | default("") != ""
    and sWasdiTraefikHttpExternalPort | default("") != ""
    and aWasdiTraefikExternalIp | default([]) | length > 0 )
    or ( sWasdiTraefikHttpsInternalPort | default("") != ""
    and sWasdiTraefikHttpsExternalPort | default("") != ""
    and aWasdiTraefikHttpsExternalIp | default([]) | length > 0 ) %}
    ports:
{% for sCurrentExternalIp in aWasdiTraefikExternalIp | sort %}
{% if ( sWasdiTraefikHttpInternalPort | default("") != ""
    and sWasdiTraefikHttpExternalPort | default("") != ""
    and aWasdiTraefikExternalIp | default([]) | length > 0 ) %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiTraefikHttpExternalPort }}:{{ sWasdiTraefikHttpInternalPort }}"
{% endif %}
{% if bWasdiSslEnabled == True
    and sWasdiTraefikHttpsInternalPort | default("") != ""
    and sWasdiTraefikHttpsExternalPort | default("") != ""
    and aWasdiTraefikExternalIp | default([]) | length > 0 %}
      - "{{ sCurrentExternalIp }}:{{ sWasdiTraefikHttpsExternalPort }}:{{ sWasdiTraefikHttpsInternalPort }}"
{% endif %}
{% endfor %}
{% endif %}
    pull_policy: "always"
    restart: "unless-stopped"
    stdin_open: true
    tty: true
    user: "{{ sWasdiTraefikUserName }}:{{ sWasdiTraefikGroupName }}"
    ulimits:
      nofile:
        soft: {{ sWasdiTraefikUlimitNofile }}
        hard: {{ sWasdiTraefikUlimitNofile }}
    volumes:
      - "{{ sWasdiDockerSocketFilePath }}:{{ sWasdiDockerSocketFilePath }}:ro"
{% if sWasdiTraefikSslSourceType | upper == 'MOUNT_EACH_FILE' %}
{% for aCurrentTraefikSslCertificate in aoWasdiTraefikSslCertificates %}
      - "{{ aCurrentTraefikSslCertificate['srcCertFile'] }}:/etc/traefik/certs/{{ aCurrentTraefikSslCertificate['certFile'] }}:ro"
      - "{{ aCurrentTraefikSslCertificate['srcKeyFile'] }}:/etc/traefik/certs/{{ aCurrentTraefikSslCertificate['keyFile'] }}:ro"
{% endfor %}
{% else %}
      - "{{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiTraefikServiceName }}/etc_traefik_certs:/etc/traefik/certs:ro"
{% endif %}
      - "{{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiTraefikServiceName }}/etc_traefik_conf.d:/etc/traefik/conf.d:ro"
{% if bWasdiUpdateMetricEnabled == True %}
  {{ sWasdiUpdateMetricServiceName }}:
    depends_on:
{% if bWasdiKeycloakEnabled == True %}
      - {{ sWasdiKeycloakServiceName }}
{% endif %}
      - {{ sWasdiTomcatWasdiWebServerServiceName }}
    image: "{{ sWasdiUpdateMetricServiceName }}:latest"
    restart: "unless-stopped"
    ulimits:
      nofile:
        soft: {{ sWasdiUpdateMetricUlimitNofile }}
        hard: {{ sWasdiUpdateMetricUlimitNofile }}
    volumes:
      - {{ sWasdiDataConfigurationRootDirectoryPath }}:{{ sWasdiDataConfigurationRootDirectoryPath }}:ro
      - {{ sWasdiDataPartitionRootDirectoryPath }}:{{ sWasdiDataPartitionRootDirectoryPath }}:ro
{% endif %}
