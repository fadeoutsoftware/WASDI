# {{ ansible_managed }}
version: "3"

# Default project name: all containers are
# prefixed with this value
name: "wasdi"

networks:
  default:
    name: "{{ sWasdiDockerNetworkName }}"
    driver: "bridge"
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
      com.docker.network.bridge.host_binding_ipv4: "0.0.0.0"
      com.docker.network.bridge.name: "br-{{ sWasdiDockerNetworkName }}"
      com.docker.network.driver.mtu: "1500"
    external: {% if bWasdiDockerNetworkMustBeCreated %}true{% else %}false{% endif %}

    ipam:
      driver: "default"
      config:
        - subnet: "{{ sWasdiDockerNetworkSubnet }}"
          gateway: "{{ sWasdiDockerNetworkGateway }}"

services:
{% if bWasdiClientEnabled == True %}
  {{ sWasdiClientServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      {{ sWasdiGeoserverServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
      {{ sWasdiKeycloakServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      {{ sWasdiRabbitMqServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
      {{ sWasdiTomcatOgcProcessesServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
      {{ sWasdiTomcatWasdiOpenEoServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
      {{ sWasdiTomcatWasdiWebServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% if ( aoWasdiClientEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiClientCurrentEnvironmentVariable in aoWasdiClientEnvironmentVariable %}
      - {{ aoWasdiClientCurrentEnvironmentVariable['key'] }}={{ aoWasdiClientCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiClientServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`/`)"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.service=s_{{ sWasdiClientServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiClientServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiClientServiceName }}.loadbalancer.server.port={{ sWasdiClientInternalPort }}"
{% if ( aWasdiClientPorts | length ) > 0 %}
    ports:
{% for sWasdiClientCurrentPort in aWasdiClientPorts %}
      - "{{ sWasdiClientCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiClientUlimitNofile }}
        hard: {{ sWasdiClientUlimitNofile }}
{% endif %}

{% if bWasdiClientV2Enabled == True %}
  {{ sWasdiClientV2ServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      {{ sWasdiGeoserverServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
      {{ sWasdiKeycloakServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      {{ sWasdiRabbitMqServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
      {{ sWasdiTomcatOgcProcessesServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
      {{ sWasdiTomcatWasdiOpenEoServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
      {{ sWasdiTomcatWasdiWebServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% if ( aoWasdiClientV2EnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiClientV2CurrentEnvironmentVariable in aoWasdiClientV2EnvironmentVariable %}
      - {{ aoWasdiClientV2CurrentEnvironmentVariable['key'] }}={{ aoWasdiClientV2CurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiClientV2ServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.rule=Host(`{{ sWasdiClientV2BaseUrl }}`) && PathPrefix(`/`)"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.service=s_{{ sWasdiClientV2ServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiClientV2ServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiClientV2ServiceName }}.loadbalancer.server.port={{ sWasdiClientV2InternalPort }}"
{% if ( aWasdiClientV2Ports | length ) > 0 %}
    ports:
{% for sWasdiClientV2CurrentPort in aWasdiClientV2Ports %}
      - "{{ sWasdiClientV2CurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiClientV2UlimitNofile }}
        hard: {{ sWasdiClientV2UlimitNofile }}
{% endif %}



{% if bRiseClientEnabled == True %}
  {{ sRiseClientServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      {{ sWasdiGeoserverServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bRiseServerEnabled == True %}
      {{ sRiseServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
    image: "{{ sRiseClientServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sRiseClientServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sRiseClientServiceName }}.rule=Host(`{{ sWasdiClientV2BaseUrl }}`) && PathPrefix(`/`)"
      - "traefik.http.routers.r_{{ sRiseClientServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sRiseClientServiceName }}.service=s_{{ sRiseClientServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sRiseClientServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sRiseClientServiceName }}.loadbalancer.server.port={{ sRiseClientInternalPort }}"
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiClientV2UlimitNofile }}
        hard: {{ sWasdiClientV2UlimitNofile }}
{% endif %}


{% if bWasdiGeoserverEnabled == True %}
  {{ sWasdiGeoserverServiceName }}:
    depends_on:
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% if ( aoWasdiGeoserverEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiGeoserverCurrentEnvironmentVariable in aoWasdiGeoserverEnvironmentVariable %}
      - {{ aoWasdiGeoserverCurrentEnvironmentVariable['key'] }}={{ aoWasdiGeoserverCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
{% if sEnvironmentName == "test" %}
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "--fail"
        - "--head"
        - "--max-time"
        - "5"
        - "--output"
        - "/dev/null"
        - "--silent"
        - "--show-error"
        - "--write-out"
        - "HTTP CODE: %{http_code}\n"
        - "http://127.0.0.1:{{ sWasdiGeoserverInternalPort }}/{{ sWasdiGeoserverDefaultContextPath.lstrip('/') }}/ows?service=WFS&acceptversions=2.0.0&request=GetCapabilities"
      interval: "5s"
      retries: "3"
      start_period: "2m"
      start_interval: "2s"
      timeout: "5s"
{% endif %}
    image: "{{ sWasdiGeoserverServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiGeoserverDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.service=s_{{ sWasdiGeoserverServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiGeoserverServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiGeoserverServiceName }}.loadbalancer.server.port={{ sWasdiGeoserverInternalPort }}"
{% if ( aWasdiGeoserverPorts | length ) > 0 %}
    ports:
{% for sWasdiGeoserverCurrentPort in aWasdiGeoserverPorts %}
      - "{{ sWasdiGeoserverCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiGeoserverUlimitNofile }}
        hard: {{ sWasdiGeoserverUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01:{{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiGeoserverServiceName }}/data01:rw
{% endif %}
{% if bWasdiGrafanaEnabled == True %}
  {{ sWasdiGrafanaServiceName }}:
{% if bWasdiInfluxDbGrafanaEnabled == True %}
    depends_on:
      {{ sWasdiInfluxDbGrafanaServiceName }}:
        condition: service_started
{% endif %}
{% if ( aoWasdiGrafanaEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiGrafanaCurrentEnvironmentVariable in aoWasdiGrafanaEnvironmentVariable %}
      - {{ aoWasdiGrafanaCurrentEnvironmentVariable['key'] }}={{ aoWasdiGrafanaCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiGrafanaImageName }}:{{ sWasdiGrafanaVersion }}"
{% if bWasdiGrafanaCluster == False %}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiGrafanaDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.service=s_{{ sWasdiGrafanaServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiGrafanaServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiGrafanaServiceName }}.loadbalancer.server.port={{ sWasdiGrafanaInternalPort }}"
{% endif %}
{% if ( aWasdiGrafanaPorts | length ) > 0 %}
    ports:
{% for sWasdiGrafanaCurrentPort in aWasdiGrafanaPorts %}
      - "{{ sWasdiGrafanaCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "missing"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiGrafanaUlimitNofile }}
        hard: {{ sWasdiGrafanaUlimitNofile }}
{% if ( aoWasdiGrafanaVolume | length ) > 0 %}
    volumes:
{% for aoWasdiGrafanaCurrentVolume in aoWasdiGrafanaVolume %}
      - {{ aoWasdiGrafanaCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiInfluxDbGrafanaEnabled == True %}
  {{ sWasdiInfluxDbGrafanaServiceName }}:
{% if ( aoWasdiInfluxDbGrafanaEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiInfluxDbGrafanaCurrentEnvironmentVariable in aoWasdiInfluxDbGrafanaEnvironmentVariable %}
      - {{ aoWasdiInfluxDbGrafanaCurrentEnvironmentVariable['key'] }}={{ aoWasdiInfluxDbGrafanaCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiInfluxDbGrafanaImageName }}:{{ sWasdiInfluxDbGrafanaVersion }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiInfluxDbGrafanaServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiInfluxDbGrafanaServiceName }}.rule=Host(`{{ sWasdiInfluxDbGrafanaHost }}`)"
      - "traefik.http.routers.r_{{ sWasdiInfluxDbGrafanaServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiInfluxDbGrafanaServiceName }}.service=s_{{ sWasdiInfluxDbGrafanaServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiInfluxDbGrafanaServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiInfluxDbGrafanaServiceName }}.loadbalancer.server.port={{ sWasdiInfluxDbGrafanaInternalPort }}"
{% if ( aWasdiInfluxDbGrafanaPorts | length ) > 0 %}
    ports:
{% for sWasdiInfluxDbGrafanaCurrentPort in aWasdiInfluxDbGrafanaPorts %}
      - "{{ sWasdiInfluxDbGrafanaCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "missing"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiInfluxDbGrafanaUlimitNofile }}
        hard: {{ sWasdiInfluxDbGrafanaUlimitNofile }}
{% if ( aoWasdiInfluxDbGrafanaVolume | length ) > 0 %}
    volumes:
{% for aoWasdiInfluxDbGrafanaCurrentVolume in aoWasdiInfluxDbGrafanaVolume %}
      - {{ aoWasdiInfluxDbGrafanaCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiJenkinsEnabled == True %}
  {{ sWasdiJenkinsServiceName }}:
    command:
      - "--httpPort={{ sWasdiJenkinsInternalPort }}"
      - "--prefix={{ sWasdiJenkinsDefaultContextPath.rstrip('/') }}"
      - "--sessionTimeout={{ iWasdiJenkinsSessionTimeout }}"
{% if ( aoWasdiJenkinsEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiJenkinsCurrentEnvironmentVariable in aoWasdiJenkinsEnvironmentVariable %}
      - {{ aoWasdiJenkinsCurrentEnvironmentVariable['key'] }}={{ aoWasdiJenkinsCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiJenkinsServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiJenkinsServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiJenkinsServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiJenkinsDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiJenkinsServiceName }}.middlewares=mw_wasdi-secure-allowFrame@file"
      - "traefik.http.routers.r_{{ sWasdiJenkinsServiceName }}.service=s_{{ sWasdiJenkinsServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiJenkinsServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiJenkinsServiceName }}.loadbalancer.server.port={{ sWasdiJenkinsInternalPort }}"
{% if ( aWasdiJenkinsPorts | length ) > 0 %}
    ports:
{% for sWasdiJenkinsCurrentPort in aWasdiJenkinsPorts %}
      - "{{ sWasdiJenkinsCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiJenkinsUlimitNofile }}
        hard: {{ sWasdiJenkinsUlimitNofile }}
{% if ( aoWasdiJenkinsVolume | length ) > 0 %}
    volumes:
{% for aoWasdiJenkinsCurrentVolume in aoWasdiJenkinsVolume %}
      - {{ aoWasdiJenkinsCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
  {{ sWasdiKeycloakServiceName }}:
    command:
      - "start"
{% if bWasdiKeycloakNewInstance | default(False) == True %}
      - "--import-realm"
{% endif %}
{% if bWasdiPostgresqlKeycloakEnabled == True %}
    depends_on:
      {{ sWasdiPostgresqlKeycloakServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
    entrypoint:
      - {{ sWasdiKeycloakRootDirectoryPath }}/{{ sWasdiKeycloakVersion }}/bin/kc.sh
{% if ( aoWasdiKeycloakEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiKeycloakCurrentEnvironmentVariable in aoWasdiKeycloakEnvironmentVariable %}
      - {{ aoWasdiKeycloakCurrentEnvironmentVariable['key'] }}={{ aoWasdiKeycloakCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
{% if sEnvironmentName == "test" %}
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "--fail"
        - "--head"
        - "--max-time"
        - "5"
        - "--output"
        - "/dev/null"
        - "--silent"
        - "--show-error"
        - "--write-out"
        - "HTTP CODE: %{http_code}\n"
        - "http://127.0.0.1:{{ sWasdiKeycloakInternalPort }}/{{ sWasdiKeycloakDefaultContextPath.lstrip('/') }}/health/ready"
      interval: "5s"
      retries: "3"
      start_period: "2m"
      start_interval: "2s"
      timeout: "5s"
{% endif %}
    image: "{{ sWasdiKeycloakServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiKeycloakDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.middlewares=mw_wasdi-secure-allowFrame@file"
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.service=s_{{ sWasdiKeycloakServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiKeycloakServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiKeycloakServiceName }}.loadbalancer.server.port={{ sWasdiKeycloakInternalPort }}"
{% if ( aWasdiKeycloakPorts | length ) > 0 %}
    ports:
{% for sWasdiKeycloakCurrentPort in aWasdiKeycloakPorts %}
      - "{{ sWasdiKeycloakCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiKeycloakUlimitNofile }}
        hard: {{ sWasdiKeycloakUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiKeycloakServiceName }}/opt_wasdi_keycloak_data_import:{{ sWasdiKeycloakRootDirectoryPath }}/{{ sWasdiKeycloakVersion }}/data/import:ro
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiKeycloakServiceName }}/opt_wasdi_keycloak_providers:{{ sWasdiKeycloakRootDirectoryPath }}/{{ sWasdiKeycloakVersion }}/providers:ro
{% endif %}
{% if bWasdiMongoEnabled == True %}
  {{ sWasdiMongoServiceName }}:
{% if ( aWasdiMongoCommand | length ) > 0 %}
    command:
{% for sWasdiMongoCurrentCommand in aWasdiMongoCommand %}
      - "{{ sWasdiMongoCurrentCommand }}"
{% endfor %}
{% endif %}
{% if ( sWasdiMongoInternalPort | default('') ) not in ['', '27017'] %}
      - "--port"
      - "{{ sWasdiMongoInternalPort }}"
    expose:
      - "{{ sWasdiMongoInternalPort }}"
{% endif %}
{% if ( aoWasdiMongoEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiMongoCurrentEnvironmentVariable in aoWasdiMongoEnvironmentVariable %}
      - {{ aoWasdiMongoCurrentEnvironmentVariable['key'] }}={{ aoWasdiMongoCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
{% if sEnvironmentName == "test" %}
    healthcheck:
      test:
        - "CMD"
        - "mongo"
        - "--quiet"
        - "127.0.0.1:{{ sWasdiMongoInternalPort }}/test"
        - "--eval"
        - "'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)'"
      interval: "5s"
      retries: "3"
      start_period: "2m"
      start_interval: "2s"
      timeout: "5s"
{% endif %}
    image: "{{ sWasdiMongoImageName }}:{{ sWasdiMongoVersion }}"
{% if ( aWasdiMongoPorts | length ) > 0 %}
    ports:
{% for sWasdiMongoCurrentPort in aWasdiMongoPorts %}
      - "{{ sWasdiMongoCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "missing"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiMongoUlimitNofile }}
        hard: {{ sWasdiMongoUlimitNofile }}
{% if ( aWasdiMongoVolume | length ) > 0 %}
    volumes:
{% for sWasdiMongoCurrentVolume in aWasdiMongoVolume %}
      - "{{ sWasdiMongoCurrentVolume }}"
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiMongoNv5LicenseServerEnabled == True %}
  {{ sWasdiMongoNv5LicenseServerServiceName }}:
{% if ( aWasdiMongoNv5LicenseServerCommand | length ) > 0 %}
    command:
{% for sWasdiMongoNv5LicenseServerCurrentCommand in aWasdiMongoNv5LicenseServerCommand %}
      - "{{ sWasdiMongoNv5LicenseServerCurrentCommand }}"
{% endfor %}
{% endif %}
{% if ( sWasdiMongoNv5LicenseServerInternalPort | default('') ) not in ['', '27017'] %}
      - "--port"
      - "{{ sWasdiMongoNv5LicenseServerInternalPort }}"
    expose:
      - "{{ sWasdiMongoNv5LicenseServerInternalPort }}"
{% endif %}
{% if ( aoWasdiMongoNv5LicenseServerEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiMongoNv5LicenseServerCurrentEnvironmentVariable in aoWasdiMongoNv5LicenseServerEnvironmentVariable %}
      - {{ aoWasdiMongoNv5LicenseServerCurrentEnvironmentVariable['key'] }}={{ aoWasdiMongoNv5LicenseServerCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiMongoNv5LicenseServerImageName }}:{{ sWasdiMongoNv5LicenseServerVersion }}"
{% if ( aWasdiMongoNv5LicenseServerPorts | length ) > 0 %}
    ports:
{% for sWasdiMongoNv5LicenseServerCurrentPort in aWasdiMongoNv5LicenseServerPorts %}
      - "{{ sWasdiMongoNv5LicenseServerCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "missing"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiMongoNv5LicenseServerUlimitNofile }}
        hard: {{ sWasdiMongoNv5LicenseServerUlimitNofile }}
{% if ( aWasdiMongoNv5LicenseServerVolume | length ) > 0 %}
    volumes:
{% for sWasdiMongoNv5LicenseServerCurrentVolume in aWasdiMongoNv5LicenseServerVolume %}
      - "{{ sWasdiMongoNv5LicenseServerCurrentVolume }}"
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiNexusEnabled == True %}
  {{ sWasdiNexusServiceName }}:
    depends_on:
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% if ( aoWasdiNexusEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiNexusCurrentEnvironmentVariable in aoWasdiNexusEnvironmentVariable %}
      - {{ aoWasdiNexusCurrentEnvironmentVariable['key'] }}={{ aoWasdiNexusCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiNexusImageName }}:{{ sWasdiNexusVersion }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiNexusDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}.middlewares=mw_wasdi-secure-allowFrame@file"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}.service=s_{{ sWasdiNexusServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiNexusServiceName }}.loadbalancer.server.port={{ sWasdiNexusInternalPort }}"
{% for aoWasdiNexusDockerCurrentRegistry in aoWasdiNexusDockerRegistries: %}
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.rule=Host(`{{ aoWasdiNexusDockerCurrentRegistry['url'] }}`)"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.middlewares=mw_wasdi-secure-allowFrame@file"
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.service=s_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiNexusServiceName }}_registry{{ loop.index }}.loadbalancer.server.port={{ aoWasdiNexusDockerCurrentRegistry['port'] }}"
{% endfor %}
{% if ( aWasdiNexusPorts | length ) > 0 %}
    ports:
{% for sWasdiNexusCurrentPort in aWasdiNexusPorts %}
      - "{{ sWasdiNexusCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "missing"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiNexusUlimitNofile }}
        hard: {{ sWasdiNexusUlimitNofile }}
{% if ( aoWasdiNexusVolume | length ) > 0 %}
    volumes:
{% for aoWasdiNexusCurrentVolume in aoWasdiNexusVolume %}
      - {{ aoWasdiNexusCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiPostgresqlKeycloakEnabled == True %}
  {{ sWasdiPostgresqlKeycloakServiceName }}:
{% if ( aWasdiPostgresqlKeycloakCommand | length ) > 0 %}
    command:
{% for sWasdiPostgresqlKeycloakCurrentCommand in aWasdiPostgresqlKeycloakCommand %}
      - "{{ sWasdiPostgresqlKeycloakCurrentCommand }}"
{% endfor %}
{% endif %}
{% if ( aoWasdiPostgresqlKeycloakEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiPostgresqlKeycloakCurrentEnvironmentVariable in aoWasdiPostgresqlKeycloakEnvironmentVariable %}
      - {{ aoWasdiPostgresqlKeycloakCurrentEnvironmentVariable['key'] }}={{ aoWasdiPostgresqlKeycloakCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
{% if sEnvironmentName == "test" %}
    healthcheck:
      test:
        - "CMD"
        - "pg_isready"
      interval: "5s"
      retries: "3"
      start_period: "2m"
      start_interval: "2s"
      timeout: "5s"
{% endif %}
    image: "{{ sWasdiPostgresqlKeycloakImageName }}:{{ sWasdiPostgresqlKeycloakVersion }}"
{% if ( aWasdiPostgresqlKeycloakPorts | length ) > 0 %}
    ports:
{% for sWasdiPostgresqlKeycloakCurrentPort in aWasdiPostgresqlKeycloakPorts %}
      - "{{ sWasdiPostgresqlKeycloakCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "missing"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiPostgresqlKeycloakUlimitNofile }}
        hard: {{ sWasdiPostgresqlKeycloakUlimitNofile }}
{% if ( aWasdiPostgresqlKeycloakVolume | length ) > 0 %}
    volumes:
{% for sWasdiPostgresqlKeycloakCurrentVolume in aWasdiPostgresqlKeycloakVolume %}
      - "{{ sWasdiPostgresqlKeycloakCurrentVolume }}"
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiPostgresqlSonarqubeEnabled == True %}
  {{ sWasdiPostgresqlSonarqubeServiceName }}:
{% if ( aoWasdiPostgresqlSonarqubeEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiPostgresqlSonarqubeCurrentEnvironmentVariable in aoWasdiPostgresqlSonarqubeEnvironmentVariable %}
      - {{ aoWasdiPostgresqlSonarqubeCurrentEnvironmentVariable['key'] }}={{ aoWasdiPostgresqlSonarqubeCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
{% if sEnvironmentName == "test" %}
    healthcheck:
      test:
        - "CMD"
        - "pg_isready"
      interval: "5s"
      retries: "3"
      start_period: "2m"
      start_interval: "2s"
      timeout: "5s"
{% endif %}
    image: "{{ sWasdiPostgresqlSonarqubeImageName }}:{{ sWasdiPostgresqlSonarqubeVersion }}"
{% if ( aWasdiPostgresqlSonarqubePorts | length ) > 0 %}
    ports:
{% for sWasdiPostgresqlSonarqubeCurrentPort in aWasdiPostgresqlSonarqubePorts %}
      - "{{ sWasdiPostgresqlSonarqubeCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "missing"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiPostgresqlSonarqubeUlimitNofile }}
        hard: {{ sWasdiPostgresqlSonarqubeUlimitNofile }}
    volumes:
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiPostgresqlSonarqubeServiceName }}/data01:/var/lib/postgresql/data
      - {{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiPostgresqlSonarqubeServiceName }}/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
  {{ sWasdiRabbitMqServiceName }}:
    depends_on:
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% if ( aoWasdiRabbitMqEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiRabbitMqCurrentEnvironmentVariable in aoWasdiRabbitMqEnvironmentVariable %}
      - {{ aoWasdiRabbitMqCurrentEnvironmentVariable['key'] }}={{ aoWasdiRabbitMqCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
{% if sEnvironmentName == "test" %}
    healthcheck:
      test:
        - "CMD"
        - "rabbitmq-diagnostics"
        - "--quiet"
        - "check_port_connectivity"
      interval: "5s"
      retries: "3"
      start_period: "2m"
      start_interval: "2s"
      timeout: "5s"
{% endif %}
    image: "{{ sWasdiRabbitMqServiceName }}:latest"
    labels:
{% if bWasdiRabbitMqInterfaceEndpointEnabled == True or bWasdiRabbitMqWebStompEndpointEnabled == True %}
      - "traefik.enable=true"
{% if bWasdiRabbitMqInterfaceEndpointEnabled == True %}
      - "traefik.http.middlewares.mw_{{ sWasdiRabbitMqServiceName }}_interface.stripprefix.prefixes={{ sWasdiRabbitMqInterfaceDefaultContextPath.rstrip('/') }}"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiRabbitMqInterfaceDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.service=s_{{ sWasdiRabbitMqServiceName }}_interface"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.tls=true"
{% endif %}
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_interface.middlewares=mw_{{ sWasdiRabbitMqServiceName }}_interface@docker"
      - "traefik.http.services.s_{{ sWasdiRabbitMqServiceName }}_interface.loadbalancer.server.port={{ sWasdiRabbitMqInterfaceInternalPort }}"
{% endif %}
{% if bWasdiRabbitMqWebStompEndpointEnabled == True %}
      - "traefik.http.middlewares.mw_{{ sWasdiRabbitMqServiceName }}_stomp.stripprefix.prefixes={{ sWasdiRabbitMqWebStompDefaultContextPath.rstrip('/') }}"
      - "traefik.http.middlewares.mw_{{ sWasdiRabbitMqServiceName }}_stomp.stripprefix.forceSlash=true"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiRabbitMqWebStompDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.service=s_{{ sWasdiRabbitMqServiceName }}_stomp"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.tls=true"
{% endif %}
      - "traefik.http.routers.r_{{ sWasdiRabbitMqServiceName }}_stomp.middlewares=mw_{{ sWasdiRabbitMqServiceName }}_stomp@docker"
      - "traefik.http.services.s_{{ sWasdiRabbitMqServiceName }}_stomp.loadbalancer.server.port={{ sWasdiRabbitMqWebStompInternalPort }}"
{% endif %}
{% endif %}
{% if ( aWasdiRabbitMqPorts | length ) > 0 %}
    ports:
{% for sWasdiRabbitMqCurrentPort in aWasdiRabbitMqPorts %}
      - "{{ sWasdiRabbitMqCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiRabbitMqUlimitNofile }}
        hard: {{ sWasdiRabbitMqUlimitNofile }}
{% if ( aWasdiRabbitMqVolume | length ) > 0 %}
    volumes:
{% for sWasdiRabbitMqCurrentVolume in aWasdiRabbitMqVolume %}
      - "{{ sWasdiRabbitMqCurrentVolume }}"
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiSchedulerEnabled == True %}
  {{ sWasdiSchedulerServiceName }}:
{% if bWasdiMongoEnabled == True %}
    depends_on:
      {{ sWasdiMongoServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
    image: "{{ sWasdiSchedulerServiceName }}:latest"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiSchedulerUlimitNofile }}
        hard: {{ sWasdiSchedulerUlimitNofile }}
    volumes:
      - "{{ sWasdiDockerSocketFilePath }}:{{ sWasdiDockerSocketFilePath }}:ro"
      - "{{ sWasdiDataRootDirectoryPath }}:{{ sWasdiDataRootDirectoryPath }}:rw"
      - "{{ sWasdiConfigurationRootDirectoryPath }}:{{ sWasdiConfigurationRootDirectoryPath }}:ro"
{% endif %}
{% if bWasdiSonarqubeEnabled == True %}
  {{ sWasdiSonarqubeServiceName }}:
    depends_on:
{% if bWasdiPostgresqlSonarqubeEnabled == True %}
      {{ sWasdiPostgresqlSonarqubeServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% if ( aoWasdiSonarqubeEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiSonarqubeCurrentEnvironmentVariable in aoWasdiSonarqubeEnvironmentVariable %}
      - {{ aoWasdiSonarqubeCurrentEnvironmentVariable['key'] }}={{ aoWasdiSonarqubeCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiSonarqubeImageName }}:{{ sWasdiSonarqubeVersion }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiSonarqubeServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiSonarqubeServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiSonarqubeDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiSonarqubeServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiSonarqubeServiceName }}.service=s_{{ sWasdiSonarqubeServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiSonarqubeServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiSonarqubeServiceName }}.loadbalancer.server.port={{ sWasdiSonarqubeInternalPort }}"
{% if ( aWasdiSonarqubePorts | length ) > 0 %}
    ports:
{% for sWasdiSonarqubeCurrentPort in aWasdiSonarqubePorts %}
      - "{{ sWasdiSonarqubeCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "missing"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiSonarqubeUlimitNofile }}
        hard: {{ sWasdiSonarqubeUlimitNofile }}
{% if ( aWasdiSonarqubeVolume | length ) > 0 %}
    volumes:
{% for sWasdiSonarqubeCurrentVolume in aWasdiSonarqubeVolume %}
      - "{{ sWasdiSonarqubeCurrentVolume }}"
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiTelegrafEnabled == True %}
  {{ sWasdiTelegrafServiceName }}:
    depends_on:
{% if bWasdiMongoEnabled == True %}
      {{ sWasdiMongoServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      {{ sWasdiRabbitMqServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
      {{ sWasdiTomcatOgcProcessesServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
      {{ sWasdiTomcatWasdiOpenEoServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
      {{ sWasdiTomcatWasdiWebServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if ( aoWasdiTelegrafEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiTelegrafCurrentEnvironmentVariable in aoWasdiTelegrafEnvironmentVariable %}
      - {{ aoWasdiTelegrafCurrentEnvironmentVariable['key'] }}={{ aoWasdiTelegrafCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiTelegrafServiceName }}:latest"
{% if ( aWasdiTelegrafPorts | length ) > 0 %}
    ports:
{% for sWasdiTelegrafCurrentPort in aWasdiTelegrafPorts %}
      - "{{ sWasdiTelegrafCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiTelegrafUlimitNofile }}
        hard: {{ sWasdiTelegrafUlimitNofile }}
{% if ( aWasdiTelegrafVolume | length ) > 0 %}
    volumes:
{% for sWasdiTelegrafCurrentVolume in aWasdiTelegrafVolume %}
      - "{{ sWasdiTelegrafCurrentVolume }}"
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiTomcatOgcProcessesServerEnabled == True %}
  {{ sWasdiTomcatOgcProcessesServerServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      {{ sWasdiGeoserverServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
      {{ sWasdiKeycloakServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiMongoEnabled == True %}
      {{ sWasdiMongoServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      {{ sWasdiRabbitMqServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% if ( aoWasdiTomcatOgcProcessesServerEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiTomcatOgcProcessesServerCurrentEnvironmentVariable in aoWasdiTomcatOgcProcessesServerEnvironmentVariable %}
      - {{ aoWasdiTomcatOgcProcessesServerCurrentEnvironmentVariable['key'] }}={{ aoWasdiTomcatOgcProcessesServerCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
{% if sEnvironmentName == "test" %}
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "--fail"
        - "--head"
        - "--max-time"
        - "5"
        - "--output"
        - "/dev/null"
        - "--silent"
        - "--show-error"
        - "--write-out"
        - "HTTP CODE: %{http_code}\n"
        - "http://127.0.0.1:{{ sWasdiTomcatOgcProcessesServerInternalPort }}/{{ sWasdiTomcatOgcProcessesServerDefaultContextPath.lstrip('/') }}/rest"
      interval: "5s"
      retries: "3"
      start_period: "2m"
      start_interval: "2s"
      timeout: "5s"
{% endif %}
    image: "{{ sWasdiTomcatOgcProcessesServerServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiTomcatOgcProcessesServerDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.service=s_{{ sWasdiTomcatOgcProcessesServerServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiTomcatOgcProcessesServerServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiTomcatOgcProcessesServerServiceName }}.loadbalancer.server.port={{ sWasdiTomcatOgcProcessesServerInternalPort }}"
{% if ( aWasdiTomcatOgcProcessesServerPorts | length ) > 0 %}
    ports:
{% for sWasdiTomcatOgcProcessesServerCurrentPort in aWasdiTomcatOgcProcessesServerPorts %}
      - "{{ sWasdiTomcatOgcProcessesServerCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiTomcatOgcProcessesServerUlimitNofile }}
        hard: {{ sWasdiTomcatOgcProcessesServerUlimitNofile }}
{% if ( aoWasdiTomcatOgcProcessesServerVolume | length ) > 0 %}
    volumes:
{% for aoWasdiTomcatOgcProcessesServerCurrentVolume in aoWasdiTomcatOgcProcessesServerVolume %}
      - {{ aoWasdiTomcatOgcProcessesServerCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiTomcatWasdiOpenEoServerEnabled == True %}
  {{ sWasdiTomcatWasdiOpenEoServerServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      {{ sWasdiGeoserverServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
      {{ sWasdiKeycloakServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiMongoEnabled == True %}
      {{ sWasdiMongoServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      {{ sWasdiRabbitMqServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% if ( aoWasdiTomcatWasdiOpenEoServerEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiTomcatWasdiOpenEoServerCurrentEnvironmentVariable in aoWasdiTomcatWasdiOpenEoServerEnvironmentVariable %}
      - {{ aoWasdiTomcatWasdiOpenEoServerCurrentEnvironmentVariable['key'] }}={{ aoWasdiTomcatWasdiOpenEoServerCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
{% if sEnvironmentName == "test" %}
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "--fail"
        - "--head"
        - "--max-time"
        - "5"
        - "--output"
        - "/dev/null"
        - "--silent"
        - "--show-error"
        - "--write-out"
        - "HTTP CODE: %{http_code}\n"
        - "http://127.0.0.1:{{ sWasdiTomcatWasdiOpenEoServerInternalPort }}/{{ sWasdiTomcatWasdiOpenEoServerDefaultContextPath.lstrip('/') }}/rest"
      interval: "5s"
      retries: "3"
      start_period: "2m"
      start_interval: "2s"
      timeout: "5s"
{% endif %}
    image: "{{ sWasdiTomcatWasdiOpenEoServerServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiTomcatWasdiOpenEoServerDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.service=s_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiTomcatWasdiOpenEoServerServiceName }}.loadbalancer.server.port={{ sWasdiTomcatWasdiOpenEoServerInternalPort }}"
{% if ( aWasdiTomcatWasdiOpenEoServerPorts | length ) > 0 %}
    ports:
{% for sWasdiTomcatWasdiOpenEoServerCurrentPort in aWasdiTomcatWasdiOpenEoServerPorts %}
      - "{{ sWasdiTomcatWasdiOpenEoServerCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiTomcatWasdiOpenEoServerUlimitNofile }}
        hard: {{ sWasdiTomcatWasdiOpenEoServerUlimitNofile }}
{% if ( aoWasdiTomcatWasdiOpenEoServerVolume | length ) > 0 %}
    volumes:
{% for aoWasdiTomcatWasdiOpenEoServerCurrentVolume in aoWasdiTomcatWasdiOpenEoServerVolume %}
      - {{ aoWasdiTomcatWasdiOpenEoServerCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
  {{ sWasdiTomcatWasdiWebServerServiceName }}:
    depends_on:
{% if bWasdiGeoserverEnabled == True %}
      {{ sWasdiGeoserverServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiKeycloakEnabled == True %}
      {{ sWasdiKeycloakServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiMongoEnabled == True %}
      {{ sWasdiMongoServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiRabbitMqEnabled == True %}
      {{ sWasdiRabbitMqServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% if ( aoWasdiTomcatWasdiWebServerEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiTomcatWasdiWebServerCurrentEnvironmentVariable in aoWasdiTomcatWasdiWebServerEnvironmentVariable %}
      - {{ aoWasdiTomcatWasdiWebServerCurrentEnvironmentVariable['key'] }}={{ aoWasdiTomcatWasdiWebServerCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
{% if sEnvironmentName == "test" %}
    healthcheck:
      test:
        - "CMD"
        - "curl"
        - "--fail"
        - "--head"
        - "--max-time"
        - "5"
        - "--output"
        - "/dev/null"
        - "--silent"
        - "--show-error"
        - "--write-out"
        - "HTTP CODE: %{http_code}\n"
        - "http://127.0.0.1:{{ sWasdiTomcatWasdiWebServerInternalPort }}/{{ sWasdiTomcatWasdiWebServerDefaultContextPath.lstrip('/') }}/rest/wasdi/hello"
      interval: "5s"
      retries: "3"
      start_period: "2m"
      start_interval: "2s"
      timeout: "5s"
{% endif %}
    image: "{{ sWasdiTomcatWasdiWebServerServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiTomcatWasdiWebServerDefaultContextPath.rstrip('/') }}`)"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.service=s_{{ sWasdiTomcatWasdiWebServerServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sWasdiTomcatWasdiWebServerServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sWasdiTomcatWasdiWebServerServiceName }}.loadbalancer.server.port={{ sWasdiTomcatWasdiWebServerInternalPort }}"
{% if ( aWasdiTomcatWasdiWebServerPorts | length ) > 0 %}
    ports:
{% for sWasdiTomcatWasdiWebServerCurrentPort in aWasdiTomcatWasdiWebServerPorts %}
      - "{{ sWasdiTomcatWasdiWebServerCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiTomcatWasdiWebServerUlimitNofile }}
        hard: {{ sWasdiTomcatWasdiWebServerUlimitNofile }}
{% if ( aoWasdiTomcatWasdiWebServerVolume | length ) > 0 %}
    volumes:
{% for aoWasdiTomcatWasdiWebServerCurrentVolume in aoWasdiTomcatWasdiWebServerVolume %}
      - {{ aoWasdiTomcatWasdiWebServerCurrentVolume }}
{% endfor %}
{% endif %}
{% endif %}


{% if bRiseServerEnabled == True %}
  {{ sRiseServerServiceName }}:
    depends_on:
{% if bWasdiMongoEnabled == True %}
      {{ sWasdiMongoServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
      {{ sWasdiTraefikServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% if ( aoRiseServerEnvironmentVariableDefault | default([]) | length ) > 0 %}
    environment:
{% for oVariable in aoRiseServerEnvironmentVariableDefault %}
      - {{ oVariable['key'] }}={{ oVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sRiseServerServiceName }}:latest"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.r_{{ sRiseServerServiceName }}.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.r_{{ sRiseServerServiceName }}.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && PathPrefix(`/rise`)"
      - "traefik.http.routers.r_{{ sRiseServerServiceName }}.middlewares=mw_wasdi-secure-denyFrame@file"
      - "traefik.http.routers.r_{{ sRiseServerServiceName }}.service=s_{{ sRiseServerServiceName }}"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.r_{{ sRiseServerServiceName }}.tls=true"
{% endif %}
      - "traefik.http.services.s_{{ sRiseServerServiceName }}.loadbalancer.server.port={{ sRiseServerInternalPort }}"
{% if ( aWasdiTomcatWasdiWebServerPorts | length ) > 0 %}
    ports:
{% for sWasdiTomcatWasdiWebServerCurrentPort in aWasdiTomcatWasdiWebServerPorts %}
      - "{{ sWasdiTomcatWasdiWebServerCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "never"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiTomcatWasdiWebServerUlimitNofile }}
        hard: {{ sWasdiTomcatWasdiWebServerUlimitNofile }}
{% if ( aoRiseTomcatWasdiWebServerVolume | length ) > 0 %}
    volumes:
{% for sVolume in aoRiseTomcatWasdiWebServerVolume %}
      - {{ sVolume }}
{% endfor %}
{% endif %}
{% endif %}


  {{ sWasdiTraefikServiceName }}:
    command:
      - "--global.sendanonymoususage=false"
      - "--api.dashboard=true"
      - "--entryPoints.web.address=:{{ sWasdiTraefikHttpInternalPort }}"
      - "--entryPoints.web.forwardedHeaders.insecure"
{% if bWasdiSslEnabled == True %}
      - "--entryPoints.websecure.address=:{{ sWasdiTraefikHttpsInternalPort }}"
      - "--entryPoints.web.http.redirections.entrypoint.to=websecure"
      - "--entryPoints.web.http.redirections.entrypoint.scheme=https"
{% endif %}
{% if bWasdiTraefikAccessLogEnabled == True %}
      - "--accesslog=true"
{% endif %}
      - "--log=true"
      - "--log.level=ERROR"
      - "--log.format=common"
{% if sEnvironmentName == "test" %}
      - "--ping"
{% endif %}
      - "--providers.docker=true"
      - "--providers.docker.endpoint={{ sWasdiTraefikDockerEndpoint }}"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.watch=true"
      - "--providers.file.directory=/etc/traefik/conf.d"
      - "--providers.file.watch=true"
{% if sEnvironmentName == "test" %}
    healthcheck:
      test:
        - "CMD"
        - "traefik"
        - "healthcheck"
        - "--ping"
      interval: "5s"
      retries: "3"
      start_period: "2m"
      start_interval: "2s"
      timeout: "5s"
{% endif %}
    image: "{{ sWasdiTraefikImageName }}:{{ sWasdiTraefikVersion }}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.entrypoints={{ sWasdiTraefikEntrypoint }}"
      - "traefik.http.routers.dashboard.rule=Host(`{{ sWasdiTraefikRuleHost }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.middlewares=mw_wasdi-secure-denyFrame@file,mw_auth-dashboard@file"
      - "traefik.http.routers.dashboard.service=api@internal"
{% if bWasdiSslEnabled == True %}
      - "traefik.http.routers.dashboard.tls=true"
{% endif %}
{% if ( aWasdiTraefikPorts | length ) > 0 %}
    ports:
{% for sWasdiTraefikCurrentPort in aWasdiTraefikPorts %}
      - "{{ sWasdiTraefikCurrentPort | regex_replace('^:', '') }}"
{% endfor %}
{% endif %}
    pull_policy: "missing"
    restart: "always"
    stdin_open: true
    tty: true
    user: "{{ sWasdiTraefikUserName }}:{{ sWasdiTraefikGroupName }}"
    ulimits:
      nofile:
        soft: {{ sWasdiTraefikUlimitNofile }}
        hard: {{ sWasdiTraefikUlimitNofile }}
    volumes:
      - "{{ sWasdiDockerSocketFilePath }}:{{ sWasdiDockerSocketFilePath }}:ro"
{% if sWasdiTraefikSslSourceType | upper == 'MOUNT_EACH_FILE' %}
{% for aCurrentTraefikSslCertificate in aoWasdiTraefikSslCertificates %}
      - "{{ aCurrentTraefikSslCertificate['srcCertFile'] }}:/etc/traefik/certs/{{ aCurrentTraefikSslCertificate['certFile'] }}:ro"
      - "{{ aCurrentTraefikSslCertificate['srcKeyFile'] }}:/etc/traefik/certs/{{ aCurrentTraefikSslCertificate['keyFile'] }}:ro"
{% endfor %}
{% else %}
      - "{{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiTraefikServiceName }}/etc_traefik_certs:/etc/traefik/certs:ro"
{% endif %}
      - "{{ sWasdiDataDockerVolumeRootDirectoryPath }}/{{ sWasdiTraefikServiceName }}/etc_traefik_conf.d:/etc/traefik/conf.d:ro"
{% if bWasdiUpdateMetricEnabled == True %}
  {{ sWasdiUpdateMetricServiceName }}:
    depends_on:
{% if bWasdiKeycloakEnabled == True %}
      {{ sWasdiKeycloakServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if bWasdiTomcatWasdiWebServerEnabled == True %}
      {{ sWasdiTomcatWasdiWebServerServiceName }}:
{% if sEnvironmentName == "test" %}
        condition: service_healthy
{% else %}
        condition: service_started
{% endif %}
{% endif %}
{% if ( aoWasdiUpdateMetricEnvironmentVariable | default([]) | length ) > 0 %}
    environment:
{% for aoWasdiUpdateMetricCurrentEnvironmentVariable in aoWasdiUpdateMetricEnvironmentVariable %}
      - {{ aoWasdiUpdateMetricCurrentEnvironmentVariable['key'] }}={{ aoWasdiUpdateMetricCurrentEnvironmentVariable['value'] }}
{% endfor %}
{% endif %}
    image: "{{ sWasdiUpdateMetricServiceName }}:latest"
    restart: "always"
    ulimits:
      nofile:
        soft: {{ sWasdiUpdateMetricUlimitNofile }}
        hard: {{ sWasdiUpdateMetricUlimitNofile }}
    volumes:
      - {{ sWasdiConfigurationRootDirectoryPath }}:{{ sWasdiConfigurationRootDirectoryPath }}:ro
      - {{ sWasdiDataPartitionRootDirectoryPath }}:{{ sWasdiDataPartitionRootDirectoryPath }}:ro
{% endif %}
