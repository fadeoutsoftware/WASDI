FROM ubuntu:22.04


MAINTAINER "WASDI SARL"


# Labels used to search our containers and/or images
LABEL docker-image-name={{ sWasdiToolboxServiceName }}


# From now, all commands executed are executed with the user 'root'
USER root


# This environment variable is setted to avoid packages to ask a confirmation
ENV DEBIAN_FRONTEND="noninteractive"

# This variable is setted to make Python stop creating files '.pyc'
ENV PYTHONDONTWRITEBYTECODE="False"

# This variable is setted to force the 'print' method of Python to flush message directly
ENV PYTHONUNBUFFERED="True"

# This variable is setted to set the default editor
ENV EDITOR="nano"


# RUN generic to create user, group, directories, etc
RUN groupadd --gid {{ sWasdiSystemGroupId }} --non-unique {{ sWasdiSystemGroupName }} && \
    useradd --create-home --home-dir {{ sWasdiSystemUserHome }} --uid {{ sWasdiSystemUserId }} --gid {{ sWasdiSystemGroupId }} --non-unique --shell /bin/bash {{ sWasdiSystemUserName }} && \
    mkdir --parents \
        {{ sWasdiSystemUserHome }}/.ssh \
        {{ sWasdiSoftwareRootDirectoryPath }} && \
    chown {{ sWasdiSystemUserName }}:{{ sWasdiSystemGroupName }} \
        {{ sWasdiSystemUserHome }}/.ssh && \
    chown {{ sWasdiSoftwareRootDirectoryOwner }}:{{ sWasdiSoftwareRootDirectoryGroup }} \
        {{ sWasdiSoftwareRootDirectoryPath }} && \
    chmod 700 \
        {{ sWasdiSystemUserHome }}/.ssh && \
    chmod {{ sWasdiSoftwareRootDirectoryMode }} \
        {{ sWasdiSoftwareRootDirectoryPath }}


# RUN generic to update the system and install common packages
RUN echo "APT::Install-Suggests \"0\";" > /etc/apt/apt.conf.d/99local && \
    echo "APT::Install-Recommends \"0\";" >> /etc/apt/apt.conf.d/99local && \
    echo "APT::Get::Assume-Yes \"true\";" >> /etc/apt/apt.conf.d/99local && \
    echo "APT::Keep-Downloaded-Packages \"false\";" >> /etc/apt/apt.conf.d/99local && \
    echo "Dpkg::Options::--force-confold;" >> /etc/apt/apt.conf.d/99local && \
    apt-get update && \
    apt-get install \
        ca-certificates && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy main restricted universe multiverse"          > /etc/apt/sources.list && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy-updates main restricted universe multiverse"  >> /etc/apt/sources.list && \
    echo "deb https://mirror.ubuntu.ikoula.com/ jammy-security main restricted universe multiverse" >> /etc/apt/sources.list && \
    apt-get update && \
    apt-get dist-upgrade && \
    apt-get install \
        curl \
        nano \
        tar \
        unzip \
        wget && \
    sed --in-place "s/# set tabsize.*/set tabsize 4/g" /etc/nanorc && \
    sed --in-place "s/# set tabstospaces/set tabstospaces/g" /etc/nanorc && \
    rm --recursive --force /var/lib/apt/lists/* && \
    find / -xdev -type d -name __pycache__ -exec rm --recursive --force {} +


# RUN specific to install all elements related to the toolbox
RUN groupadd --gid {{ sWasdiBackupSystemGroupId }} --non-unique {{ sWasdiBackupSystemGroupName }} && \
    useradd --create-home --home-dir {{ sWasdiBackupSystemUserHome }} --uid {{ sWasdiBackupSystemUserId }} --gid {{ sWasdiBackupSystemGroupId }} --non-unique --shell /bin/bash {{ sWasdiBackupSystemUserName }} && \
    apt-get update && \
    apt-get install \
        gpg && \
    curl --fail --silent --show-error --location https://pgp.mongodb.com/server-4.4.asc | gpg --dearmor --output /usr/share/keyrings/mongodb-server-4.4.gpg && \
    curl --fail --silent --show-error --location https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor --output /usr/share/keyrings/postgresql.gpg && \
    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-4.4.gpg ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/4.4 multiverse" > /etc/apt/sources.list.d/mongodb-org-4.4.list && \
    echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/postgresql.gpg ] https://apt.postgresql.org/pub/repos/apt jammy-pgdg main" > /etc/apt/sources.list.d/postgresql.list && \
    apt-get update && \
    apt-get install \
        iputils-ping \
        git \
        mongodb-org-tools \
        pbzip2 \
        postgresql-client-15 \
        python3 \
        python3-pip \
        python3-psycopg2 \
        python3-requests \
        python3-venv && \
    rm --recursive --force /var/lib/apt/lists/* && \
    find / -xdev -type d -name __pycache__ -exec rm --recursive --force {} +


# From now, all commands executed are executed with the user '{{ sWasdiSystemUserName }}'
USER {{ sWasdiSystemUserName }}


# RUN specific to install JDK 17
RUN mkdir --parents \
        {{ sWasdiJdk17RootDirectoryPath }} \
        {{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }} && \
    chown {{ sWasdiJdk17RootDirectoryOwner }}:{{ sWasdiJdk17RootDirectoryGroup }} \
        {{ sWasdiJdk17RootDirectoryPath }} \
        {{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }} && \
    chmod {{ sWasdiJdk17RootDirectoryMode }} \
        {{ sWasdiJdk17RootDirectoryPath }} \
        {{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }} && \
    wget \
        --no-verbose \
        --output-document /tmp/{{ sWasdiJdk17SourceUrl | basename }} \
        --progress=bar:force:noscroll \
        --show-progress \
        {{ sWasdiJdk17SourceUrl }} && \
    tar \
        --directory {{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }} \
        --extract \
        --file /tmp/{{ sWasdiJdk17SourceUrl | basename }} \
        --strip-components=1 && \
    ln \
        --symbolic \
        {{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }} \
        {{ sWasdiJdk17RootDirectoryPath }}/latest && \
    chown --no-dereference {{ sWasdiJdk17RootDirectoryOwner }}:{{ sWasdiJdk17RootDirectoryGroup }} \
        {{ sWasdiJdk17RootDirectoryPath }}/latest && \
    rm --force \
        /tmp/{{ sWasdiJdk17SourceUrl | basename }}

ENV JAVA_HOME="{{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }}"
ENV PATH="{{ sWasdiJdk17RootDirectoryPath }}/{{ sWasdiJdk17Version }}/bin:${PATH}"


# RUN specific to install all elements related to the toolbox
RUN mkdir --parents {{ sWasdiToolboxRootDirectoryPath }} \
        {{ sWasdiToolboxRootDirectoryPath }}/code \
        {{ sWasdiToolboxRootDirectoryPath }}/configuration \
        {{ sWasdiToolboxRootDirectoryPath }}/output \
        {{ sWasdiToolboxRootDirectoryPath }}/template \
        {{ sWasdiToolboxRootDirectoryPath }}/temporary \
        {{ sWasdiToolboxRootDirectoryPath }}/pythonVirtualEnvironment && \
    chmod 755 {{ sWasdiToolboxRootDirectoryPath }} \
        {{ sWasdiToolboxRootDirectoryPath }}/code \
        {{ sWasdiToolboxRootDirectoryPath }}/configuration \
        {{ sWasdiToolboxRootDirectoryPath }}/output \
        {{ sWasdiToolboxRootDirectoryPath }}/template \
        {{ sWasdiToolboxRootDirectoryPath }}/temporary \
        {{ sWasdiToolboxRootDirectoryPath }}/pythonVirtualEnvironment && \
    chmod 777 {{ sWasdiToolboxRootDirectoryPath }} \
        {{ sWasdiToolboxRootDirectoryPath }}/template \
        {{ sWasdiToolboxRootDirectoryPath }}/temporary && \
    python3 -m venv --system-site-packages {{ sWasdiToolboxRootDirectoryPath }}/pythonVirtualEnvironment && \
    {{ sWasdiToolboxRootDirectoryPath }}/pythonVirtualEnvironment/bin/pip3 install --no-cache-dir --no-compile \
        ConfigArgParse \
        dateutils \
        docker \
        jinja2 \
        prettytable \
        pymongo

ENV TOOLBOX_LOG_ON_SCREEN=true


# Set the workdir
WORKDIR {{ sWasdiToolboxRootDirectoryPath }}/code


# Copy data
COPY --chown={{ sWasdiSystemUserName }}:{{ sWasdiSystemGroupName }} ./dataToCopy/code/ {{ sWasdiToolboxRootDirectoryPath }}/code/


# ENTRYPOINT
ENTRYPOINT [ \
    "{{ sWasdiToolboxRootDirectoryPath }}/pythonVirtualEnvironment/bin/python3", \
    "{{ sWasdiToolboxRootDirectoryPath }}/code/toolbox.py", \
    "--log-on-screen", \
    "--configuration-directory", \
    "{{ sWasdiToolboxRootDirectoryPath }}/configuration" \
]
