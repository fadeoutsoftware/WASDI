http:
  routers:
    r_{{ sWasdiTraefikGenericServiceName }}:
{% if bWasdiContainerTraefikSslEnabled == True and aoWasdiContainerTraefikSslCertificates | default([]) | length > 0 %}
      entrypoints: "websecure"
{% else %}
      entrypoints: "webs"
{% endif %}
      rule: "Host(`{{ sWasdiContainerTraefikRuleHost }}`) && PathPrefix(`{{ sWasdiTraefikGenericDefaultContextPath }}`)"
      service: "s_{{ sWasdiTraefikGenericServiceName }}_lb"
      middlewares: "mw_wasdi-secure-allowFrame@file"
{% if bWasdiContainerTraefikSslEnabled == True and aoWasdiContainerTraefikSslCertificates | default([]) | length > 0 %}
      tls: true
{% endif %}
  services:
    s_{{ sWasdiTraefikGenericServiceName }}_lb:
      failover:
        service: "s_{{ sWasdiTraefikGenericServiceName }}_main"
        fallback: "s_{{ sWasdiTraefikGenericServiceName }}_fallback"
    s_{{ sWasdiTraefikGenericServiceName }}_main:
      loadBalancer:
        healthCheck:
          path: "{{ sWasdiTraefikGenericDefaultContextPath }}"
          interval: "{{ sWasdiTraefikGenericLoadBalancerHealthCheckInterval }}"
          timeout: "{{ sWasdiTraefikGenericLoadBalancerHealthCheckTimeout }}"
        servers:
          - url: "{{ sWasdiTraefikGenericLoadBalancerServersUrlMain }}"
    s_{{ sWasdiTraefikGenericServiceName }}_fallback:
      loadBalancer:
        healthCheck:
          path: "{{ sWasdiTraefikGenericDefaultContextPath }}"
          interval: "{{ sWasdiTraefikGenericLoadBalancerHealthCheckInterval }}"
          timeout: "{{ sWasdiTraefikGenericLoadBalancerHealthCheckTimeout }}"
        servers:
          - url: "{{ sWasdiTraefikGenericLoadBalancerServersUrlFallback }}"
